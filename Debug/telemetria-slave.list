
telemetria-slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005780  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  080058c0  080058c0  000068c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a88  08005a88  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005a88  08005a88  00006a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a90  08005a90  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a90  08005a90  00006a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a94  08005a94  00006a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005a98  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000320  20000068  08005b00  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000388  08005b00  00007388  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001474a  00000000  00000000  00007092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000328a  00000000  00000000  0001b7dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001480  00000000  00000000  0001ea68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f6d  00000000  00000000  0001fee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e30a  00000000  00000000  00020e55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001359f  00000000  00000000  0003f15f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b63fa  00000000  00000000  000526fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00108af8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058ac  00000000  00000000  00108b3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0010e3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000068 	.word	0x20000068
 800015c:	00000000 	.word	0x00000000
 8000160:	080058a8 	.word	0x080058a8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000006c 	.word	0x2000006c
 800017c:	080058a8 	.word	0x080058a8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000240:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000244:	f000 b96a 	b.w	800051c <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	460c      	mov	r4, r1
 8000268:	2b00      	cmp	r3, #0
 800026a:	d14e      	bne.n	800030a <__udivmoddi4+0xaa>
 800026c:	4694      	mov	ip, r2
 800026e:	458c      	cmp	ip, r1
 8000270:	4686      	mov	lr, r0
 8000272:	fab2 f282 	clz	r2, r2
 8000276:	d962      	bls.n	800033e <__udivmoddi4+0xde>
 8000278:	b14a      	cbz	r2, 800028e <__udivmoddi4+0x2e>
 800027a:	f1c2 0320 	rsb	r3, r2, #32
 800027e:	4091      	lsls	r1, r2
 8000280:	fa20 f303 	lsr.w	r3, r0, r3
 8000284:	fa0c fc02 	lsl.w	ip, ip, r2
 8000288:	4319      	orrs	r1, r3
 800028a:	fa00 fe02 	lsl.w	lr, r0, r2
 800028e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000292:	fa1f f68c 	uxth.w	r6, ip
 8000296:	fbb1 f4f7 	udiv	r4, r1, r7
 800029a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800029e:	fb07 1114 	mls	r1, r7, r4, r1
 80002a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a6:	fb04 f106 	mul.w	r1, r4, r6
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002b6:	f080 8112 	bcs.w	80004de <__udivmoddi4+0x27e>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 810f 	bls.w	80004de <__udivmoddi4+0x27e>
 80002c0:	3c02      	subs	r4, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a59      	subs	r1, r3, r1
 80002c6:	fa1f f38e 	uxth.w	r3, lr
 80002ca:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ce:	fb07 1110 	mls	r1, r7, r0, r1
 80002d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d6:	fb00 f606 	mul.w	r6, r0, r6
 80002da:	429e      	cmp	r6, r3
 80002dc:	d90a      	bls.n	80002f4 <__udivmoddi4+0x94>
 80002de:	eb1c 0303 	adds.w	r3, ip, r3
 80002e2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002e6:	f080 80fc 	bcs.w	80004e2 <__udivmoddi4+0x282>
 80002ea:	429e      	cmp	r6, r3
 80002ec:	f240 80f9 	bls.w	80004e2 <__udivmoddi4+0x282>
 80002f0:	4463      	add	r3, ip
 80002f2:	3802      	subs	r0, #2
 80002f4:	1b9b      	subs	r3, r3, r6
 80002f6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002fa:	2100      	movs	r1, #0
 80002fc:	b11d      	cbz	r5, 8000306 <__udivmoddi4+0xa6>
 80002fe:	40d3      	lsrs	r3, r2
 8000300:	2200      	movs	r2, #0
 8000302:	e9c5 3200 	strd	r3, r2, [r5]
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d905      	bls.n	800031a <__udivmoddi4+0xba>
 800030e:	b10d      	cbz	r5, 8000314 <__udivmoddi4+0xb4>
 8000310:	e9c5 0100 	strd	r0, r1, [r5]
 8000314:	2100      	movs	r1, #0
 8000316:	4608      	mov	r0, r1
 8000318:	e7f5      	b.n	8000306 <__udivmoddi4+0xa6>
 800031a:	fab3 f183 	clz	r1, r3
 800031e:	2900      	cmp	r1, #0
 8000320:	d146      	bne.n	80003b0 <__udivmoddi4+0x150>
 8000322:	42a3      	cmp	r3, r4
 8000324:	d302      	bcc.n	800032c <__udivmoddi4+0xcc>
 8000326:	4290      	cmp	r0, r2
 8000328:	f0c0 80f0 	bcc.w	800050c <__udivmoddi4+0x2ac>
 800032c:	1a86      	subs	r6, r0, r2
 800032e:	eb64 0303 	sbc.w	r3, r4, r3
 8000332:	2001      	movs	r0, #1
 8000334:	2d00      	cmp	r5, #0
 8000336:	d0e6      	beq.n	8000306 <__udivmoddi4+0xa6>
 8000338:	e9c5 6300 	strd	r6, r3, [r5]
 800033c:	e7e3      	b.n	8000306 <__udivmoddi4+0xa6>
 800033e:	2a00      	cmp	r2, #0
 8000340:	f040 8090 	bne.w	8000464 <__udivmoddi4+0x204>
 8000344:	eba1 040c 	sub.w	r4, r1, ip
 8000348:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800034c:	fa1f f78c 	uxth.w	r7, ip
 8000350:	2101      	movs	r1, #1
 8000352:	fbb4 f6f8 	udiv	r6, r4, r8
 8000356:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035a:	fb08 4416 	mls	r4, r8, r6, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb07 f006 	mul.w	r0, r7, r6
 8000366:	4298      	cmp	r0, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x11c>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x11a>
 8000374:	4298      	cmp	r0, r3
 8000376:	f200 80cd 	bhi.w	8000514 <__udivmoddi4+0x2b4>
 800037a:	4626      	mov	r6, r4
 800037c:	1a1c      	subs	r4, r3, r0
 800037e:	fa1f f38e 	uxth.w	r3, lr
 8000382:	fbb4 f0f8 	udiv	r0, r4, r8
 8000386:	fb08 4410 	mls	r4, r8, r0, r4
 800038a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800038e:	fb00 f707 	mul.w	r7, r0, r7
 8000392:	429f      	cmp	r7, r3
 8000394:	d908      	bls.n	80003a8 <__udivmoddi4+0x148>
 8000396:	eb1c 0303 	adds.w	r3, ip, r3
 800039a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800039e:	d202      	bcs.n	80003a6 <__udivmoddi4+0x146>
 80003a0:	429f      	cmp	r7, r3
 80003a2:	f200 80b0 	bhi.w	8000506 <__udivmoddi4+0x2a6>
 80003a6:	4620      	mov	r0, r4
 80003a8:	1bdb      	subs	r3, r3, r7
 80003aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ae:	e7a5      	b.n	80002fc <__udivmoddi4+0x9c>
 80003b0:	f1c1 0620 	rsb	r6, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 f706 	lsr.w	r7, r2, r6
 80003ba:	431f      	orrs	r7, r3
 80003bc:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c0:	fa04 f301 	lsl.w	r3, r4, r1
 80003c4:	ea43 030c 	orr.w	r3, r3, ip
 80003c8:	40f4      	lsrs	r4, r6
 80003ca:	fa00 f801 	lsl.w	r8, r0, r1
 80003ce:	0c38      	lsrs	r0, r7, #16
 80003d0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003d4:	fbb4 fef0 	udiv	lr, r4, r0
 80003d8:	fa1f fc87 	uxth.w	ip, r7
 80003dc:	fb00 441e 	mls	r4, r0, lr, r4
 80003e0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e4:	fb0e f90c 	mul.w	r9, lr, ip
 80003e8:	45a1      	cmp	r9, r4
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	d90a      	bls.n	8000406 <__udivmoddi4+0x1a6>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003f6:	f080 8084 	bcs.w	8000502 <__udivmoddi4+0x2a2>
 80003fa:	45a1      	cmp	r9, r4
 80003fc:	f240 8081 	bls.w	8000502 <__udivmoddi4+0x2a2>
 8000400:	f1ae 0e02 	sub.w	lr, lr, #2
 8000404:	443c      	add	r4, r7
 8000406:	eba4 0409 	sub.w	r4, r4, r9
 800040a:	fa1f f983 	uxth.w	r9, r3
 800040e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000412:	fb00 4413 	mls	r4, r0, r3, r4
 8000416:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800041a:	fb03 fc0c 	mul.w	ip, r3, ip
 800041e:	45a4      	cmp	ip, r4
 8000420:	d907      	bls.n	8000432 <__udivmoddi4+0x1d2>
 8000422:	193c      	adds	r4, r7, r4
 8000424:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000428:	d267      	bcs.n	80004fa <__udivmoddi4+0x29a>
 800042a:	45a4      	cmp	ip, r4
 800042c:	d965      	bls.n	80004fa <__udivmoddi4+0x29a>
 800042e:	3b02      	subs	r3, #2
 8000430:	443c      	add	r4, r7
 8000432:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000436:	fba0 9302 	umull	r9, r3, r0, r2
 800043a:	eba4 040c 	sub.w	r4, r4, ip
 800043e:	429c      	cmp	r4, r3
 8000440:	46ce      	mov	lr, r9
 8000442:	469c      	mov	ip, r3
 8000444:	d351      	bcc.n	80004ea <__udivmoddi4+0x28a>
 8000446:	d04e      	beq.n	80004e6 <__udivmoddi4+0x286>
 8000448:	b155      	cbz	r5, 8000460 <__udivmoddi4+0x200>
 800044a:	ebb8 030e 	subs.w	r3, r8, lr
 800044e:	eb64 040c 	sbc.w	r4, r4, ip
 8000452:	fa04 f606 	lsl.w	r6, r4, r6
 8000456:	40cb      	lsrs	r3, r1
 8000458:	431e      	orrs	r6, r3
 800045a:	40cc      	lsrs	r4, r1
 800045c:	e9c5 6400 	strd	r6, r4, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	e750      	b.n	8000306 <__udivmoddi4+0xa6>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f103 	lsr.w	r1, r0, r3
 800046c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000470:	fa24 f303 	lsr.w	r3, r4, r3
 8000474:	4094      	lsls	r4, r2
 8000476:	430c      	orrs	r4, r1
 8000478:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800047c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000480:	fa1f f78c 	uxth.w	r7, ip
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3110 	mls	r1, r8, r0, r3
 800048c:	0c23      	lsrs	r3, r4, #16
 800048e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000492:	fb00 f107 	mul.w	r1, r0, r7
 8000496:	4299      	cmp	r1, r3
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0x24c>
 800049a:	eb1c 0303 	adds.w	r3, ip, r3
 800049e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004a2:	d22c      	bcs.n	80004fe <__udivmoddi4+0x29e>
 80004a4:	4299      	cmp	r1, r3
 80004a6:	d92a      	bls.n	80004fe <__udivmoddi4+0x29e>
 80004a8:	3802      	subs	r0, #2
 80004aa:	4463      	add	r3, ip
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b2a4      	uxth	r4, r4
 80004b0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004b4:	fb08 3311 	mls	r3, r8, r1, r3
 80004b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004bc:	fb01 f307 	mul.w	r3, r1, r7
 80004c0:	42a3      	cmp	r3, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x276>
 80004c4:	eb1c 0404 	adds.w	r4, ip, r4
 80004c8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004cc:	d213      	bcs.n	80004f6 <__udivmoddi4+0x296>
 80004ce:	42a3      	cmp	r3, r4
 80004d0:	d911      	bls.n	80004f6 <__udivmoddi4+0x296>
 80004d2:	3902      	subs	r1, #2
 80004d4:	4464      	add	r4, ip
 80004d6:	1ae4      	subs	r4, r4, r3
 80004d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004dc:	e739      	b.n	8000352 <__udivmoddi4+0xf2>
 80004de:	4604      	mov	r4, r0
 80004e0:	e6f0      	b.n	80002c4 <__udivmoddi4+0x64>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e706      	b.n	80002f4 <__udivmoddi4+0x94>
 80004e6:	45c8      	cmp	r8, r9
 80004e8:	d2ae      	bcs.n	8000448 <__udivmoddi4+0x1e8>
 80004ea:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ee:	eb63 0c07 	sbc.w	ip, r3, r7
 80004f2:	3801      	subs	r0, #1
 80004f4:	e7a8      	b.n	8000448 <__udivmoddi4+0x1e8>
 80004f6:	4631      	mov	r1, r6
 80004f8:	e7ed      	b.n	80004d6 <__udivmoddi4+0x276>
 80004fa:	4603      	mov	r3, r0
 80004fc:	e799      	b.n	8000432 <__udivmoddi4+0x1d2>
 80004fe:	4630      	mov	r0, r6
 8000500:	e7d4      	b.n	80004ac <__udivmoddi4+0x24c>
 8000502:	46d6      	mov	lr, sl
 8000504:	e77f      	b.n	8000406 <__udivmoddi4+0x1a6>
 8000506:	4463      	add	r3, ip
 8000508:	3802      	subs	r0, #2
 800050a:	e74d      	b.n	80003a8 <__udivmoddi4+0x148>
 800050c:	4606      	mov	r6, r0
 800050e:	4623      	mov	r3, r4
 8000510:	4608      	mov	r0, r1
 8000512:	e70f      	b.n	8000334 <__udivmoddi4+0xd4>
 8000514:	3e02      	subs	r6, #2
 8000516:	4463      	add	r3, ip
 8000518:	e730      	b.n	800037c <__udivmoddi4+0x11c>
 800051a:	bf00      	nop

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000528:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800052c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800052e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4313      	orrs	r3, r2
 8000536:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000538:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800053c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4013      	ands	r3, r2
 8000542:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000544:	68fb      	ldr	r3, [r7, #12]
}
 8000546:	bf00      	nop
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr

08000550 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA11   ------> I2C2_SDA
*/
void MX_GPIO_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b086      	sub	sp, #24
 8000554:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000564:	2004      	movs	r0, #4
 8000566:	f7ff ffdb 	bl	8000520 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800056a:	2001      	movs	r0, #1
 800056c:	f7ff ffd8 	bl	8000520 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	2138      	movs	r1, #56	@ 0x38
 8000574:	4812      	ldr	r0, [pc, #72]	@ (80005c0 <MX_GPIO_Init+0x70>)
 8000576:	f001 ff03 	bl	8002380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800057a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800057e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000580:	2312      	movs	r3, #18
 8000582:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000584:	2300      	movs	r3, #0
 8000586:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000588:	2300      	movs	r3, #0
 800058a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800058c:	2304      	movs	r3, #4
 800058e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	4619      	mov	r1, r3
 8000594:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000598:	f001 fd92 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 800059c:	2338      	movs	r3, #56	@ 0x38
 800059e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a0:	2301      	movs	r3, #1
 80005a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005a8:	2303      	movs	r3, #3
 80005aa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	4619      	mov	r1, r3
 80005b0:	4803      	ldr	r0, [pc, #12]	@ (80005c0 <MX_GPIO_Init+0x70>)
 80005b2:	f001 fd85 	bl	80020c0 <HAL_GPIO_Init>

}
 80005b6:	bf00      	nop
 80005b8:	3718      	adds	r7, #24
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	48000800 	.word	0x48000800

080005c4 <LL_AHB2_GRP1_EnableClock>:
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005d0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80005d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4313      	orrs	r3, r2
 80005da:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005e0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4013      	ands	r3, r2
 80005e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005e8:	68fb      	ldr	r3, [r7, #12]
}
 80005ea:	bf00      	nop
 80005ec:	3714      	adds	r7, #20
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bc80      	pop	{r7}
 80005f2:	4770      	bx	lr

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b0a0      	sub	sp, #128	@ 0x80
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fa:	f001 fbbb 	bl	8001d74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fe:	f000 f923 	bl	8000848 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000602:	463b      	mov	r3, r7
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]

  // Enable GPIO Clocks
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000610:	2001      	movs	r0, #1
 8000612:	f7ff ffd7 	bl	80005c4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000616:	2002      	movs	r0, #2
 8000618:	f7ff ffd4 	bl	80005c4 <LL_AHB2_GRP1_EnableClock>

  // DEBUG_SUBGHZSPI_{NSSOUT, SCKOUT, MSIOOUT, MOSIOUT} pins
  GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 800061c:	23f0      	movs	r3, #240	@ 0xf0
 800061e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000620:	2302      	movs	r3, #2
 8000622:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000628:	2303      	movs	r3, #3
 800062a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = GPIO_AF13_DEBUG_SUBGHZSPI;
 800062c:	230d      	movs	r3, #13
 800062e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000630:	463b      	mov	r3, r7
 8000632:	4619      	mov	r1, r3
 8000634:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000638:	f001 fd42 	bl	80020c0 <HAL_GPIO_Init>

  // DEBUG_RF_{HSE32RDY, NRESET} pins
  GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_11;
 800063c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000640:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Alternate = GPIO_AF13_DEBUG_RF;
 8000642:	230d      	movs	r3, #13
 8000644:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000646:	463b      	mov	r3, r7
 8000648:	4619      	mov	r1, r3
 800064a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800064e:	f001 fd37 	bl	80020c0 <HAL_GPIO_Init>

  // DEBUG_RF_{SMPSRDY, LDORDY} pins
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_4;
 8000652:	2314      	movs	r3, #20
 8000654:	603b      	str	r3, [r7, #0]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000656:	463b      	mov	r3, r7
 8000658:	4619      	mov	r1, r3
 800065a:	486b      	ldr	r0, [pc, #428]	@ (8000808 <main+0x214>)
 800065c:	f001 fd30 	bl	80020c0 <HAL_GPIO_Init>

  // RF_BUSY pin
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000660:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000664:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Alternate = GPIO_AF6_RF_BUSY;
 8000666:	2306      	movs	r3, #6
 8000668:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066a:	463b      	mov	r3, r7
 800066c:	4619      	mov	r1, r3
 800066e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000672:	f001 fd25 	bl	80020c0 <HAL_GPIO_Init>

  // RF_{IRQ0, IRQ1, IRQ2} pins
  GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8;
 8000676:	f44f 7394 	mov.w	r3, #296	@ 0x128
 800067a:	603b      	str	r3, [r7, #0]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800067c:	463b      	mov	r3, r7
 800067e:	4619      	mov	r1, r3
 8000680:	4861      	ldr	r0, [pc, #388]	@ (8000808 <main+0x214>)
 8000682:	f001 fd1d 	bl	80020c0 <HAL_GPIO_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000686:	f7ff ff63 	bl	8000550 <MX_GPIO_Init>
  MX_SUBGHZ_Init();
 800068a:	f000 f9f7 	bl	8000a7c <MX_SUBGHZ_Init>
  MX_USART2_UART_Init();
 800068e:	f000 fa87 	bl	8000ba0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  BSP_LED_Init(LED_GREEN);
 8000692:	2001      	movs	r0, #1
 8000694:	f000 fb58 	bl	8000d48 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000698:	2002      	movs	r0, #2
 800069a:	f000 fb55 	bl	8000d48 <BSP_LED_Init>

  strcpy(uartBuff, "\n\n\n\rTELEMETRIA SLAVE - FORMULA TESLA UFMG\r\nVERSAO=1.0\r\n---------------\r\n");
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	4a5a      	ldr	r2, [pc, #360]	@ (800080c <main+0x218>)
 80006a4:	4618      	mov	r0, r3
 80006a6:	4611      	mov	r1, r2
 80006a8:	2349      	movs	r3, #73	@ 0x49
 80006aa:	461a      	mov	r2, r3
 80006ac:	f004 fcb0 	bl	8005010 <memcpy>
  HAL_UART_Transmit(&huart2, (uint8_t *)uartBuff, strlen(uartBuff), HAL_MAX_DELAY);
 80006b0:	f107 0314 	add.w	r3, r7, #20
 80006b4:	4618      	mov	r0, r3
 80006b6:	f7ff fd63 	bl	8000180 <strlen>
 80006ba:	4603      	mov	r3, r0
 80006bc:	b29a      	uxth	r2, r3
 80006be:	f107 0114 	add.w	r1, r7, #20
 80006c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006c6:	4852      	ldr	r0, [pc, #328]	@ (8000810 <main+0x21c>)
 80006c8:	f003 fe95 	bl	80043f6 <HAL_UART_Transmit>
  radioInit();
 80006cc:	f000 f90e 	bl	80008ec <radioInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  SUBGRF_SetDioIrqParams(
 80006d0:	2300      	movs	r3, #0
 80006d2:	2200      	movs	r2, #0
 80006d4:	f240 2142 	movw	r1, #578	@ 0x242
 80006d8:	f240 2042 	movw	r0, #578	@ 0x242
 80006dc:	f000 fe32 	bl	8001344 <SUBGRF_SetDioIrqParams>
          IRQ_RADIO_NONE
  );

  while (1)
  {
	rxDone = rxTimeout = rxError = false;
 80006e0:	2200      	movs	r2, #0
 80006e2:	4b4c      	ldr	r3, [pc, #304]	@ (8000814 <main+0x220>)
 80006e4:	4611      	mov	r1, r2
 80006e6:	7019      	strb	r1, [r3, #0]
 80006e8:	4b4b      	ldr	r3, [pc, #300]	@ (8000818 <main+0x224>)
 80006ea:	4611      	mov	r1, r2
 80006ec:	7019      	strb	r1, [r3, #0]
 80006ee:	4b4b      	ldr	r3, [pc, #300]	@ (800081c <main+0x228>)
 80006f0:	701a      	strb	r2, [r3, #0]

	SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX);
 80006f2:	2100      	movs	r1, #0
 80006f4:	2001      	movs	r0, #1
 80006f6:	f001 fa1f 	bl	8001b38 <SUBGRF_SetSwitch>
	SUBGRF_SetRx(3000 << 6);  // timeout de 3 segundos
 80006fa:	4849      	ldr	r0, [pc, #292]	@ (8000820 <main+0x22c>)
 80006fc:	f000 fd50 	bl	80011a0 <SUBGRF_SetRx>

	while (!rxDone && !rxTimeout && !rxError);
 8000700:	bf00      	nop
 8000702:	4b46      	ldr	r3, [pc, #280]	@ (800081c <main+0x228>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	b2db      	uxtb	r3, r3
 8000708:	f083 0301 	eor.w	r3, r3, #1
 800070c:	b2db      	uxtb	r3, r3
 800070e:	2b00      	cmp	r3, #0
 8000710:	d00f      	beq.n	8000732 <main+0x13e>
 8000712:	4b41      	ldr	r3, [pc, #260]	@ (8000818 <main+0x224>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	b2db      	uxtb	r3, r3
 8000718:	f083 0301 	eor.w	r3, r3, #1
 800071c:	b2db      	uxtb	r3, r3
 800071e:	2b00      	cmp	r3, #0
 8000720:	d007      	beq.n	8000732 <main+0x13e>
 8000722:	4b3c      	ldr	r3, [pc, #240]	@ (8000814 <main+0x220>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	b2db      	uxtb	r3, r3
 8000728:	f083 0301 	eor.w	r3, r3, #1
 800072c:	b2db      	uxtb	r3, r3
 800072e:	2b00      	cmp	r3, #0
 8000730:	d1e7      	bne.n	8000702 <main+0x10e>

	if (rxError)    status = "CRC ERR";
 8000732:	4b38      	ldr	r3, [pc, #224]	@ (8000814 <main+0x220>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	b2db      	uxtb	r3, r3
 8000738:	2b00      	cmp	r3, #0
 800073a:	d003      	beq.n	8000744 <main+0x150>
 800073c:	4b39      	ldr	r3, [pc, #228]	@ (8000824 <main+0x230>)
 800073e:	4a3a      	ldr	r2, [pc, #232]	@ (8000828 <main+0x234>)
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	e00b      	b.n	800075c <main+0x168>
	else if (rxTimeout) status = "TIMEOUT";
 8000744:	4b34      	ldr	r3, [pc, #208]	@ (8000818 <main+0x224>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	b2db      	uxtb	r3, r3
 800074a:	2b00      	cmp	r3, #0
 800074c:	d003      	beq.n	8000756 <main+0x162>
 800074e:	4b35      	ldr	r3, [pc, #212]	@ (8000824 <main+0x230>)
 8000750:	4a36      	ldr	r2, [pc, #216]	@ (800082c <main+0x238>)
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	e002      	b.n	800075c <main+0x168>
	else             status = "OK";
 8000756:	4b33      	ldr	r3, [pc, #204]	@ (8000824 <main+0x230>)
 8000758:	4a35      	ldr	r2, [pc, #212]	@ (8000830 <main+0x23c>)
 800075a:	601a      	str	r2, [r3, #0]

	len = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	67fb      	str	r3, [r7, #124]	@ 0x7c
	len += sprintf(uartBuff + len,
 8000760:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000762:	f107 0214 	add.w	r2, r7, #20
 8000766:	4413      	add	r3, r2
 8000768:	4a2e      	ldr	r2, [pc, #184]	@ (8000824 <main+0x230>)
 800076a:	6812      	ldr	r2, [r2, #0]
 800076c:	4931      	ldr	r1, [pc, #196]	@ (8000834 <main+0x240>)
 800076e:	4618      	mov	r0, r3
 8000770:	f004 fbfa 	bl	8004f68 <siprintf>
 8000774:	4602      	mov	r2, r0
 8000776:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000778:	4413      	add	r3, r2
 800077a:	67fb      	str	r3, [r7, #124]	@ 0x7c
	  "\r\n\r\n"
	  "Status: %s\r\n", status);

	if (rxDone)
 800077c:	4b27      	ldr	r3, [pc, #156]	@ (800081c <main+0x228>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	b2db      	uxtb	r3, r3
 8000782:	2b00      	cmp	r3, #0
 8000784:	d02b      	beq.n	80007de <main+0x1ea>
	{

	  SUBGRF_GetPayload(rxBuf, &rxSize, 0xFF);
 8000786:	22ff      	movs	r2, #255	@ 0xff
 8000788:	492b      	ldr	r1, [pc, #172]	@ (8000838 <main+0x244>)
 800078a:	482c      	ldr	r0, [pc, #176]	@ (800083c <main+0x248>)
 800078c:	f000 fc8a 	bl	80010a4 <SUBGRF_GetPayload>
	  len += sprintf(uartBuff + len,
 8000790:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000792:	f107 0214 	add.w	r2, r7, #20
 8000796:	4413      	add	r3, r2
 8000798:	4a27      	ldr	r2, [pc, #156]	@ (8000838 <main+0x244>)
 800079a:	7812      	ldrb	r2, [r2, #0]
 800079c:	4928      	ldr	r1, [pc, #160]	@ (8000840 <main+0x24c>)
 800079e:	4618      	mov	r0, r3
 80007a0:	f004 fbe2 	bl	8004f68 <siprintf>
 80007a4:	4602      	mov	r2, r0
 80007a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80007a8:	4413      	add	r3, r2
 80007aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
		  "Payload (%d bytes): ", rxSize);
	  for (int i = 0; i < 8; i++) {
 80007ac:	2300      	movs	r3, #0
 80007ae:	67bb      	str	r3, [r7, #120]	@ 0x78
 80007b0:	e012      	b.n	80007d8 <main+0x1e4>
		  len += sprintf(uartBuff + len, "%02X ", rxBuf[i]);
 80007b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80007b4:	f107 0214 	add.w	r2, r7, #20
 80007b8:	18d0      	adds	r0, r2, r3
 80007ba:	4a20      	ldr	r2, [pc, #128]	@ (800083c <main+0x248>)
 80007bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80007be:	4413      	add	r3, r2
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	461a      	mov	r2, r3
 80007c4:	491f      	ldr	r1, [pc, #124]	@ (8000844 <main+0x250>)
 80007c6:	f004 fbcf 	bl	8004f68 <siprintf>
 80007ca:	4602      	mov	r2, r0
 80007cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80007ce:	4413      	add	r3, r2
 80007d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
	  for (int i = 0; i < 8; i++) {
 80007d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80007d4:	3301      	adds	r3, #1
 80007d6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80007d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80007da:	2b07      	cmp	r3, #7
 80007dc:	dde9      	ble.n	80007b2 <main+0x1be>
	  }
	}

	HAL_UART_Transmit(&huart2, (uint8_t*)uartBuff, len, HAL_MAX_DELAY);
 80007de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80007e0:	b29a      	uxth	r2, r3
 80007e2:	f107 0114 	add.w	r1, r7, #20
 80007e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007ea:	4809      	ldr	r0, [pc, #36]	@ (8000810 <main+0x21c>)
 80007ec:	f003 fe03 	bl	80043f6 <HAL_UART_Transmit>

	if (rxDone) {
 80007f0:	4b0a      	ldr	r3, [pc, #40]	@ (800081c <main+0x228>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d002      	beq.n	8000800 <main+0x20c>
	  BSP_LED_Toggle(LED_GREEN);
 80007fa:	2001      	movs	r0, #1
 80007fc:	f000 fade 	bl	8000dbc <BSP_LED_Toggle>
	}

	HAL_Delay(100);  // pequeno intervalo antes de reiniciar o RX
 8000800:	2064      	movs	r0, #100	@ 0x64
 8000802:	f001 fb2d 	bl	8001e60 <HAL_Delay>
	rxDone = rxTimeout = rxError = false;
 8000806:	e76b      	b.n	80006e0 <main+0xec>
 8000808:	48000400 	.word	0x48000400
 800080c:	080058c0 	.word	0x080058c0
 8000810:	200001a0 	.word	0x200001a0
 8000814:	20000086 	.word	0x20000086
 8000818:	20000085 	.word	0x20000085
 800081c:	20000084 	.word	0x20000084
 8000820:	0002ee00 	.word	0x0002ee00
 8000824:	2000018c 	.word	0x2000018c
 8000828:	0800590c 	.word	0x0800590c
 800082c:	08005914 	.word	0x08005914
 8000830:	0800591c 	.word	0x0800591c
 8000834:	08005920 	.word	0x08005920
 8000838:	20000188 	.word	0x20000188
 800083c:	20000088 	.word	0x20000088
 8000840:	08005934 	.word	0x08005934
 8000844:	0800594c 	.word	0x0800594c

08000848 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b09a      	sub	sp, #104	@ 0x68
 800084c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084e:	f107 0320 	add.w	r3, r7, #32
 8000852:	2248      	movs	r2, #72	@ 0x48
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f004 fba6 	bl	8004fa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800085c:	1d3b      	adds	r3, r7, #4
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
 8000868:	611a      	str	r2, [r3, #16]
 800086a:	615a      	str	r2, [r3, #20]
 800086c:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800086e:	4b1e      	ldr	r3, [pc, #120]	@ (80008e8 <SystemClock_Config+0xa0>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000876:	4a1c      	ldr	r2, [pc, #112]	@ (80008e8 <SystemClock_Config+0xa0>)
 8000878:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800087c:	6013      	str	r3, [r2, #0]
 800087e:	4b1a      	ldr	r3, [pc, #104]	@ (80008e8 <SystemClock_Config+0xa0>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000886:	603b      	str	r3, [r7, #0]
 8000888:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800088a:	2320      	movs	r3, #32
 800088c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800088e:	2301      	movs	r3, #1
 8000890:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000892:	2300      	movs	r3, #0
 8000894:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000896:	23b0      	movs	r3, #176	@ 0xb0
 8000898:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800089a:	2300      	movs	r3, #0
 800089c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089e:	f107 0320 	add.w	r3, r7, #32
 80008a2:	4618      	mov	r0, r3
 80008a4:	f002 f86e 	bl	8002984 <HAL_RCC_OscConfig>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80008ae:	f000 f88b 	bl	80009c8 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80008b2:	234f      	movs	r3, #79	@ 0x4f
 80008b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80008b6:	2300      	movs	r3, #0
 80008b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008be:	2300      	movs	r3, #0
 80008c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	2102      	movs	r1, #2
 80008ce:	4618      	mov	r0, r3
 80008d0:	f002 fbda 	bl	8003088 <HAL_RCC_ClockConfig>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <SystemClock_Config+0x96>
  {
    Error_Handler();
 80008da:	f000 f875 	bl	80009c8 <Error_Handler>
  }
}
 80008de:	bf00      	nop
 80008e0:	3768      	adds	r7, #104	@ 0x68
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	58000400 	.word	0x58000400

080008ec <radioInit>:
/**
  * @brief  Initialize the Sub-GHz radio and dependent hardware.
  * @retval None
  */
void radioInit(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08c      	sub	sp, #48	@ 0x30
 80008f0:	af00      	add	r7, sp, #0
  SUBGRF_Init(RadioOnDioIrq);
 80008f2:	4820      	ldr	r0, [pc, #128]	@ (8000974 <radioInit+0x88>)
 80008f4:	f000 fb8e 	bl	8001014 <SUBGRF_Init>

  SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 80008f8:	2100      	movs	r1, #0
 80008fa:	2000      	movs	r0, #0
 80008fc:	f001 f828 	bl	8001950 <SUBGRF_SetBufferBaseAddress>

  SUBGRF_SetRfFrequency(RF_FREQUENCY);
 8000900:	481d      	ldr	r0, [pc, #116]	@ (8000978 <radioInit+0x8c>)
 8000902:	f000 fd7b 	bl	80013fc <SUBGRF_SetRfFrequency>
  SUBGRF_SetRfTxPower(TX_OUTPUT_POWER);
 8000906:	200e      	movs	r0, #14
 8000908:	f001 f93e 	bl	8001b88 <SUBGRF_SetRfTxPower>

  SUBGRF_SetPacketType(PACKET_TYPE_LORA);
 800090c:	2001      	movs	r0, #1
 800090e:	f000 fdbb 	bl	8001488 <SUBGRF_SetPacketType>

  ModulationParams_t modParams = {
 8000912:	f107 0314 	add.w	r3, r7, #20
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]
 8000922:	615a      	str	r2, [r3, #20]
 8000924:	619a      	str	r2, [r3, #24]
 8000926:	2301      	movs	r3, #1
 8000928:	753b      	strb	r3, [r7, #20]
 800092a:	2307      	movs	r3, #7
 800092c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8000930:	2304      	movs	r3, #4
 8000932:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8000936:	2301      	movs	r3, #1
 8000938:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
      .CodingRate          = LORA_CR_4_5,
      .SpreadingFactor     = LORA_SF7,
      .LowDatarateOptimize = 0
    }
  };
  SUBGRF_SetModulationParams(&modParams);
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	4618      	mov	r0, r3
 8000942:	f000 fe95 	bl	8001670 <SUBGRF_SetModulationParams>

  PacketParams_t pktParams = {
 8000946:	463b      	mov	r3, r7
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]
 8000954:	2301      	movs	r3, #1
 8000956:	703b      	strb	r3, [r7, #0]
 8000958:	2308      	movs	r3, #8
 800095a:	81fb      	strh	r3, [r7, #14]
 800095c:	23ff      	movs	r3, #255	@ 0xff
 800095e:	747b      	strb	r3, [r7, #17]
 8000960:	2301      	movs	r3, #1
 8000962:	74bb      	strb	r3, [r7, #18]
      .InvertIQ       = LORA_IQ_NORMAL,
      .PayloadLength  = 0xFF,          // valor “max” genérico
      .PreambleLength = LORA_PREAMBLE_LENGTH
    }
  };
  SUBGRF_SetPacketParams(&pktParams);
 8000964:	463b      	mov	r3, r7
 8000966:	4618      	mov	r0, r3
 8000968:	f000 ff54 	bl	8001814 <SUBGRF_SetPacketParams>
}
 800096c:	bf00      	nop
 800096e:	3730      	adds	r7, #48	@ 0x30
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	0800097d 	.word	0x0800097d
 8000978:	33bca100 	.word	0x33bca100

0800097c <RadioOnDioIrq>:
  * @brief  Receive data trough SUBGHZSPI peripheral
  * @param  radioIrq  interrupt pending status information
  * @retval None
  */
void RadioOnDioIrq(RadioIrqMasks_t irq)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	80fb      	strh	r3, [r7, #6]
  if (irq == IRQ_RX_DONE)           rxDone    = true;
 8000986:	88fb      	ldrh	r3, [r7, #6]
 8000988:	2b02      	cmp	r3, #2
 800098a:	d103      	bne.n	8000994 <RadioOnDioIrq+0x18>
 800098c:	4b0b      	ldr	r3, [pc, #44]	@ (80009bc <RadioOnDioIrq+0x40>)
 800098e:	2201      	movs	r2, #1
 8000990:	701a      	strb	r2, [r3, #0]
  else if (irq == IRQ_RX_TX_TIMEOUT) rxTimeout = true;
  else if (irq == IRQ_CRC_ERROR)     rxError   = true;
}
 8000992:	e00d      	b.n	80009b0 <RadioOnDioIrq+0x34>
  else if (irq == IRQ_RX_TX_TIMEOUT) rxTimeout = true;
 8000994:	88fb      	ldrh	r3, [r7, #6]
 8000996:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800099a:	d103      	bne.n	80009a4 <RadioOnDioIrq+0x28>
 800099c:	4b08      	ldr	r3, [pc, #32]	@ (80009c0 <RadioOnDioIrq+0x44>)
 800099e:	2201      	movs	r2, #1
 80009a0:	701a      	strb	r2, [r3, #0]
}
 80009a2:	e005      	b.n	80009b0 <RadioOnDioIrq+0x34>
  else if (irq == IRQ_CRC_ERROR)     rxError   = true;
 80009a4:	88fb      	ldrh	r3, [r7, #6]
 80009a6:	2b40      	cmp	r3, #64	@ 0x40
 80009a8:	d102      	bne.n	80009b0 <RadioOnDioIrq+0x34>
 80009aa:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <RadioOnDioIrq+0x48>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	701a      	strb	r2, [r3, #0]
}
 80009b0:	bf00      	nop
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bc80      	pop	{r7}
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	20000084 	.word	0x20000084
 80009c0:	20000085 	.word	0x20000085
 80009c4:	20000086 	.word	0x20000086

080009c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009cc:	b672      	cpsid	i
}
 80009ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <Error_Handler+0x8>

080009d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr

080009e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <NMI_Handler+0x4>

080009e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <HardFault_Handler+0x4>

080009f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f4:	bf00      	nop
 80009f6:	e7fd      	b.n	80009f4 <MemManage_Handler+0x4>

080009f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <BusFault_Handler+0x4>

08000a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <UsageFault_Handler+0x4>

08000a08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr

08000a14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc80      	pop	{r7}
 8000a1e:	4770      	bx	lr

08000a20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr

08000a2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a30:	f001 f9fa 	bl	8001e28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8000a3c:	4802      	ldr	r0, [pc, #8]	@ (8000a48 <SUBGHZ_Radio_IRQHandler+0x10>)
 8000a3e:	f003 fac6 	bl	8003fce <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000190 	.word	0x20000190

08000a4c <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8000a54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a58:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000a5a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8000a64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a68:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a70:	68fb      	ldr	r3, [r7, #12]
}
 8000a72:	bf00      	nop
 8000a74:	3714      	adds	r7, #20
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr

08000a7c <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8000a80:	4b06      	ldr	r3, [pc, #24]	@ (8000a9c <MX_SUBGHZ_Init+0x20>)
 8000a82:	2208      	movs	r2, #8
 8000a84:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8000a86:	4805      	ldr	r0, [pc, #20]	@ (8000a9c <MX_SUBGHZ_Init+0x20>)
 8000a88:	f003 f872 	bl	8003b70 <HAL_SUBGHZ_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8000a92:	f7ff ff99 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000190 	.word	0x20000190

08000aa0 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	f7ff ffcf 	bl	8000a4c <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	2032      	movs	r0, #50	@ 0x32
 8000ab4:	f001 facf 	bl	8002056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8000ab8:	2032      	movs	r0, #50	@ 0x32
 8000aba:	f001 fae6 	bl	800208a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
	...

08000ac8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ad0:	4a14      	ldr	r2, [pc, #80]	@ (8000b24 <_sbrk+0x5c>)
 8000ad2:	4b15      	ldr	r3, [pc, #84]	@ (8000b28 <_sbrk+0x60>)
 8000ad4:	1ad3      	subs	r3, r2, r3
 8000ad6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000adc:	4b13      	ldr	r3, [pc, #76]	@ (8000b2c <_sbrk+0x64>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d102      	bne.n	8000aea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ae4:	4b11      	ldr	r3, [pc, #68]	@ (8000b2c <_sbrk+0x64>)
 8000ae6:	4a12      	ldr	r2, [pc, #72]	@ (8000b30 <_sbrk+0x68>)
 8000ae8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aea:	4b10      	ldr	r3, [pc, #64]	@ (8000b2c <_sbrk+0x64>)
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4413      	add	r3, r2
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d207      	bcs.n	8000b08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000af8:	f004 fa5e 	bl	8004fb8 <__errno>
 8000afc:	4603      	mov	r3, r0
 8000afe:	220c      	movs	r2, #12
 8000b00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b06:	e009      	b.n	8000b1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b08:	4b08      	ldr	r3, [pc, #32]	@ (8000b2c <_sbrk+0x64>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b0e:	4b07      	ldr	r3, [pc, #28]	@ (8000b2c <_sbrk+0x64>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4413      	add	r3, r2
 8000b16:	4a05      	ldr	r2, [pc, #20]	@ (8000b2c <_sbrk+0x64>)
 8000b18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3718      	adds	r7, #24
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20010000 	.word	0x20010000
 8000b28:	00000400 	.word	0x00000400
 8000b2c:	2000019c 	.word	0x2000019c
 8000b30:	20000388 	.word	0x20000388

08000b34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr

08000b40 <LL_AHB2_GRP1_EnableClock>:
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b4c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b4e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b5c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4013      	ands	r3, r2
 8000b62:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b64:	68fb      	ldr	r3, [r7, #12]
}
 8000b66:	bf00      	nop
 8000b68:	3714      	adds	r7, #20
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr

08000b70 <LL_APB1_GRP1_EnableClock>:
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000b78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b7c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000b7e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000b88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b8c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4013      	ands	r3, r2
 8000b92:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b94:	68fb      	ldr	r3, [r7, #12]
}
 8000b96:	bf00      	nop
 8000b98:	3714      	adds	r7, #20
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr

08000ba0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ba4:	4b22      	ldr	r3, [pc, #136]	@ (8000c30 <MX_USART2_UART_Init+0x90>)
 8000ba6:	4a23      	ldr	r2, [pc, #140]	@ (8000c34 <MX_USART2_UART_Init+0x94>)
 8000ba8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000baa:	4b21      	ldr	r3, [pc, #132]	@ (8000c30 <MX_USART2_UART_Init+0x90>)
 8000bac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb2:	4b1f      	ldr	r3, [pc, #124]	@ (8000c30 <MX_USART2_UART_Init+0x90>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bb8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c30 <MX_USART2_UART_Init+0x90>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bbe:	4b1c      	ldr	r3, [pc, #112]	@ (8000c30 <MX_USART2_UART_Init+0x90>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bc4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c30 <MX_USART2_UART_Init+0x90>)
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bca:	4b19      	ldr	r3, [pc, #100]	@ (8000c30 <MX_USART2_UART_Init+0x90>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd0:	4b17      	ldr	r3, [pc, #92]	@ (8000c30 <MX_USART2_UART_Init+0x90>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bd6:	4b16      	ldr	r3, [pc, #88]	@ (8000c30 <MX_USART2_UART_Init+0x90>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bdc:	4b14      	ldr	r3, [pc, #80]	@ (8000c30 <MX_USART2_UART_Init+0x90>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000be2:	4b13      	ldr	r3, [pc, #76]	@ (8000c30 <MX_USART2_UART_Init+0x90>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000be8:	4811      	ldr	r0, [pc, #68]	@ (8000c30 <MX_USART2_UART_Init+0x90>)
 8000bea:	f003 fbb4 	bl	8004356 <HAL_UART_Init>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000bf4:	f7ff fee8 	bl	80009c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	480d      	ldr	r0, [pc, #52]	@ (8000c30 <MX_USART2_UART_Init+0x90>)
 8000bfc:	f004 f8eb 	bl	8004dd6 <HAL_UARTEx_SetTxFifoThreshold>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000c06:	f7ff fedf 	bl	80009c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4808      	ldr	r0, [pc, #32]	@ (8000c30 <MX_USART2_UART_Init+0x90>)
 8000c0e:	f004 f920 	bl	8004e52 <HAL_UARTEx_SetRxFifoThreshold>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000c18:	f7ff fed6 	bl	80009c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c1c:	4804      	ldr	r0, [pc, #16]	@ (8000c30 <MX_USART2_UART_Init+0x90>)
 8000c1e:	f004 f8a2 	bl	8004d66 <HAL_UARTEx_DisableFifoMode>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000c28:	f7ff fece 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	200001a0 	.word	0x200001a0
 8000c34:	40004400 	.word	0x40004400

08000c38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b096      	sub	sp, #88	@ 0x58
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c50:	f107 030c 	add.w	r3, r7, #12
 8000c54:	2238      	movs	r2, #56	@ 0x38
 8000c56:	2100      	movs	r1, #0
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f004 f9a5 	bl	8004fa8 <memset>
  if(uartHandle->Instance==USART2)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a17      	ldr	r2, [pc, #92]	@ (8000cc0 <HAL_UART_MspInit+0x88>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d126      	bne.n	8000cb6 <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c6c:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8000c70:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c72:	f107 030c 	add.w	r3, r7, #12
 8000c76:	4618      	mov	r0, r3
 8000c78:	f002 fdc6 	bl	8003808 <HAL_RCCEx_PeriphCLKConfig>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c82:	f7ff fea1 	bl	80009c8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c86:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000c8a:	f7ff ff71 	bl	8000b70 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	2001      	movs	r0, #1
 8000c90:	f7ff ff56 	bl	8000b40 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8000c94:	230c      	movs	r3, #12
 8000c96:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ca4:	2307      	movs	r3, #7
 8000ca6:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000cac:	4619      	mov	r1, r3
 8000cae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cb2:	f001 fa05 	bl	80020c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000cb6:	bf00      	nop
 8000cb8:	3758      	adds	r7, #88	@ 0x58
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40004400 	.word	0x40004400

08000cc4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cc4:	480d      	ldr	r0, [pc, #52]	@ (8000cfc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cc6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cc8:	f7ff ff34 	bl	8000b34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ccc:	480c      	ldr	r0, [pc, #48]	@ (8000d00 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cce:	490d      	ldr	r1, [pc, #52]	@ (8000d04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cd0:	4a0d      	ldr	r2, [pc, #52]	@ (8000d08 <LoopForever+0xe>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd4:	e002      	b.n	8000cdc <LoopCopyDataInit>

08000cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cda:	3304      	adds	r3, #4

08000cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce0:	d3f9      	bcc.n	8000cd6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce2:	4a0a      	ldr	r2, [pc, #40]	@ (8000d0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ce4:	4c0a      	ldr	r4, [pc, #40]	@ (8000d10 <LoopForever+0x16>)
  movs r3, #0
 8000ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce8:	e001      	b.n	8000cee <LoopFillZerobss>

08000cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cec:	3204      	adds	r2, #4

08000cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf0:	d3fb      	bcc.n	8000cea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cf2:	f004 f967 	bl	8004fc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cf6:	f7ff fc7d 	bl	80005f4 <main>

08000cfa <LoopForever>:

LoopForever:
    b LoopForever
 8000cfa:	e7fe      	b.n	8000cfa <LoopForever>
  ldr   r0, =_estack
 8000cfc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000d00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d04:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d08:	08005a98 	.word	0x08005a98
  ldr r2, =_sbss
 8000d0c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d10:	20000388 	.word	0x20000388

08000d14 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d14:	e7fe      	b.n	8000d14 <ADC_IRQHandler>

08000d16 <LL_AHB2_GRP1_EnableClock>:
{
 8000d16:	b480      	push	{r7}
 8000d18:	b085      	sub	sp, #20
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d22:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d24:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4013      	ands	r3, r2
 8000d38:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
}
 8000d3c:	bf00      	nop
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bc80      	pop	{r7}
 8000d44:	4770      	bx	lr
	...

08000d48 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b088      	sub	sp, #32
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8000d52:	f107 030c 	add.w	r3, r7, #12
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]
 8000d60:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000d62:	2002      	movs	r0, #2
 8000d64:	f7ff ffd7 	bl	8000d16 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	4a12      	ldr	r2, [pc, #72]	@ (8000db4 <BSP_LED_Init+0x6c>)
 8000d6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d70:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000d72:	2301      	movs	r3, #1
 8000d74:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	4a0d      	ldr	r2, [pc, #52]	@ (8000db8 <BSP_LED_Init+0x70>)
 8000d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d86:	f107 020c 	add.w	r2, r7, #12
 8000d8a:	4611      	mov	r1, r2
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f001 f997 	bl	80020c0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	4a08      	ldr	r2, [pc, #32]	@ (8000db8 <BSP_LED_Init+0x70>)
 8000d96:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	4a05      	ldr	r2, [pc, #20]	@ (8000db4 <BSP_LED_Init+0x6c>)
 8000d9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000da2:	2200      	movs	r2, #0
 8000da4:	4619      	mov	r1, r3
 8000da6:	f001 faeb 	bl	8002380 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000daa:	2300      	movs	r3, #0
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3720      	adds	r7, #32
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	08005a24 	.word	0x08005a24
 8000db8:	20000004 	.word	0x20000004

08000dbc <BSP_LED_Toggle>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	4a07      	ldr	r2, [pc, #28]	@ (8000de8 <BSP_LED_Toggle+0x2c>)
 8000dca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	4906      	ldr	r1, [pc, #24]	@ (8000dec <BSP_LED_Toggle+0x30>)
 8000dd2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4610      	mov	r0, r2
 8000dda:	f001 fae8 	bl	80023ae <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8000dde:	2300      	movs	r3, #0
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000004 	.word	0x20000004
 8000dec:	08005a24 	.word	0x08005a24

08000df0 <LL_AHB2_GRP1_EnableClock>:
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000df8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000dfc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000dfe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e0c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4013      	ands	r3, r2
 8000e12:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e14:	68fb      	ldr	r3, [r7, #12]
}
 8000e16:	bf00      	nop
 8000e18:	3714      	adds	r7, #20
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr

08000e20 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8000e26:	1d3b      	adds	r3, r7, #4
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 8000e34:	2004      	movs	r0, #4
 8000e36:	f7ff ffdb 	bl	8000df0 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8000e3a:	2310      	movs	r3, #16
 8000e3c:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e46:	2303      	movs	r3, #3
 8000e48:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4812      	ldr	r0, [pc, #72]	@ (8000e98 <BSP_RADIO_Init+0x78>)
 8000e50:	f001 f936 	bl	80020c0 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8000e54:	2320      	movs	r3, #32
 8000e56:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8000e58:	1d3b      	adds	r3, r7, #4
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	480e      	ldr	r0, [pc, #56]	@ (8000e98 <BSP_RADIO_Init+0x78>)
 8000e5e:	f001 f92f 	bl	80020c0 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8000e62:	2308      	movs	r3, #8
 8000e64:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	4619      	mov	r1, r3
 8000e6a:	480b      	ldr	r0, [pc, #44]	@ (8000e98 <BSP_RADIO_Init+0x78>)
 8000e6c:	f001 f928 	bl	80020c0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8000e70:	2200      	movs	r2, #0
 8000e72:	2120      	movs	r1, #32
 8000e74:	4808      	ldr	r0, [pc, #32]	@ (8000e98 <BSP_RADIO_Init+0x78>)
 8000e76:	f001 fa83 	bl	8002380 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2110      	movs	r1, #16
 8000e7e:	4806      	ldr	r0, [pc, #24]	@ (8000e98 <BSP_RADIO_Init+0x78>)
 8000e80:	f001 fa7e 	bl	8002380 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8000e84:	2200      	movs	r2, #0
 8000e86:	2108      	movs	r1, #8
 8000e88:	4803      	ldr	r0, [pc, #12]	@ (8000e98 <BSP_RADIO_Init+0x78>)
 8000e8a:	f001 fa79 	bl	8002380 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000e8e:	2300      	movs	r3, #0
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3718      	adds	r7, #24
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	48000800 	.word	0x48000800

08000e9c <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	2b03      	cmp	r3, #3
 8000eaa:	d84b      	bhi.n	8000f44 <BSP_RADIO_ConfigRFSwitch+0xa8>
 8000eac:	a201      	add	r2, pc, #4	@ (adr r2, 8000eb4 <BSP_RADIO_ConfigRFSwitch+0x18>)
 8000eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eb2:	bf00      	nop
 8000eb4:	08000ec5 	.word	0x08000ec5
 8000eb8:	08000ee5 	.word	0x08000ee5
 8000ebc:	08000f05 	.word	0x08000f05
 8000ec0:	08000f25 	.word	0x08000f25
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2108      	movs	r1, #8
 8000ec8:	4821      	ldr	r0, [pc, #132]	@ (8000f50 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000eca:	f001 fa59 	bl	8002380 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2110      	movs	r1, #16
 8000ed2:	481f      	ldr	r0, [pc, #124]	@ (8000f50 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000ed4:	f001 fa54 	bl	8002380 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2120      	movs	r1, #32
 8000edc:	481c      	ldr	r0, [pc, #112]	@ (8000f50 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000ede:	f001 fa4f 	bl	8002380 <HAL_GPIO_WritePin>
      break;      
 8000ee2:	e030      	b.n	8000f46 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	2108      	movs	r1, #8
 8000ee8:	4819      	ldr	r0, [pc, #100]	@ (8000f50 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000eea:	f001 fa49 	bl	8002380 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8000eee:	2201      	movs	r2, #1
 8000ef0:	2110      	movs	r1, #16
 8000ef2:	4817      	ldr	r0, [pc, #92]	@ (8000f50 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000ef4:	f001 fa44 	bl	8002380 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2120      	movs	r1, #32
 8000efc:	4814      	ldr	r0, [pc, #80]	@ (8000f50 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000efe:	f001 fa3f 	bl	8002380 <HAL_GPIO_WritePin>
      break;
 8000f02:	e020      	b.n	8000f46 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8000f04:	2201      	movs	r2, #1
 8000f06:	2108      	movs	r1, #8
 8000f08:	4811      	ldr	r0, [pc, #68]	@ (8000f50 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000f0a:	f001 fa39 	bl	8002380 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8000f0e:	2201      	movs	r2, #1
 8000f10:	2110      	movs	r1, #16
 8000f12:	480f      	ldr	r0, [pc, #60]	@ (8000f50 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000f14:	f001 fa34 	bl	8002380 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8000f18:	2201      	movs	r2, #1
 8000f1a:	2120      	movs	r1, #32
 8000f1c:	480c      	ldr	r0, [pc, #48]	@ (8000f50 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000f1e:	f001 fa2f 	bl	8002380 <HAL_GPIO_WritePin>
      break;
 8000f22:	e010      	b.n	8000f46 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8000f24:	2201      	movs	r2, #1
 8000f26:	2108      	movs	r1, #8
 8000f28:	4809      	ldr	r0, [pc, #36]	@ (8000f50 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000f2a:	f001 fa29 	bl	8002380 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2110      	movs	r1, #16
 8000f32:	4807      	ldr	r0, [pc, #28]	@ (8000f50 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000f34:	f001 fa24 	bl	8002380 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8000f38:	2201      	movs	r2, #1
 8000f3a:	2120      	movs	r1, #32
 8000f3c:	4804      	ldr	r0, [pc, #16]	@ (8000f50 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000f3e:	f001 fa1f 	bl	8002380 <HAL_GPIO_WritePin>
      break;
 8000f42:	e000      	b.n	8000f46 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    default:
      break;    
 8000f44:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8000f46:	2300      	movs	r3, #0
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	48000800 	.word	0x48000800

08000f54 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_LP_HP;
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bc80      	pop	{r7}
 8000f60:	4770      	bx	lr

08000f62 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8000f66:	2301      	movs	r3, #1
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr

08000f70 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8000f74:	2301      	movs	r3, #1
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr

08000f7e <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b085      	sub	sp, #20
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	4603      	mov	r3, r0
 8000f86:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d102      	bne.n	8000f94 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8000f8e:	230f      	movs	r3, #15
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	e001      	b.n	8000f98 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8000f94:	2316      	movs	r3, #22
 8000f96:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8000f98:	68fb      	ldr	r3, [r7, #12]
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr

08000fa4 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 8000fa8:	f7ff ff3a 	bl	8000e20 <BSP_RADIO_Init>
 8000fac:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	4603      	mov	r3, r0
 8000fba:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff ff6c 	bl	8000e9c <BSP_RADIO_ConfigRFSwitch>
 8000fc4:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 8000fd2:	f7ff ffbf 	bl	8000f54 <BSP_RADIO_GetTxConfig>
 8000fd6:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 8000fe0:	f7ff ffbf 	bl	8000f62 <BSP_RADIO_IsTCXO>
 8000fe4:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 8000fee:	f7ff ffbf 	bl	8000f70 <BSP_RADIO_IsDCDC>
 8000ff2:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff ffba 	bl	8000f7e <BSP_RADIO_GetRFOMaxPowerConfig>
 800100a:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800100c:	4618      	mov	r0, r3
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d002      	beq.n	8001028 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8001022:	4a1d      	ldr	r2, [pc, #116]	@ (8001098 <SUBGRF_Init+0x84>)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8001028:	f7ff fd28 	bl	8000a7c <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800102c:	2002      	movs	r0, #2
 800102e:	f000 fe7f 	bl	8001d30 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8001032:	4b1a      	ldr	r3, [pc, #104]	@ (800109c <SUBGRF_Init+0x88>)
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8001038:	2000      	movs	r0, #0
 800103a:	f000 f895 	bl	8001168 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 800103e:	f7ff ffcd 	bl	8000fdc <RBI_IsTCXO>
 8001042:	4603      	mov	r3, r0
 8001044:	2b01      	cmp	r3, #1
 8001046:	d10e      	bne.n	8001066 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8001048:	2140      	movs	r1, #64	@ 0x40
 800104a:	2001      	movs	r0, #1
 800104c:	f000 f9b4 	bl	80013b8 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8001050:	2100      	movs	r1, #0
 8001052:	f640 1011 	movw	r0, #2321	@ 0x911
 8001056:	f000 fcbf 	bl	80019d8 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 800105a:	237f      	movs	r3, #127	@ 0x7f
 800105c:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 800105e:	7b38      	ldrb	r0, [r7, #12]
 8001060:	f000 f8be 	bl	80011e0 <SUBGRF_Calibrate>
 8001064:	e009      	b.n	800107a <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8001066:	2120      	movs	r1, #32
 8001068:	f640 1011 	movw	r0, #2321	@ 0x911
 800106c:	f000 fcb4 	bl	80019d8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8001070:	2120      	movs	r1, #32
 8001072:	f640 1012 	movw	r0, #2322	@ 0x912
 8001076:	f000 fcaf 	bl	80019d8 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800107a:	210e      	movs	r1, #14
 800107c:	f640 101f 	movw	r0, #2335	@ 0x91f
 8001080:	f000 fcaa 	bl	80019d8 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 8001084:	f7ff ff8e 	bl	8000fa4 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8001088:	4b05      	ldr	r3, [pc, #20]	@ (80010a0 <SUBGRF_Init+0x8c>)
 800108a:	2201      	movs	r2, #1
 800108c:	701a      	strb	r2, [r3, #0]
}
 800108e:	bf00      	nop
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000238 	.word	0x20000238
 800109c:	20000237 	.word	0x20000237
 80010a0:	20000234 	.word	0x20000234

080010a4 <SUBGRF_GetPayload>:
{
    SUBGRF_WriteBuffer( 0x00, payload, size );
}

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	4613      	mov	r3, r2
 80010b0:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 80010b6:	f107 0317 	add.w	r3, r7, #23
 80010ba:	4619      	mov	r1, r3
 80010bc:	68b8      	ldr	r0, [r7, #8]
 80010be:	f000 fc5f 	bl	8001980 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	79fa      	ldrb	r2, [r7, #7]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d201      	bcs.n	80010d0 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e007      	b.n	80010e0 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 80010d0:	7df8      	ldrb	r0, [r7, #23]
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	461a      	mov	r2, r3
 80010d8:	68f9      	ldr	r1, [r7, #12]
 80010da:	f000 fcc7 	bl	8001a6c <SUBGRF_ReadBuffer>

    return 0;
 80010de:	2300      	movs	r3, #0
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3718      	adds	r7, #24
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <SUBGRF_SetCrcSeed>:
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
    return 0;
}

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 80010f2:	88fb      	ldrh	r3, [r7, #6]
 80010f4:	0a1b      	lsrs	r3, r3, #8
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 80010fc:	88fb      	ldrh	r3, [r7, #6]
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8001102:	f000 f9dd 	bl	80014c0 <SUBGRF_GetPacketType>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d108      	bne.n	800111e <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	2202      	movs	r2, #2
 8001112:	4619      	mov	r1, r3
 8001114:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 8001118:	f000 fc86 	bl	8001a28 <SUBGRF_WriteRegisters>
            break;
 800111c:	e000      	b.n	8001120 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 800111e:	bf00      	nop
    }
}
 8001120:	bf00      	nop
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8001132:	88fb      	ldrh	r3, [r7, #6]
 8001134:	0a1b      	lsrs	r3, r3, #8
 8001136:	b29b      	uxth	r3, r3
 8001138:	b2db      	uxtb	r3, r3
 800113a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 800113c:	88fb      	ldrh	r3, [r7, #6]
 800113e:	b2db      	uxtb	r3, r3
 8001140:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8001142:	f000 f9bd 	bl	80014c0 <SUBGRF_GetPacketType>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d108      	bne.n	800115e <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800114c:	f107 030c 	add.w	r3, r7, #12
 8001150:	2202      	movs	r2, #2
 8001152:	4619      	mov	r1, r3
 8001154:	f240 60be 	movw	r0, #1726	@ 0x6be
 8001158:	f000 fc66 	bl	8001a28 <SUBGRF_WriteRegisters>
            break;
 800115c:	e000      	b.n	8001160 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 800115e:	bf00      	nop
    }
}
 8001160:	bf00      	nop
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <SUBGRF_SetStandby>:
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
    OperatingMode = MODE_SLEEP;
}

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8001172:	1dfb      	adds	r3, r7, #7
 8001174:	2201      	movs	r2, #1
 8001176:	4619      	mov	r1, r3
 8001178:	2080      	movs	r0, #128	@ 0x80
 800117a:	f000 fc99 	bl	8001ab0 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d103      	bne.n	800118c <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8001184:	4b05      	ldr	r3, [pc, #20]	@ (800119c <SUBGRF_SetStandby+0x34>)
 8001186:	2201      	movs	r2, #1
 8001188:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 800118a:	e002      	b.n	8001192 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 800118c:	4b03      	ldr	r3, [pc, #12]	@ (800119c <SUBGRF_SetStandby+0x34>)
 800118e:	2202      	movs	r2, #2
 8001190:	701a      	strb	r2, [r3, #0]
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000234 	.word	0x20000234

080011a0 <SUBGRF_SetRx>:
    buf[2] = ( uint8_t )( timeout & 0xFF );
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
}

void SUBGRF_SetRx( uint32_t timeout )
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	@ (80011dc <SUBGRF_SetRx+0x3c>)
 80011aa:	2205      	movs	r2, #5
 80011ac:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	0c1b      	lsrs	r3, r3, #16
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	0a1b      	lsrs	r3, r3, #8
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80011c4:	f107 030c 	add.w	r3, r7, #12
 80011c8:	2203      	movs	r2, #3
 80011ca:	4619      	mov	r1, r3
 80011cc:	2082      	movs	r0, #130	@ 0x82
 80011ce:	f000 fc6f 	bl	8001ab0 <SUBGRF_WriteCommand>
}
 80011d2:	bf00      	nop
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000234 	.word	0x20000234

080011e0 <SUBGRF_Calibrate>:
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
}

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80011e8:	793b      	ldrb	r3, [r7, #4]
 80011ea:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	019b      	lsls	r3, r3, #6
 80011f2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80011f4:	793b      	ldrb	r3, [r7, #4]
 80011f6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80011fe:	b25b      	sxtb	r3, r3
 8001200:	4313      	orrs	r3, r2
 8001202:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8001204:	793b      	ldrb	r3, [r7, #4]
 8001206:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800120a:	b2db      	uxtb	r3, r3
 800120c:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800120e:	b25b      	sxtb	r3, r3
 8001210:	4313      	orrs	r3, r2
 8001212:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8001214:	793b      	ldrb	r3, [r7, #4]
 8001216:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800121a:	b2db      	uxtb	r3, r3
 800121c:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800121e:	b25b      	sxtb	r3, r3
 8001220:	4313      	orrs	r3, r2
 8001222:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8001224:	793b      	ldrb	r3, [r7, #4]
 8001226:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800122a:	b2db      	uxtb	r3, r3
 800122c:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800122e:	b25b      	sxtb	r3, r3
 8001230:	4313      	orrs	r3, r2
 8001232:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8001234:	793b      	ldrb	r3, [r7, #4]
 8001236:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800123a:	b2db      	uxtb	r3, r3
 800123c:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800123e:	b25b      	sxtb	r3, r3
 8001240:	4313      	orrs	r3, r2
 8001242:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8001244:	793b      	ldrb	r3, [r7, #4]
 8001246:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800124a:	b2db      	uxtb	r3, r3
 800124c:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800124e:	4313      	orrs	r3, r2
 8001250:	b25b      	sxtb	r3, r3
 8001252:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8001254:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8001256:	f107 030f 	add.w	r3, r7, #15
 800125a:	2201      	movs	r2, #1
 800125c:	4619      	mov	r1, r3
 800125e:	2089      	movs	r0, #137	@ 0x89
 8001260:	f000 fc26 	bl	8001ab0 <SUBGRF_WriteCommand>
}
 8001264:	bf00      	nop
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4a1d      	ldr	r2, [pc, #116]	@ (80012ec <SUBGRF_CalibrateImage+0x80>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d904      	bls.n	8001286 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 800127c:	23e1      	movs	r3, #225	@ 0xe1
 800127e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8001280:	23e9      	movs	r3, #233	@ 0xe9
 8001282:	737b      	strb	r3, [r7, #13]
 8001284:	e027      	b.n	80012d6 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a19      	ldr	r2, [pc, #100]	@ (80012f0 <SUBGRF_CalibrateImage+0x84>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d904      	bls.n	8001298 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 800128e:	23d7      	movs	r3, #215	@ 0xd7
 8001290:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8001292:	23db      	movs	r3, #219	@ 0xdb
 8001294:	737b      	strb	r3, [r7, #13]
 8001296:	e01e      	b.n	80012d6 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4a16      	ldr	r2, [pc, #88]	@ (80012f4 <SUBGRF_CalibrateImage+0x88>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d904      	bls.n	80012aa <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 80012a0:	23c1      	movs	r3, #193	@ 0xc1
 80012a2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 80012a4:	23c5      	movs	r3, #197	@ 0xc5
 80012a6:	737b      	strb	r3, [r7, #13]
 80012a8:	e015      	b.n	80012d6 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a12      	ldr	r2, [pc, #72]	@ (80012f8 <SUBGRF_CalibrateImage+0x8c>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d904      	bls.n	80012bc <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 80012b2:	2375      	movs	r3, #117	@ 0x75
 80012b4:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 80012b6:	2381      	movs	r3, #129	@ 0x81
 80012b8:	737b      	strb	r3, [r7, #13]
 80012ba:	e00c      	b.n	80012d6 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4a0f      	ldr	r2, [pc, #60]	@ (80012fc <SUBGRF_CalibrateImage+0x90>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d904      	bls.n	80012ce <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 80012c4:	236b      	movs	r3, #107	@ 0x6b
 80012c6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 80012c8:	236f      	movs	r3, #111	@ 0x6f
 80012ca:	737b      	strb	r3, [r7, #13]
 80012cc:	e003      	b.n	80012d6 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 80012ce:	2329      	movs	r3, #41	@ 0x29
 80012d0:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 80012d2:	232b      	movs	r3, #43	@ 0x2b
 80012d4:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 80012d6:	f107 030c 	add.w	r3, r7, #12
 80012da:	2202      	movs	r2, #2
 80012dc:	4619      	mov	r1, r3
 80012de:	2098      	movs	r0, #152	@ 0x98
 80012e0:	f000 fbe6 	bl	8001ab0 <SUBGRF_WriteCommand>
}
 80012e4:	bf00      	nop
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	35a4e900 	.word	0x35a4e900
 80012f0:	32a9f880 	.word	0x32a9f880
 80012f4:	2de54480 	.word	0x2de54480
 80012f8:	1b6b0b00 	.word	0x1b6b0b00
 80012fc:	1954fc40 	.word	0x1954fc40

08001300 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8001300:	b590      	push	{r4, r7, lr}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	4604      	mov	r4, r0
 8001308:	4608      	mov	r0, r1
 800130a:	4611      	mov	r1, r2
 800130c:	461a      	mov	r2, r3
 800130e:	4623      	mov	r3, r4
 8001310:	71fb      	strb	r3, [r7, #7]
 8001312:	4603      	mov	r3, r0
 8001314:	71bb      	strb	r3, [r7, #6]
 8001316:	460b      	mov	r3, r1
 8001318:	717b      	strb	r3, [r7, #5]
 800131a:	4613      	mov	r3, r2
 800131c:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8001322:	79bb      	ldrb	r3, [r7, #6]
 8001324:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8001326:	797b      	ldrb	r3, [r7, #5]
 8001328:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 800132a:	793b      	ldrb	r3, [r7, #4]
 800132c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800132e:	f107 030c 	add.w	r3, r7, #12
 8001332:	2204      	movs	r2, #4
 8001334:	4619      	mov	r1, r3
 8001336:	2095      	movs	r0, #149	@ 0x95
 8001338:	f000 fbba 	bl	8001ab0 <SUBGRF_WriteCommand>
}
 800133c:	bf00      	nop
 800133e:	3714      	adds	r7, #20
 8001340:	46bd      	mov	sp, r7
 8001342:	bd90      	pop	{r4, r7, pc}

08001344 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8001344:	b590      	push	{r4, r7, lr}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	4604      	mov	r4, r0
 800134c:	4608      	mov	r0, r1
 800134e:	4611      	mov	r1, r2
 8001350:	461a      	mov	r2, r3
 8001352:	4623      	mov	r3, r4
 8001354:	80fb      	strh	r3, [r7, #6]
 8001356:	4603      	mov	r3, r0
 8001358:	80bb      	strh	r3, [r7, #4]
 800135a:	460b      	mov	r3, r1
 800135c:	807b      	strh	r3, [r7, #2]
 800135e:	4613      	mov	r3, r2
 8001360:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8001362:	88fb      	ldrh	r3, [r7, #6]
 8001364:	0a1b      	lsrs	r3, r3, #8
 8001366:	b29b      	uxth	r3, r3
 8001368:	b2db      	uxtb	r3, r3
 800136a:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800136c:	88fb      	ldrh	r3, [r7, #6]
 800136e:	b2db      	uxtb	r3, r3
 8001370:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8001372:	88bb      	ldrh	r3, [r7, #4]
 8001374:	0a1b      	lsrs	r3, r3, #8
 8001376:	b29b      	uxth	r3, r3
 8001378:	b2db      	uxtb	r3, r3
 800137a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800137c:	88bb      	ldrh	r3, [r7, #4]
 800137e:	b2db      	uxtb	r3, r3
 8001380:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8001382:	887b      	ldrh	r3, [r7, #2]
 8001384:	0a1b      	lsrs	r3, r3, #8
 8001386:	b29b      	uxth	r3, r3
 8001388:	b2db      	uxtb	r3, r3
 800138a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800138c:	887b      	ldrh	r3, [r7, #2]
 800138e:	b2db      	uxtb	r3, r3
 8001390:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8001392:	883b      	ldrh	r3, [r7, #0]
 8001394:	0a1b      	lsrs	r3, r3, #8
 8001396:	b29b      	uxth	r3, r3
 8001398:	b2db      	uxtb	r3, r3
 800139a:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800139c:	883b      	ldrh	r3, [r7, #0]
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 80013a2:	f107 0308 	add.w	r3, r7, #8
 80013a6:	2208      	movs	r2, #8
 80013a8:	4619      	mov	r1, r3
 80013aa:	2008      	movs	r0, #8
 80013ac:	f000 fb80 	bl	8001ab0 <SUBGRF_WriteCommand>
}
 80013b0:	bf00      	nop
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd90      	pop	{r4, r7, pc}

080013b8 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	6039      	str	r1, [r7, #0]
 80013c2:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	0c1b      	lsrs	r3, r3, #16
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	0a1b      	lsrs	r3, r3, #8
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 80013e4:	f107 030c 	add.w	r3, r7, #12
 80013e8:	2204      	movs	r2, #4
 80013ea:	4619      	mov	r1, r3
 80013ec:	2097      	movs	r0, #151	@ 0x97
 80013ee:	f000 fb5f 	bl	8001ab0 <SUBGRF_WriteCommand>
}
 80013f2:	bf00      	nop
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
	...

080013fc <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 80013fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001400:	b084      	sub	sp, #16
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 800140a:	4b1d      	ldr	r3, [pc, #116]	@ (8001480 <SUBGRF_SetRfFrequency+0x84>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	f083 0301 	eor.w	r3, r3, #1
 8001412:	b2db      	uxtb	r3, r3
 8001414:	2b00      	cmp	r3, #0
 8001416:	d005      	beq.n	8001424 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f7ff ff27 	bl	800126c <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800141e:	4b18      	ldr	r3, [pc, #96]	@ (8001480 <SUBGRF_SetRfFrequency+0x84>)
 8001420:	2201      	movs	r2, #1
 8001422:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	461c      	mov	r4, r3
 800142a:	4615      	mov	r5, r2
 800142c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8001430:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8001434:	4a13      	ldr	r2, [pc, #76]	@ (8001484 <SUBGRF_SetRfFrequency+0x88>)
 8001436:	f04f 0300 	mov.w	r3, #0
 800143a:	4640      	mov	r0, r8
 800143c:	4649      	mov	r1, r9
 800143e:	f7fe fef7 	bl	8000230 <__aeabi_uldivmod>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	4613      	mov	r3, r2
 8001448:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	0e1b      	lsrs	r3, r3, #24
 800144e:	b2db      	uxtb	r3, r3
 8001450:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	0c1b      	lsrs	r3, r3, #16
 8001456:	b2db      	uxtb	r3, r3
 8001458:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	0a1b      	lsrs	r3, r3, #8
 800145e:	b2db      	uxtb	r3, r3
 8001460:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	b2db      	uxtb	r3, r3
 8001466:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8001468:	f107 0308 	add.w	r3, r7, #8
 800146c:	2204      	movs	r2, #4
 800146e:	4619      	mov	r1, r3
 8001470:	2086      	movs	r0, #134	@ 0x86
 8001472:	f000 fb1d 	bl	8001ab0 <SUBGRF_WriteCommand>
}
 8001476:	bf00      	nop
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001480:	20000237 	.word	0x20000237
 8001484:	01e84800 	.word	0x01e84800

08001488 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8001492:	79fa      	ldrb	r2, [r7, #7]
 8001494:	4b09      	ldr	r3, [pc, #36]	@ (80014bc <SUBGRF_SetPacketType+0x34>)
 8001496:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d104      	bne.n	80014a8 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800149e:	2100      	movs	r1, #0
 80014a0:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 80014a4:	f000 fa98 	bl	80019d8 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 80014a8:	1dfb      	adds	r3, r7, #7
 80014aa:	2201      	movs	r2, #1
 80014ac:	4619      	mov	r1, r3
 80014ae:	208a      	movs	r0, #138	@ 0x8a
 80014b0:	f000 fafe 	bl	8001ab0 <SUBGRF_WriteCommand>
}
 80014b4:	bf00      	nop
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000235 	.word	0x20000235

080014c0 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
    return PacketType;
 80014c4:	4b02      	ldr	r3, [pc, #8]	@ (80014d0 <SUBGRF_GetPacketType+0x10>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr
 80014d0:	20000235 	.word	0x20000235

080014d4 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	71fb      	strb	r3, [r7, #7]
 80014de:	460b      	mov	r3, r1
 80014e0:	71bb      	strb	r3, [r7, #6]
 80014e2:	4613      	mov	r3, r2
 80014e4:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d149      	bne.n	8001580 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 80014ec:	2000      	movs	r0, #0
 80014ee:	f7ff fd83 	bl	8000ff8 <RBI_GetRFOMaxPowerConfig>
 80014f2:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 80014f4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80014f8:	68fa      	ldr	r2, [r7, #12]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	da01      	bge.n	8001502 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2b0e      	cmp	r3, #14
 8001506:	d10e      	bne.n	8001526 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8001508:	2301      	movs	r3, #1
 800150a:	2201      	movs	r2, #1
 800150c:	2100      	movs	r1, #0
 800150e:	2004      	movs	r0, #4
 8001510:	f7ff fef6 	bl	8001300 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8001514:	79ba      	ldrb	r2, [r7, #6]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	b2db      	uxtb	r3, r3
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	b2db      	uxtb	r3, r3
 800151e:	330e      	adds	r3, #14
 8001520:	b2db      	uxtb	r3, r3
 8001522:	71bb      	strb	r3, [r7, #6]
 8001524:	e01f      	b.n	8001566 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2b0a      	cmp	r3, #10
 800152a:	d10e      	bne.n	800154a <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 800152c:	2301      	movs	r3, #1
 800152e:	2201      	movs	r2, #1
 8001530:	2100      	movs	r1, #0
 8001532:	2001      	movs	r0, #1
 8001534:	f7ff fee4 	bl	8001300 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8001538:	79ba      	ldrb	r2, [r7, #6]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	b2db      	uxtb	r3, r3
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	b2db      	uxtb	r3, r3
 8001542:	330d      	adds	r3, #13
 8001544:	b2db      	uxtb	r3, r3
 8001546:	71bb      	strb	r3, [r7, #6]
 8001548:	e00d      	b.n	8001566 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 800154a:	2301      	movs	r3, #1
 800154c:	2201      	movs	r2, #1
 800154e:	2100      	movs	r1, #0
 8001550:	2007      	movs	r0, #7
 8001552:	f7ff fed5 	bl	8001300 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8001556:	79ba      	ldrb	r2, [r7, #6]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	b2db      	uxtb	r3, r3
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	b2db      	uxtb	r3, r3
 8001560:	330e      	adds	r3, #14
 8001562:	b2db      	uxtb	r3, r3
 8001564:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 8001566:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800156a:	f113 0f11 	cmn.w	r3, #17
 800156e:	da01      	bge.n	8001574 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 8001570:	23ef      	movs	r3, #239	@ 0xef
 8001572:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8001574:	2118      	movs	r1, #24
 8001576:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 800157a:	f000 fa2d 	bl	80019d8 <SUBGRF_WriteRegister>
 800157e:	e067      	b.n	8001650 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8001580:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8001584:	f000 fa3c 	bl	8001a00 <SUBGRF_ReadRegister>
 8001588:	4603      	mov	r3, r0
 800158a:	f043 031e 	orr.w	r3, r3, #30
 800158e:	b2db      	uxtb	r3, r3
 8001590:	4619      	mov	r1, r3
 8001592:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8001596:	f000 fa1f 	bl	80019d8 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 800159a:	2001      	movs	r0, #1
 800159c:	f7ff fd2c 	bl	8000ff8 <RBI_GetRFOMaxPowerConfig>
 80015a0:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 80015a2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	da01      	bge.n	80015b0 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2b14      	cmp	r3, #20
 80015b4:	d10e      	bne.n	80015d4 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 80015b6:	2301      	movs	r3, #1
 80015b8:	2200      	movs	r2, #0
 80015ba:	2105      	movs	r1, #5
 80015bc:	2003      	movs	r0, #3
 80015be:	f7ff fe9f 	bl	8001300 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80015c2:	79ba      	ldrb	r2, [r7, #6]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	3316      	adds	r3, #22
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	71bb      	strb	r3, [r7, #6]
 80015d2:	e031      	b.n	8001638 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2b11      	cmp	r3, #17
 80015d8:	d10e      	bne.n	80015f8 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 80015da:	2301      	movs	r3, #1
 80015dc:	2200      	movs	r2, #0
 80015de:	2103      	movs	r1, #3
 80015e0:	2002      	movs	r0, #2
 80015e2:	f7ff fe8d 	bl	8001300 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80015e6:	79ba      	ldrb	r2, [r7, #6]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	3316      	adds	r3, #22
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	71bb      	strb	r3, [r7, #6]
 80015f6:	e01f      	b.n	8001638 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2b0e      	cmp	r3, #14
 80015fc:	d10e      	bne.n	800161c <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 80015fe:	2301      	movs	r3, #1
 8001600:	2200      	movs	r2, #0
 8001602:	2102      	movs	r1, #2
 8001604:	2002      	movs	r0, #2
 8001606:	f7ff fe7b 	bl	8001300 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800160a:	79ba      	ldrb	r2, [r7, #6]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	b2db      	uxtb	r3, r3
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	b2db      	uxtb	r3, r3
 8001614:	330e      	adds	r3, #14
 8001616:	b2db      	uxtb	r3, r3
 8001618:	71bb      	strb	r3, [r7, #6]
 800161a:	e00d      	b.n	8001638 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 800161c:	2301      	movs	r3, #1
 800161e:	2200      	movs	r2, #0
 8001620:	2107      	movs	r1, #7
 8001622:	2004      	movs	r0, #4
 8001624:	f7ff fe6c 	bl	8001300 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8001628:	79ba      	ldrb	r2, [r7, #6]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	b2db      	uxtb	r3, r3
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	b2db      	uxtb	r3, r3
 8001632:	3316      	adds	r3, #22
 8001634:	b2db      	uxtb	r3, r3
 8001636:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 8001638:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800163c:	f113 0f09 	cmn.w	r3, #9
 8001640:	da01      	bge.n	8001646 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 8001642:	23f7      	movs	r3, #247	@ 0xf7
 8001644:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8001646:	2138      	movs	r1, #56	@ 0x38
 8001648:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 800164c:	f000 f9c4 	bl	80019d8 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8001650:	79bb      	ldrb	r3, [r7, #6]
 8001652:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8001654:	797b      	ldrb	r3, [r7, #5]
 8001656:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8001658:	f107 0308 	add.w	r3, r7, #8
 800165c:	2202      	movs	r2, #2
 800165e:	4619      	mov	r1, r3
 8001660:	208e      	movs	r0, #142	@ 0x8e
 8001662:	f000 fa25 	bl	8001ab0 <SUBGRF_WriteCommand>
}
 8001666:	bf00      	nop
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8001670:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001674:	b086      	sub	sp, #24
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800167e:	4a61      	ldr	r2, [pc, #388]	@ (8001804 <SUBGRF_SetModulationParams+0x194>)
 8001680:	f107 0308 	add.w	r3, r7, #8
 8001684:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001688:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	781a      	ldrb	r2, [r3, #0]
 8001690:	4b5d      	ldr	r3, [pc, #372]	@ (8001808 <SUBGRF_SetModulationParams+0x198>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	429a      	cmp	r2, r3
 8001696:	d004      	beq.n	80016a2 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fef3 	bl	8001488 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b03      	cmp	r3, #3
 80016a8:	f200 80a5 	bhi.w	80017f6 <SUBGRF_SetModulationParams+0x186>
 80016ac:	a201      	add	r2, pc, #4	@ (adr r2, 80016b4 <SUBGRF_SetModulationParams+0x44>)
 80016ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016b2:	bf00      	nop
 80016b4:	080016c5 	.word	0x080016c5
 80016b8:	08001785 	.word	0x08001785
 80016bc:	08001747 	.word	0x08001747
 80016c0:	080017b3 	.word	0x080017b3
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 80016c4:	2308      	movs	r3, #8
 80016c6:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	4a4f      	ldr	r2, [pc, #316]	@ (800180c <SUBGRF_SetModulationParams+0x19c>)
 80016ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d2:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	0c1b      	lsrs	r3, r3, #16
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	0a1b      	lsrs	r3, r3, #8
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	7b1b      	ldrb	r3, [r3, #12]
 80016ee:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	7b5b      	ldrb	r3, [r3, #13]
 80016f4:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	2200      	movs	r2, #0
 80016fc:	461c      	mov	r4, r3
 80016fe:	4615      	mov	r5, r2
 8001700:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8001704:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8001708:	4a41      	ldr	r2, [pc, #260]	@ (8001810 <SUBGRF_SetModulationParams+0x1a0>)
 800170a:	f04f 0300 	mov.w	r3, #0
 800170e:	4640      	mov	r0, r8
 8001710:	4649      	mov	r1, r9
 8001712:	f7fe fd8d 	bl	8000230 <__aeabi_uldivmod>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	4613      	mov	r3, r2
 800171c:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	0c1b      	lsrs	r3, r3, #16
 8001722:	b2db      	uxtb	r3, r3
 8001724:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	0a1b      	lsrs	r3, r3, #8
 800172a:	b2db      	uxtb	r3, r3
 800172c:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	b2db      	uxtb	r3, r3
 8001732:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8001734:	7cfb      	ldrb	r3, [r7, #19]
 8001736:	b29a      	uxth	r2, r3
 8001738:	f107 0308 	add.w	r3, r7, #8
 800173c:	4619      	mov	r1, r3
 800173e:	208b      	movs	r0, #139	@ 0x8b
 8001740:	f000 f9b6 	bl	8001ab0 <SUBGRF_WriteCommand>
        break;
 8001744:	e058      	b.n	80017f8 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 8001746:	2304      	movs	r3, #4
 8001748:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	4a2f      	ldr	r2, [pc, #188]	@ (800180c <SUBGRF_SetModulationParams+0x19c>)
 8001750:	fbb2 f3f3 	udiv	r3, r2, r3
 8001754:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	0c1b      	lsrs	r3, r3, #16
 800175a:	b2db      	uxtb	r3, r3
 800175c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	0a1b      	lsrs	r3, r3, #8
 8001762:	b2db      	uxtb	r3, r3
 8001764:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	b2db      	uxtb	r3, r3
 800176a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	7d1b      	ldrb	r3, [r3, #20]
 8001770:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8001772:	7cfb      	ldrb	r3, [r7, #19]
 8001774:	b29a      	uxth	r2, r3
 8001776:	f107 0308 	add.w	r3, r7, #8
 800177a:	4619      	mov	r1, r3
 800177c:	208b      	movs	r0, #139	@ 0x8b
 800177e:	f000 f997 	bl	8001ab0 <SUBGRF_WriteCommand>
        break;
 8001782:	e039      	b.n	80017f8 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 8001784:	2304      	movs	r3, #4
 8001786:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	7e1b      	ldrb	r3, [r3, #24]
 800178c:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	7e5b      	ldrb	r3, [r3, #25]
 8001792:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	7e9b      	ldrb	r3, [r3, #26]
 8001798:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	7edb      	ldrb	r3, [r3, #27]
 800179e:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80017a0:	7cfb      	ldrb	r3, [r7, #19]
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	f107 0308 	add.w	r3, r7, #8
 80017a8:	4619      	mov	r1, r3
 80017aa:	208b      	movs	r0, #139	@ 0x8b
 80017ac:	f000 f980 	bl	8001ab0 <SUBGRF_WriteCommand>

        break;
 80017b0:	e022      	b.n	80017f8 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 80017b2:	2305      	movs	r3, #5
 80017b4:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	4a14      	ldr	r2, [pc, #80]	@ (800180c <SUBGRF_SetModulationParams+0x19c>)
 80017bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c0:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	0c1b      	lsrs	r3, r3, #16
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	0a1b      	lsrs	r3, r3, #8
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	7b1b      	ldrb	r3, [r3, #12]
 80017dc:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	7b5b      	ldrb	r3, [r3, #13]
 80017e2:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80017e4:	7cfb      	ldrb	r3, [r7, #19]
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	f107 0308 	add.w	r3, r7, #8
 80017ec:	4619      	mov	r1, r3
 80017ee:	208b      	movs	r0, #139	@ 0x8b
 80017f0:	f000 f95e 	bl	8001ab0 <SUBGRF_WriteCommand>
        break;
 80017f4:	e000      	b.n	80017f8 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 80017f6:	bf00      	nop
    }
}
 80017f8:	bf00      	nop
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001802:	bf00      	nop
 8001804:	08005954 	.word	0x08005954
 8001808:	20000235 	.word	0x20000235
 800180c:	3d090000 	.word	0x3d090000
 8001810:	01e84800 	.word	0x01e84800

08001814 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8001820:	4a48      	ldr	r2, [pc, #288]	@ (8001944 <SUBGRF_SetPacketParams+0x130>)
 8001822:	f107 030c 	add.w	r3, r7, #12
 8001826:	ca07      	ldmia	r2, {r0, r1, r2}
 8001828:	c303      	stmia	r3!, {r0, r1}
 800182a:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	781a      	ldrb	r2, [r3, #0]
 8001830:	4b45      	ldr	r3, [pc, #276]	@ (8001948 <SUBGRF_SetPacketParams+0x134>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	429a      	cmp	r2, r3
 8001836:	d004      	beq.n	8001842 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff fe23 	bl	8001488 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b03      	cmp	r3, #3
 8001848:	d878      	bhi.n	800193c <SUBGRF_SetPacketParams+0x128>
 800184a:	a201      	add	r2, pc, #4	@ (adr r2, 8001850 <SUBGRF_SetPacketParams+0x3c>)
 800184c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001850:	08001861 	.word	0x08001861
 8001854:	080018f1 	.word	0x080018f1
 8001858:	080018e5 	.word	0x080018e5
 800185c:	08001861 	.word	0x08001861
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	7a5b      	ldrb	r3, [r3, #9]
 8001864:	2bf1      	cmp	r3, #241	@ 0xf1
 8001866:	d10a      	bne.n	800187e <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8001868:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800186c:	f7ff fc3c 	bl	80010e8 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8001870:	f248 0005 	movw	r0, #32773	@ 0x8005
 8001874:	f7ff fc58 	bl	8001128 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8001878:	2302      	movs	r3, #2
 800187a:	75bb      	strb	r3, [r7, #22]
 800187c:	e011      	b.n	80018a2 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	7a5b      	ldrb	r3, [r3, #9]
 8001882:	2bf2      	cmp	r3, #242	@ 0xf2
 8001884:	d10a      	bne.n	800189c <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8001886:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 800188a:	f7ff fc2d 	bl	80010e8 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800188e:	f241 0021 	movw	r0, #4129	@ 0x1021
 8001892:	f7ff fc49 	bl	8001128 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8001896:	2306      	movs	r3, #6
 8001898:	75bb      	strb	r3, [r7, #22]
 800189a:	e002      	b.n	80018a2 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	7a5b      	ldrb	r3, [r3, #9]
 80018a0:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 80018a2:	2309      	movs	r3, #9
 80018a4:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	885b      	ldrh	r3, [r3, #2]
 80018aa:	0a1b      	lsrs	r3, r3, #8
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	885b      	ldrh	r3, [r3, #2]
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	791b      	ldrb	r3, [r3, #4]
 80018be:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	795b      	ldrb	r3, [r3, #5]
 80018c4:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	799b      	ldrb	r3, [r3, #6]
 80018ca:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	79db      	ldrb	r3, [r3, #7]
 80018d0:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	7a1b      	ldrb	r3, [r3, #8]
 80018d6:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 80018d8:	7dbb      	ldrb	r3, [r7, #22]
 80018da:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	7a9b      	ldrb	r3, [r3, #10]
 80018e0:	753b      	strb	r3, [r7, #20]
        break;
 80018e2:	e022      	b.n	800192a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 80018e4:	2301      	movs	r3, #1
 80018e6:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	7b1b      	ldrb	r3, [r3, #12]
 80018ec:	733b      	strb	r3, [r7, #12]
        break;
 80018ee:	e01c      	b.n	800192a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 80018f0:	2306      	movs	r3, #6
 80018f2:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	89db      	ldrh	r3, [r3, #14]
 80018f8:	0a1b      	lsrs	r3, r3, #8
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	89db      	ldrh	r3, [r3, #14]
 8001904:	b2db      	uxtb	r3, r3
 8001906:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	7c1a      	ldrb	r2, [r3, #16]
 800190c:	4b0f      	ldr	r3, [pc, #60]	@ (800194c <SUBGRF_SetPacketParams+0x138>)
 800190e:	4611      	mov	r1, r2
 8001910:	7019      	strb	r1, [r3, #0]
 8001912:	4613      	mov	r3, r2
 8001914:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	7c5b      	ldrb	r3, [r3, #17]
 800191a:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	7c9b      	ldrb	r3, [r3, #18]
 8001920:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	7cdb      	ldrb	r3, [r3, #19]
 8001926:	747b      	strb	r3, [r7, #17]
        break;
 8001928:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800192a:	7dfb      	ldrb	r3, [r7, #23]
 800192c:	b29a      	uxth	r2, r3
 800192e:	f107 030c 	add.w	r3, r7, #12
 8001932:	4619      	mov	r1, r3
 8001934:	208c      	movs	r0, #140	@ 0x8c
 8001936:	f000 f8bb 	bl	8001ab0 <SUBGRF_WriteCommand>
 800193a:	e000      	b.n	800193e <SUBGRF_SetPacketParams+0x12a>
        return;
 800193c:	bf00      	nop
}
 800193e:	3718      	adds	r7, #24
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	0800595c 	.word	0x0800595c
 8001948:	20000235 	.word	0x20000235
 800194c:	20000236 	.word	0x20000236

08001950 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	460a      	mov	r2, r1
 800195a:	71fb      	strb	r3, [r7, #7]
 800195c:	4613      	mov	r3, r2
 800195e:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8001964:	79bb      	ldrb	r3, [r7, #6]
 8001966:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8001968:	f107 030c 	add.w	r3, r7, #12
 800196c:	2202      	movs	r2, #2
 800196e:	4619      	mov	r1, r3
 8001970:	208f      	movs	r0, #143	@ 0x8f
 8001972:	f000 f89d 	bl	8001ab0 <SUBGRF_WriteCommand>
}
 8001976:	bf00      	nop
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
	...

08001980 <SUBGRF_GetRxBufferStatus>:
    rssi = -buf[0] >> 1;
    return rssi;
}

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800198a:	f107 030c 	add.w	r3, r7, #12
 800198e:	2202      	movs	r2, #2
 8001990:	4619      	mov	r1, r3
 8001992:	2013      	movs	r0, #19
 8001994:	f000 f8ae 	bl	8001af4 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8001998:	f7ff fd92 	bl	80014c0 <SUBGRF_GetPacketType>
 800199c:	4603      	mov	r3, r0
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d10d      	bne.n	80019be <SUBGRF_GetRxBufferStatus+0x3e>
 80019a2:	4b0c      	ldr	r3, [pc, #48]	@ (80019d4 <SUBGRF_GetRxBufferStatus+0x54>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d108      	bne.n	80019be <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 80019ac:	f240 7002 	movw	r0, #1794	@ 0x702
 80019b0:	f000 f826 	bl	8001a00 <SUBGRF_ReadRegister>
 80019b4:	4603      	mov	r3, r0
 80019b6:	461a      	mov	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	701a      	strb	r2, [r3, #0]
 80019bc:	e002      	b.n	80019c4 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 80019be:	7b3a      	ldrb	r2, [r7, #12]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 80019c4:	7b7a      	ldrb	r2, [r7, #13]
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	701a      	strb	r2, [r3, #0]
}
 80019ca:	bf00      	nop
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20000236 	.word	0x20000236

080019d8 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	460a      	mov	r2, r1
 80019e2:	80fb      	strh	r3, [r7, #6]
 80019e4:	4613      	mov	r3, r2
 80019e6:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 80019e8:	1d7a      	adds	r2, r7, #5
 80019ea:	88f9      	ldrh	r1, [r7, #6]
 80019ec:	2301      	movs	r3, #1
 80019ee:	4803      	ldr	r0, [pc, #12]	@ (80019fc <SUBGRF_WriteRegister+0x24>)
 80019f0:	f002 f922 	bl	8003c38 <HAL_SUBGHZ_WriteRegisters>
}
 80019f4:	bf00      	nop
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20000190 	.word	0x20000190

08001a00 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8001a0a:	f107 020f 	add.w	r2, r7, #15
 8001a0e:	88f9      	ldrh	r1, [r7, #6]
 8001a10:	2301      	movs	r3, #1
 8001a12:	4804      	ldr	r0, [pc, #16]	@ (8001a24 <SUBGRF_ReadRegister+0x24>)
 8001a14:	f002 f96f 	bl	8003cf6 <HAL_SUBGHZ_ReadRegisters>
    return data;
 8001a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000190 	.word	0x20000190

08001a28 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	6039      	str	r1, [r7, #0]
 8001a32:	80fb      	strh	r3, [r7, #6]
 8001a34:	4613      	mov	r3, r2
 8001a36:	80bb      	strh	r3, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a38:	f3ef 8310 	mrs	r3, PRIMASK
 8001a3c:	60fb      	str	r3, [r7, #12]
  return(result);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8001a40:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a42:	b672      	cpsid	i
}
 8001a44:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8001a46:	88bb      	ldrh	r3, [r7, #4]
 8001a48:	88f9      	ldrh	r1, [r7, #6]
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	4806      	ldr	r0, [pc, #24]	@ (8001a68 <SUBGRF_WriteRegisters+0x40>)
 8001a4e:	f002 f8f3 	bl	8003c38 <HAL_SUBGHZ_WriteRegisters>
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	f383 8810 	msr	PRIMASK, r3
}
 8001a5c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8001a5e:	bf00      	nop
 8001a60:	3718      	adds	r7, #24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20000190 	.word	0x20000190

08001a6c <SUBGRF_ReadBuffer>:
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
    CRITICAL_SECTION_END();
}

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	6039      	str	r1, [r7, #0]
 8001a76:	71fb      	strb	r3, [r7, #7]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a7c:	f3ef 8310 	mrs	r3, PRIMASK
 8001a80:	60fb      	str	r3, [r7, #12]
  return(result);
 8001a82:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8001a84:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a86:	b672      	cpsid	i
}
 8001a88:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8001a8a:	79bb      	ldrb	r3, [r7, #6]
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	79f9      	ldrb	r1, [r7, #7]
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	4806      	ldr	r0, [pc, #24]	@ (8001aac <SUBGRF_ReadBuffer+0x40>)
 8001a94:	f002 fa43 	bl	8003f1e <HAL_SUBGHZ_ReadBuffer>
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	f383 8810 	msr	PRIMASK, r3
}
 8001aa2:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8001aa4:	bf00      	nop
 8001aa6:	3718      	adds	r7, #24
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	20000190 	.word	0x20000190

08001ab0 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	6039      	str	r1, [r7, #0]
 8001aba:	71fb      	strb	r3, [r7, #7]
 8001abc:	4613      	mov	r3, r2
 8001abe:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ac0:	f3ef 8310 	mrs	r3, PRIMASK
 8001ac4:	60fb      	str	r3, [r7, #12]
  return(result);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8001ac8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001aca:	b672      	cpsid	i
}
 8001acc:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8001ace:	88bb      	ldrh	r3, [r7, #4]
 8001ad0:	79f9      	ldrb	r1, [r7, #7]
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	4806      	ldr	r0, [pc, #24]	@ (8001af0 <SUBGRF_WriteCommand+0x40>)
 8001ad6:	f002 f96f 	bl	8003db8 <HAL_SUBGHZ_ExecSetCmd>
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	f383 8810 	msr	PRIMASK, r3
}
 8001ae4:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8001ae6:	bf00      	nop
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000190 	.word	0x20000190

08001af4 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	6039      	str	r1, [r7, #0]
 8001afe:	71fb      	strb	r3, [r7, #7]
 8001b00:	4613      	mov	r3, r2
 8001b02:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b04:	f3ef 8310 	mrs	r3, PRIMASK
 8001b08:	60fb      	str	r3, [r7, #12]
  return(result);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8001b0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b0e:	b672      	cpsid	i
}
 8001b10:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8001b12:	88bb      	ldrh	r3, [r7, #4]
 8001b14:	79f9      	ldrb	r1, [r7, #7]
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	4806      	ldr	r0, [pc, #24]	@ (8001b34 <SUBGRF_ReadCommand+0x40>)
 8001b1a:	f002 f9ac 	bl	8003e76 <HAL_SUBGHZ_ExecGetCmd>
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	f383 8810 	msr	PRIMASK, r3
}
 8001b28:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8001b2a:	bf00      	nop
 8001b2c:	3718      	adds	r7, #24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20000190 	.word	0x20000190

08001b38 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	460a      	mov	r2, r1
 8001b42:	71fb      	strb	r3, [r7, #7]
 8001b44:	4613      	mov	r3, r2
 8001b46:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8001b4c:	79bb      	ldrb	r3, [r7, #6]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d10d      	bne.n	8001b6e <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8001b52:	79fb      	ldrb	r3, [r7, #7]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d104      	bne.n	8001b62 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8001b5c:	2004      	movs	r0, #4
 8001b5e:	f000 f8e7 	bl	8001d30 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d107      	bne.n	8001b78 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	73fb      	strb	r3, [r7, #15]
 8001b6c:	e004      	b.n	8001b78 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8001b6e:	79bb      	ldrb	r3, [r7, #6]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d101      	bne.n	8001b78 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8001b74:	2301      	movs	r3, #1
 8001b76:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8001b78:	7bfb      	ldrb	r3, [r7, #15]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff fa19 	bl	8000fb2 <RBI_ConfigRFSwitch>
}
 8001b80:	bf00      	nop
 8001b82:	3710      	adds	r7, #16
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8001b92:	2301      	movs	r3, #1
 8001b94:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8001b96:	f7ff fa1a 	bl	8000fce <RBI_GetTxConfig>
 8001b9a:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d016      	beq.n	8001bd0 <SUBGRF_SetRfTxPower+0x48>
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	dc16      	bgt.n	8001bd6 <SUBGRF_SetRfTxPower+0x4e>
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <SUBGRF_SetRfTxPower+0x2e>
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d00a      	beq.n	8001bca <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8001bb4:	e00f      	b.n	8001bd6 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8001bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bba:	2b0f      	cmp	r3, #15
 8001bbc:	dd02      	ble.n	8001bc4 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	73fb      	strb	r3, [r7, #15]
            break;
 8001bc2:	e009      	b.n	8001bd8 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	73fb      	strb	r3, [r7, #15]
            break;
 8001bc8:	e006      	b.n	8001bd8 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	73fb      	strb	r3, [r7, #15]
            break;
 8001bce:	e003      	b.n	8001bd8 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	73fb      	strb	r3, [r7, #15]
            break;
 8001bd4:	e000      	b.n	8001bd8 <SUBGRF_SetRfTxPower+0x50>
            break;
 8001bd6:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8001bd8:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
 8001bde:	2202      	movs	r2, #2
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff fc77 	bl	80014d4 <SUBGRF_SetTxParams>

    return paSelect;
 8001be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <HAL_SUBGHZ_TxCpltCallback>:
    return RF_WAKEUP_TIME;
}

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8001bf8:	4b03      	ldr	r3, [pc, #12]	@ (8001c08 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2001      	movs	r0, #1
 8001bfe:	4798      	blx	r3
}
 8001c00:	bf00      	nop
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20000238 	.word	0x20000238

08001c0c <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8001c14:	4b03      	ldr	r3, [pc, #12]	@ (8001c24 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2002      	movs	r0, #2
 8001c1a:	4798      	blx	r3
}
 8001c1c:	bf00      	nop
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	20000238 	.word	0x20000238

08001c28 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8001c30:	4b03      	ldr	r3, [pc, #12]	@ (8001c40 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2040      	movs	r0, #64	@ 0x40
 8001c36:	4798      	blx	r3
}
 8001c38:	bf00      	nop
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	20000238 	.word	0x20000238

08001c44 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8001c50:	78fb      	ldrb	r3, [r7, #3]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d002      	beq.n	8001c5c <HAL_SUBGHZ_CADStatusCallback+0x18>
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d005      	beq.n	8001c66 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8001c5a:	e00a      	b.n	8001c72 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8001c5c:	4b07      	ldr	r3, [pc, #28]	@ (8001c7c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2080      	movs	r0, #128	@ 0x80
 8001c62:	4798      	blx	r3
            break;
 8001c64:	e005      	b.n	8001c72 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8001c66:	4b05      	ldr	r3, [pc, #20]	@ (8001c7c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001c6e:	4798      	blx	r3
            break;
 8001c70:	bf00      	nop
    }
}
 8001c72:	bf00      	nop
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000238 	.word	0x20000238

08001c80 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8001c88:	4b04      	ldr	r3, [pc, #16]	@ (8001c9c <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001c90:	4798      	blx	r3
}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20000238 	.word	0x20000238

08001ca0 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8001ca8:	4b03      	ldr	r3, [pc, #12]	@ (8001cb8 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2020      	movs	r0, #32
 8001cae:	4798      	blx	r3
}
 8001cb0:	bf00      	nop
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20000238 	.word	0x20000238

08001cbc <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8001cc4:	4b03      	ldr	r3, [pc, #12]	@ (8001cd4 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2004      	movs	r0, #4
 8001cca:	4798      	blx	r3
}
 8001ccc:	bf00      	nop
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	20000238 	.word	0x20000238

08001cd8 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8001ce0:	4b03      	ldr	r3, [pc, #12]	@ (8001cf0 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2008      	movs	r0, #8
 8001ce6:	4798      	blx	r3
}
 8001ce8:	bf00      	nop
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	20000238 	.word	0x20000238

08001cf4 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8001cfc:	4b03      	ldr	r3, [pc, #12]	@ (8001d0c <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2010      	movs	r0, #16
 8001d02:	4798      	blx	r3
}
 8001d04:	bf00      	nop
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	20000238 	.word	0x20000238

08001d10 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 8001d18:	4b04      	ldr	r3, [pc, #16]	@ (8001d2c <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001d20:	4798      	blx	r3
}
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20000238 	.word	0x20000238

08001d30 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8001d3a:	f7ff f956 	bl	8000fea <RBI_IsDCDC>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d112      	bne.n	8001d6a <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8001d44:	f640 1023 	movw	r0, #2339	@ 0x923
 8001d48:	f7ff fe5a 	bl	8001a00 <SUBGRF_ReadRegister>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8001d50:	7bfb      	ldrb	r3, [r7, #15]
 8001d52:	f023 0306 	bic.w	r3, r3, #6
 8001d56:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8001d58:	7bfa      	ldrb	r2, [r7, #15]
 8001d5a:	79fb      	ldrb	r3, [r7, #7]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	4619      	mov	r1, r3
 8001d62:	f640 1023 	movw	r0, #2339	@ 0x923
 8001d66:	f7ff fe37 	bl	80019d8 <SUBGRF_WriteRegister>
  }
}
 8001d6a:	bf00      	nop
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
	...

08001d74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d7e:	2003      	movs	r0, #3
 8001d80:	f000 f95e 	bl	8002040 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001d84:	f001 fb62 	bl	800344c <HAL_RCC_GetHCLKFreq>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	4a09      	ldr	r2, [pc, #36]	@ (8001db0 <HAL_Init+0x3c>)
 8001d8c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d8e:	2000      	movs	r0, #0
 8001d90:	f000 f810 	bl	8001db4 <HAL_InitTick>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d002      	beq.n	8001da0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	71fb      	strb	r3, [r7, #7]
 8001d9e:	e001      	b.n	8001da4 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001da0:	f7fe fe18 	bl	80009d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001da4:	79fb      	ldrb	r3, [r7, #7]
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20000000 	.word	0x20000000

08001db4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001dc0:	4b17      	ldr	r3, [pc, #92]	@ (8001e20 <HAL_InitTick+0x6c>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d024      	beq.n	8001e12 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001dc8:	f001 fb40 	bl	800344c <HAL_RCC_GetHCLKFreq>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	4b14      	ldr	r3, [pc, #80]	@ (8001e20 <HAL_InitTick+0x6c>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dd8:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de0:	4618      	mov	r0, r3
 8001de2:	f000 f960 	bl	80020a6 <HAL_SYSTICK_Config>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d10f      	bne.n	8001e0c <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b0f      	cmp	r3, #15
 8001df0:	d809      	bhi.n	8001e06 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001df2:	2200      	movs	r2, #0
 8001df4:	6879      	ldr	r1, [r7, #4]
 8001df6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001dfa:	f000 f92c 	bl	8002056 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dfe:	4a09      	ldr	r2, [pc, #36]	@ (8001e24 <HAL_InitTick+0x70>)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6013      	str	r3, [r2, #0]
 8001e04:	e007      	b.n	8001e16 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	73fb      	strb	r3, [r7, #15]
 8001e0a:	e004      	b.n	8001e16 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	73fb      	strb	r3, [r7, #15]
 8001e10:	e001      	b.n	8001e16 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	20000014 	.word	0x20000014
 8001e24:	20000010 	.word	0x20000010

08001e28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e2c:	4b05      	ldr	r3, [pc, #20]	@ (8001e44 <HAL_IncTick+0x1c>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	461a      	mov	r2, r3
 8001e32:	4b05      	ldr	r3, [pc, #20]	@ (8001e48 <HAL_IncTick+0x20>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4413      	add	r3, r2
 8001e38:	4a03      	ldr	r2, [pc, #12]	@ (8001e48 <HAL_IncTick+0x20>)
 8001e3a:	6013      	str	r3, [r2, #0]
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc80      	pop	{r7}
 8001e42:	4770      	bx	lr
 8001e44:	20000014 	.word	0x20000014
 8001e48:	2000023c 	.word	0x2000023c

08001e4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e50:	4b02      	ldr	r3, [pc, #8]	@ (8001e5c <HAL_GetTick+0x10>)
 8001e52:	681b      	ldr	r3, [r3, #0]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bc80      	pop	{r7}
 8001e5a:	4770      	bx	lr
 8001e5c:	2000023c 	.word	0x2000023c

08001e60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e68:	f7ff fff0 	bl	8001e4c <HAL_GetTick>
 8001e6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e78:	d005      	beq.n	8001e86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea4 <HAL_Delay+0x44>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	4413      	add	r3, r2
 8001e84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e86:	bf00      	nop
 8001e88:	f7ff ffe0 	bl	8001e4c <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d8f7      	bhi.n	8001e88 <HAL_Delay+0x28>
  {
  }
}
 8001e98:	bf00      	nop
 8001e9a:	bf00      	nop
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20000014 	.word	0x20000014

08001ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001eec <__NVIC_SetPriorityGrouping+0x44>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ebe:	68ba      	ldr	r2, [r7, #8]
 8001ec0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ed0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ed4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eda:	4a04      	ldr	r2, [pc, #16]	@ (8001eec <__NVIC_SetPriorityGrouping+0x44>)
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	60d3      	str	r3, [r2, #12]
}
 8001ee0:	bf00      	nop
 8001ee2:	3714      	adds	r7, #20
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bc80      	pop	{r7}
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	e000ed00 	.word	0xe000ed00

08001ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ef4:	4b04      	ldr	r3, [pc, #16]	@ (8001f08 <__NVIC_GetPriorityGrouping+0x18>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	0a1b      	lsrs	r3, r3, #8
 8001efa:	f003 0307 	and.w	r3, r3, #7
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bc80      	pop	{r7}
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	db0b      	blt.n	8001f36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	f003 021f 	and.w	r2, r3, #31
 8001f24:	4906      	ldr	r1, [pc, #24]	@ (8001f40 <__NVIC_EnableIRQ+0x34>)
 8001f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2a:	095b      	lsrs	r3, r3, #5
 8001f2c:	2001      	movs	r0, #1
 8001f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bc80      	pop	{r7}
 8001f3e:	4770      	bx	lr
 8001f40:	e000e100 	.word	0xe000e100

08001f44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	6039      	str	r1, [r7, #0]
 8001f4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	db0a      	blt.n	8001f6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	490c      	ldr	r1, [pc, #48]	@ (8001f90 <__NVIC_SetPriority+0x4c>)
 8001f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f62:	0112      	lsls	r2, r2, #4
 8001f64:	b2d2      	uxtb	r2, r2
 8001f66:	440b      	add	r3, r1
 8001f68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f6c:	e00a      	b.n	8001f84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	4908      	ldr	r1, [pc, #32]	@ (8001f94 <__NVIC_SetPriority+0x50>)
 8001f74:	79fb      	ldrb	r3, [r7, #7]
 8001f76:	f003 030f 	and.w	r3, r3, #15
 8001f7a:	3b04      	subs	r3, #4
 8001f7c:	0112      	lsls	r2, r2, #4
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	440b      	add	r3, r1
 8001f82:	761a      	strb	r2, [r3, #24]
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bc80      	pop	{r7}
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	e000e100 	.word	0xe000e100
 8001f94:	e000ed00 	.word	0xe000ed00

08001f98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b089      	sub	sp, #36	@ 0x24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	f1c3 0307 	rsb	r3, r3, #7
 8001fb2:	2b04      	cmp	r3, #4
 8001fb4:	bf28      	it	cs
 8001fb6:	2304      	movcs	r3, #4
 8001fb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	3304      	adds	r3, #4
 8001fbe:	2b06      	cmp	r3, #6
 8001fc0:	d902      	bls.n	8001fc8 <NVIC_EncodePriority+0x30>
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	3b03      	subs	r3, #3
 8001fc6:	e000      	b.n	8001fca <NVIC_EncodePriority+0x32>
 8001fc8:	2300      	movs	r3, #0
 8001fca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fcc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43da      	mvns	r2, r3
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	401a      	ands	r2, r3
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fe0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fea:	43d9      	mvns	r1, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff0:	4313      	orrs	r3, r2
         );
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3724      	adds	r7, #36	@ 0x24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr

08001ffc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3b01      	subs	r3, #1
 8002008:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800200c:	d301      	bcc.n	8002012 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800200e:	2301      	movs	r3, #1
 8002010:	e00f      	b.n	8002032 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002012:	4a0a      	ldr	r2, [pc, #40]	@ (800203c <SysTick_Config+0x40>)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3b01      	subs	r3, #1
 8002018:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800201a:	210f      	movs	r1, #15
 800201c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002020:	f7ff ff90 	bl	8001f44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002024:	4b05      	ldr	r3, [pc, #20]	@ (800203c <SysTick_Config+0x40>)
 8002026:	2200      	movs	r2, #0
 8002028:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800202a:	4b04      	ldr	r3, [pc, #16]	@ (800203c <SysTick_Config+0x40>)
 800202c:	2207      	movs	r2, #7
 800202e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	e000e010 	.word	0xe000e010

08002040 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f7ff ff2d 	bl	8001ea8 <__NVIC_SetPriorityGrouping>
}
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b086      	sub	sp, #24
 800205a:	af00      	add	r7, sp, #0
 800205c:	4603      	mov	r3, r0
 800205e:	60b9      	str	r1, [r7, #8]
 8002060:	607a      	str	r2, [r7, #4]
 8002062:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002064:	f7ff ff44 	bl	8001ef0 <__NVIC_GetPriorityGrouping>
 8002068:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	68b9      	ldr	r1, [r7, #8]
 800206e:	6978      	ldr	r0, [r7, #20]
 8002070:	f7ff ff92 	bl	8001f98 <NVIC_EncodePriority>
 8002074:	4602      	mov	r2, r0
 8002076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800207a:	4611      	mov	r1, r2
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff ff61 	bl	8001f44 <__NVIC_SetPriority>
}
 8002082:	bf00      	nop
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b082      	sub	sp, #8
 800208e:	af00      	add	r7, sp, #0
 8002090:	4603      	mov	r3, r0
 8002092:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff ff37 	bl	8001f0c <__NVIC_EnableIRQ>
}
 800209e:	bf00      	nop
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b082      	sub	sp, #8
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7ff ffa4 	bl	8001ffc <SysTick_Config>
 80020b4:	4603      	mov	r3, r0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
	...

080020c0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b087      	sub	sp, #28
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020ca:	2300      	movs	r3, #0
 80020cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020ce:	e140      	b.n	8002352 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	2101      	movs	r1, #1
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	fa01 f303 	lsl.w	r3, r1, r3
 80020dc:	4013      	ands	r3, r2
 80020de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f000 8132 	beq.w	800234c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f003 0303 	and.w	r3, r3, #3
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d005      	beq.n	8002100 <HAL_GPIO_Init+0x40>
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f003 0303 	and.w	r3, r3, #3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d130      	bne.n	8002162 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	2203      	movs	r2, #3
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	43db      	mvns	r3, r3
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	4013      	ands	r3, r2
 8002116:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	68da      	ldr	r2, [r3, #12]
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	4313      	orrs	r3, r2
 8002128:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002136:	2201      	movs	r2, #1
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	43db      	mvns	r3, r3
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	4013      	ands	r3, r2
 8002144:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	091b      	lsrs	r3, r3, #4
 800214c:	f003 0201 	and.w	r2, r3, #1
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	4313      	orrs	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f003 0303 	and.w	r3, r3, #3
 800216a:	2b03      	cmp	r3, #3
 800216c:	d017      	beq.n	800219e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	2203      	movs	r2, #3
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	43db      	mvns	r3, r3
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	4013      	ands	r3, r2
 8002184:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	689a      	ldr	r2, [r3, #8]
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	4313      	orrs	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d123      	bne.n	80021f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	08da      	lsrs	r2, r3, #3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3208      	adds	r2, #8
 80021b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	220f      	movs	r2, #15
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43db      	mvns	r3, r3
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	4013      	ands	r3, r2
 80021cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	691a      	ldr	r2, [r3, #16]
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	08da      	lsrs	r2, r3, #3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3208      	adds	r2, #8
 80021ec:	6939      	ldr	r1, [r7, #16]
 80021ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	2203      	movs	r2, #3
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43db      	mvns	r3, r3
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	4013      	ands	r3, r2
 8002208:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f003 0203 	and.w	r2, r3, #3
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	4313      	orrs	r3, r2
 800221e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800222e:	2b00      	cmp	r3, #0
 8002230:	f000 808c 	beq.w	800234c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002234:	4a4e      	ldr	r2, [pc, #312]	@ (8002370 <HAL_GPIO_Init+0x2b0>)
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	089b      	lsrs	r3, r3, #2
 800223a:	3302      	adds	r3, #2
 800223c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002240:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	f003 0303 	and.w	r3, r3, #3
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	2207      	movs	r2, #7
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	43db      	mvns	r3, r3
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	4013      	ands	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800225e:	d00d      	beq.n	800227c <HAL_GPIO_Init+0x1bc>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a44      	ldr	r2, [pc, #272]	@ (8002374 <HAL_GPIO_Init+0x2b4>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d007      	beq.n	8002278 <HAL_GPIO_Init+0x1b8>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a43      	ldr	r2, [pc, #268]	@ (8002378 <HAL_GPIO_Init+0x2b8>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d101      	bne.n	8002274 <HAL_GPIO_Init+0x1b4>
 8002270:	2302      	movs	r3, #2
 8002272:	e004      	b.n	800227e <HAL_GPIO_Init+0x1be>
 8002274:	2307      	movs	r3, #7
 8002276:	e002      	b.n	800227e <HAL_GPIO_Init+0x1be>
 8002278:	2301      	movs	r3, #1
 800227a:	e000      	b.n	800227e <HAL_GPIO_Init+0x1be>
 800227c:	2300      	movs	r3, #0
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	f002 0203 	and.w	r2, r2, #3
 8002284:	0092      	lsls	r2, r2, #2
 8002286:	4093      	lsls	r3, r2
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	4313      	orrs	r3, r2
 800228c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800228e:	4938      	ldr	r1, [pc, #224]	@ (8002370 <HAL_GPIO_Init+0x2b0>)
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	089b      	lsrs	r3, r3, #2
 8002294:	3302      	adds	r3, #2
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800229c:	4b37      	ldr	r3, [pc, #220]	@ (800237c <HAL_GPIO_Init+0x2bc>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	43db      	mvns	r3, r3
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	4013      	ands	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	4313      	orrs	r3, r2
 80022be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022c0:	4a2e      	ldr	r2, [pc, #184]	@ (800237c <HAL_GPIO_Init+0x2bc>)
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80022c6:	4b2d      	ldr	r3, [pc, #180]	@ (800237c <HAL_GPIO_Init+0x2bc>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	43db      	mvns	r3, r3
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	4013      	ands	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022ea:	4a24      	ldr	r2, [pc, #144]	@ (800237c <HAL_GPIO_Init+0x2bc>)
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80022f0:	4b22      	ldr	r3, [pc, #136]	@ (800237c <HAL_GPIO_Init+0x2bc>)
 80022f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022f6:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	43db      	mvns	r3, r3
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	4013      	ands	r3, r2
 8002300:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	4313      	orrs	r3, r2
 8002314:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8002316:	4a19      	ldr	r2, [pc, #100]	@ (800237c <HAL_GPIO_Init+0x2bc>)
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800231e:	4b17      	ldr	r3, [pc, #92]	@ (800237c <HAL_GPIO_Init+0x2bc>)
 8002320:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002324:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	43db      	mvns	r3, r3
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	4013      	ands	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d003      	beq.n	8002344 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	4313      	orrs	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002344:	4a0d      	ldr	r2, [pc, #52]	@ (800237c <HAL_GPIO_Init+0x2bc>)
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	3301      	adds	r3, #1
 8002350:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	fa22 f303 	lsr.w	r3, r2, r3
 800235c:	2b00      	cmp	r3, #0
 800235e:	f47f aeb7 	bne.w	80020d0 <HAL_GPIO_Init+0x10>
  }
}
 8002362:	bf00      	nop
 8002364:	bf00      	nop
 8002366:	371c      	adds	r7, #28
 8002368:	46bd      	mov	sp, r7
 800236a:	bc80      	pop	{r7}
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	40010000 	.word	0x40010000
 8002374:	48000400 	.word	0x48000400
 8002378:	48000800 	.word	0x48000800
 800237c:	58000800 	.word	0x58000800

08002380 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	460b      	mov	r3, r1
 800238a:	807b      	strh	r3, [r7, #2]
 800238c:	4613      	mov	r3, r2
 800238e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002390:	787b      	ldrb	r3, [r7, #1]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002396:	887a      	ldrh	r2, [r7, #2]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800239c:	e002      	b.n	80023a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800239e:	887a      	ldrh	r2, [r7, #2]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bc80      	pop	{r7}
 80023ac:	4770      	bx	lr

080023ae <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b085      	sub	sp, #20
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
 80023b6:	460b      	mov	r3, r1
 80023b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023c0:	887a      	ldrh	r2, [r7, #2]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	4013      	ands	r3, r2
 80023c6:	041a      	lsls	r2, r3, #16
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	43d9      	mvns	r1, r3
 80023cc:	887b      	ldrh	r3, [r7, #2]
 80023ce:	400b      	ands	r3, r1
 80023d0:	431a      	orrs	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	619a      	str	r2, [r3, #24]
}
 80023d6:	bf00      	nop
 80023d8:	3714      	adds	r7, #20
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr

080023e0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023e4:	4b04      	ldr	r3, [pc, #16]	@ (80023f8 <HAL_PWR_EnableBkUpAccess+0x18>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a03      	ldr	r2, [pc, #12]	@ (80023f8 <HAL_PWR_EnableBkUpAccess+0x18>)
 80023ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023ee:	6013      	str	r3, [r2, #0]
}
 80023f0:	bf00      	nop
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr
 80023f8:	58000400 	.word	0x58000400

080023fc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002400:	4b03      	ldr	r3, [pc, #12]	@ (8002410 <HAL_PWREx_GetVoltageRange+0x14>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8002408:	4618      	mov	r0, r3
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr
 8002410:	58000400 	.word	0x58000400

08002414 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002418:	4b06      	ldr	r3, [pc, #24]	@ (8002434 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002420:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002424:	d101      	bne.n	800242a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8002426:	2301      	movs	r3, #1
 8002428:	e000      	b.n	800242c <LL_PWR_IsEnabledBkUpAccess+0x18>
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr
 8002434:	58000400 	.word	0x58000400

08002438 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800243c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002446:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800244a:	6013      	str	r3, [r2, #0]
}
 800244c:	bf00      	nop
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr

08002454 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002458:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002462:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002466:	6013      	str	r3, [r2, #0]
}
 8002468:	bf00      	nop
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr

08002470 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002474:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800247e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002482:	d101      	bne.n	8002488 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002484:	2301      	movs	r3, #1
 8002486:	e000      	b.n	800248a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	46bd      	mov	sp, r7
 800248e:	bc80      	pop	{r7}
 8002490:	4770      	bx	lr

08002492 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8002492:	b480      	push	{r7}
 8002494:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002496:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80024a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024a4:	6013      	str	r3, [r2, #0]
}
 80024a6:	bf00      	nop
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bc80      	pop	{r7}
 80024ac:	4770      	bx	lr

080024ae <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80024ae:	b480      	push	{r7}
 80024b0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80024b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80024bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024c0:	6013      	str	r3, [r2, #0]
}
 80024c2:	bf00      	nop
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bc80      	pop	{r7}
 80024c8:	4770      	bx	lr

080024ca <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80024ca:	b480      	push	{r7}
 80024cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80024ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80024dc:	d101      	bne.n	80024e2 <LL_RCC_HSE_IsReady+0x18>
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <LL_RCC_HSE_IsReady+0x1a>
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr

080024ec <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80024f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80024fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024fe:	6013      	str	r3, [r2, #0]
}
 8002500:	bf00      	nop
 8002502:	46bd      	mov	sp, r7
 8002504:	bc80      	pop	{r7}
 8002506:	4770      	bx	lr

08002508 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800250c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002516:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800251a:	6013      	str	r3, [r2, #0]
}
 800251c:	bf00      	nop
 800251e:	46bd      	mov	sp, r7
 8002520:	bc80      	pop	{r7}
 8002522:	4770      	bx	lr

08002524 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002528:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002532:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002536:	d101      	bne.n	800253c <LL_RCC_HSI_IsReady+0x18>
 8002538:	2301      	movs	r3, #1
 800253a:	e000      	b.n	800253e <LL_RCC_HSI_IsReady+0x1a>
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	46bd      	mov	sp, r7
 8002542:	bc80      	pop	{r7}
 8002544:	4770      	bx	lr

08002546 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800254e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	061b      	lsls	r3, r3, #24
 800255c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002560:	4313      	orrs	r3, r2
 8002562:	604b      	str	r3, [r1, #4]
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	bc80      	pop	{r7}
 800256c:	4770      	bx	lr

0800256e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800256e:	b480      	push	{r7}
 8002570:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002572:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002576:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b02      	cmp	r3, #2
 8002580:	d101      	bne.n	8002586 <LL_RCC_LSE_IsReady+0x18>
 8002582:	2301      	movs	r3, #1
 8002584:	e000      	b.n	8002588 <LL_RCC_LSE_IsReady+0x1a>
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr

08002590 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002594:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002598:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800259c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025a0:	f043 0301 	orr.w	r3, r3, #1
 80025a4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80025a8:	bf00      	nop
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr

080025b0 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80025b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025bc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025c0:	f023 0301 	bic.w	r3, r3, #1
 80025c4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80025c8:	bf00      	nop
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr

080025d0 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80025d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d101      	bne.n	80025e8 <LL_RCC_LSI_IsReady+0x18>
 80025e4:	2301      	movs	r3, #1
 80025e6:	e000      	b.n	80025ea <LL_RCC_LSI_IsReady+0x1a>
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc80      	pop	{r7}
 80025f0:	4770      	bx	lr

080025f2 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80025f2:	b480      	push	{r7}
 80025f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80025f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002600:	f043 0301 	orr.w	r3, r3, #1
 8002604:	6013      	str	r3, [r2, #0]
}
 8002606:	bf00      	nop
 8002608:	46bd      	mov	sp, r7
 800260a:	bc80      	pop	{r7}
 800260c:	4770      	bx	lr

0800260e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800260e:	b480      	push	{r7}
 8002610:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002612:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800261c:	f023 0301 	bic.w	r3, r3, #1
 8002620:	6013      	str	r3, [r2, #0]
}
 8002622:	bf00      	nop
 8002624:	46bd      	mov	sp, r7
 8002626:	bc80      	pop	{r7}
 8002628:	4770      	bx	lr

0800262a <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800262a:	b480      	push	{r7}
 800262c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800262e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b02      	cmp	r3, #2
 800263a:	d101      	bne.n	8002640 <LL_RCC_MSI_IsReady+0x16>
 800263c:	2301      	movs	r3, #1
 800263e:	e000      	b.n	8002642 <LL_RCC_MSI_IsReady+0x18>
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr

0800264a <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 800264a:	b480      	push	{r7}
 800264c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800264e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	2b08      	cmp	r3, #8
 800265a:	d101      	bne.n	8002660 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 800265c:	2301      	movs	r3, #1
 800265e:	e000      	b.n	8002662 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr

0800266a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800266a:	b480      	push	{r7}
 800266c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800266e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002678:	4618      	mov	r0, r3
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr

08002680 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002684:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002688:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800268c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8002690:	4618      	mov	r0, r3
 8002692:	46bd      	mov	sp, r7
 8002694:	bc80      	pop	{r7}
 8002696:	4770      	bx	lr

08002698 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80026a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	021b      	lsls	r3, r3, #8
 80026ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80026b2:	4313      	orrs	r3, r2
 80026b4:	604b      	str	r3, [r1, #4]
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc80      	pop	{r7}
 80026be:	4770      	bx	lr

080026c0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80026c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f023 0203 	bic.w	r2, r3, #3
 80026d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4313      	orrs	r3, r2
 80026da:	608b      	str	r3, [r1, #8]
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bc80      	pop	{r7}
 80026e4:	4770      	bx	lr

080026e6 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80026e6:	b480      	push	{r7}
 80026e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80026ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f003 030c 	and.w	r3, r3, #12
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bc80      	pop	{r7}
 80026fa:	4770      	bx	lr

080026fc <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002704:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800270e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4313      	orrs	r3, r2
 8002716:	608b      	str	r3, [r1, #8]
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	bc80      	pop	{r7}
 8002720:	4770      	bx	lr

08002722 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002722:	b480      	push	{r7}
 8002724:	b083      	sub	sp, #12
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800272a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800272e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002732:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002736:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4313      	orrs	r3, r2
 800273e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002742:	bf00      	nop
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr

0800274c <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002754:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002758:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800275c:	f023 020f 	bic.w	r2, r3, #15
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	091b      	lsrs	r3, r3, #4
 8002764:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002768:	4313      	orrs	r3, r2
 800276a:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	bc80      	pop	{r7}
 8002776:	4770      	bx	lr

08002778 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002780:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800278a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4313      	orrs	r3, r2
 8002792:	608b      	str	r3, [r1, #8]
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	bc80      	pop	{r7}
 800279c:	4770      	bx	lr

0800279e <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800279e:	b480      	push	{r7}
 80027a0:	b083      	sub	sp, #12
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80027a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80027b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	608b      	str	r3, [r1, #8]
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr

080027c4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80027c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc80      	pop	{r7}
 80027d8:	4770      	bx	lr

080027da <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 80027da:	b480      	push	{r7}
 80027dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80027de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027e2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80027e6:	011b      	lsls	r3, r3, #4
 80027e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr

080027f4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80027f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8002802:	4618      	mov	r0, r3
 8002804:	46bd      	mov	sp, r7
 8002806:	bc80      	pop	{r7}
 8002808:	4770      	bx	lr

0800280a <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800280a:	b480      	push	{r7}
 800280c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800280e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8002818:	4618      	mov	r0, r3
 800281a:	46bd      	mov	sp, r7
 800281c:	bc80      	pop	{r7}
 800281e:	4770      	bx	lr

08002820 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002824:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800282e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002832:	6013      	str	r3, [r2, #0]
}
 8002834:	bf00      	nop
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr

0800283c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002840:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800284a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800284e:	6013      	str	r3, [r2, #0]
}
 8002850:	bf00      	nop
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr

08002858 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800285c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002866:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800286a:	d101      	bne.n	8002870 <LL_RCC_PLL_IsReady+0x18>
 800286c:	2301      	movs	r3, #1
 800286e:	e000      	b.n	8002872 <LL_RCC_PLL_IsReady+0x1a>
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	46bd      	mov	sp, r7
 8002876:	bc80      	pop	{r7}
 8002878:	4770      	bx	lr

0800287a <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800287a:	b480      	push	{r7}
 800287c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800287e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	0a1b      	lsrs	r3, r3, #8
 8002886:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800288a:	4618      	mov	r0, r3
 800288c:	46bd      	mov	sp, r7
 800288e:	bc80      	pop	{r7}
 8002890:	4770      	bx	lr

08002892 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002892:	b480      	push	{r7}
 8002894:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002896:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr

080028a8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80028ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr

080028be <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80028be:	b480      	push	{r7}
 80028c0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80028c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	f003 0303 	and.w	r3, r3, #3
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr

080028d4 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80028d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028e6:	d101      	bne.n	80028ec <LL_RCC_IsActiveFlag_HPRE+0x18>
 80028e8:	2301      	movs	r3, #1
 80028ea:	e000      	b.n	80028ee <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bc80      	pop	{r7}
 80028f4:	4770      	bx	lr

080028f6 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80028f6:	b480      	push	{r7}
 80028f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80028fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028fe:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002906:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800290a:	d101      	bne.n	8002910 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800290c:	2301      	movs	r3, #1
 800290e:	e000      	b.n	8002912 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	46bd      	mov	sp, r7
 8002916:	bc80      	pop	{r7}
 8002918:	4770      	bx	lr

0800291a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800291a:	b480      	push	{r7}
 800291c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800291e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002922:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002926:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800292a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800292e:	d101      	bne.n	8002934 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002930:	2301      	movs	r3, #1
 8002932:	e000      	b.n	8002936 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	46bd      	mov	sp, r7
 800293a:	bc80      	pop	{r7}
 800293c:	4770      	bx	lr

0800293e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800293e:	b480      	push	{r7}
 8002940:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002942:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800294c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002950:	d101      	bne.n	8002956 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002952:	2301      	movs	r3, #1
 8002954:	e000      	b.n	8002958 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr

08002960 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002964:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800296e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002972:	d101      	bne.n	8002978 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002974:	2301      	movs	r3, #1
 8002976:	e000      	b.n	800297a <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	46bd      	mov	sp, r7
 800297e:	bc80      	pop	{r7}
 8002980:	4770      	bx	lr
	...

08002984 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b088      	sub	sp, #32
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e36f      	b.n	8003076 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002996:	f7ff fea6 	bl	80026e6 <LL_RCC_GetSysClkSource>
 800299a:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800299c:	f7ff ff8f 	bl	80028be <LL_RCC_PLL_GetMainSource>
 80029a0:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0320 	and.w	r3, r3, #32
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f000 80c4 	beq.w	8002b38 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d005      	beq.n	80029c2 <HAL_RCC_OscConfig+0x3e>
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	2b0c      	cmp	r3, #12
 80029ba:	d176      	bne.n	8002aaa <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d173      	bne.n	8002aaa <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e353      	b.n	8003076 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0308 	and.w	r3, r3, #8
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d005      	beq.n	80029ec <HAL_RCC_OscConfig+0x68>
 80029e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029ea:	e006      	b.n	80029fa <HAL_RCC_OscConfig+0x76>
 80029ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029f4:	091b      	lsrs	r3, r3, #4
 80029f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d222      	bcs.n	8002a44 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a02:	4618      	mov	r0, r3
 8002a04:	f000 fd5a 	bl	80034bc <RCC_SetFlashLatencyFromMSIRange>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e331      	b.n	8003076 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a1c:	f043 0308 	orr.w	r3, r3, #8
 8002a20:	6013      	str	r3, [r2, #0]
 8002a22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a30:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a34:	4313      	orrs	r3, r2
 8002a36:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff fe2b 	bl	8002698 <LL_RCC_MSI_SetCalibTrimming>
 8002a42:	e021      	b.n	8002a88 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a4e:	f043 0308 	orr.w	r3, r3, #8
 8002a52:	6013      	str	r3, [r2, #0]
 8002a54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a62:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a66:	4313      	orrs	r3, r2
 8002a68:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff fe12 	bl	8002698 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f000 fd1f 	bl	80034bc <RCC_SetFlashLatencyFromMSIRange>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e2f6      	b.n	8003076 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002a88:	f000 fce0 	bl	800344c <HAL_RCC_GetHCLKFreq>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	4aa7      	ldr	r2, [pc, #668]	@ (8002d2c <HAL_RCC_OscConfig+0x3a8>)
 8002a90:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8002a92:	4ba7      	ldr	r3, [pc, #668]	@ (8002d30 <HAL_RCC_OscConfig+0x3ac>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff f98c 	bl	8001db4 <HAL_InitTick>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002aa0:	7cfb      	ldrb	r3, [r7, #19]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d047      	beq.n	8002b36 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8002aa6:	7cfb      	ldrb	r3, [r7, #19]
 8002aa8:	e2e5      	b.n	8003076 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d02c      	beq.n	8002b0c <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ab2:	f7ff fd9e 	bl	80025f2 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ab6:	f7ff f9c9 	bl	8001e4c <HAL_GetTick>
 8002aba:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002abc:	e008      	b.n	8002ad0 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002abe:	f7ff f9c5 	bl	8001e4c <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e2d2      	b.n	8003076 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002ad0:	f7ff fdab 	bl	800262a <LL_RCC_MSI_IsReady>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0f1      	beq.n	8002abe <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ada:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ae4:	f043 0308 	orr.w	r3, r3, #8
 8002ae8:	6013      	str	r3, [r2, #0]
 8002aea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002afc:	4313      	orrs	r3, r2
 8002afe:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff fdc7 	bl	8002698 <LL_RCC_MSI_SetCalibTrimming>
 8002b0a:	e015      	b.n	8002b38 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b0c:	f7ff fd7f 	bl	800260e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b10:	f7ff f99c 	bl	8001e4c <HAL_GetTick>
 8002b14:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b18:	f7ff f998 	bl	8001e4c <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e2a5      	b.n	8003076 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002b2a:	f7ff fd7e 	bl	800262a <LL_RCC_MSI_IsReady>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1f1      	bne.n	8002b18 <HAL_RCC_OscConfig+0x194>
 8002b34:	e000      	b.n	8002b38 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002b36:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d058      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	2b08      	cmp	r3, #8
 8002b48:	d005      	beq.n	8002b56 <HAL_RCC_OscConfig+0x1d2>
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	2b0c      	cmp	r3, #12
 8002b4e:	d108      	bne.n	8002b62 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	2b03      	cmp	r3, #3
 8002b54:	d105      	bne.n	8002b62 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d14b      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e289      	b.n	8003076 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002b62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b74:	4313      	orrs	r3, r2
 8002b76:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b80:	d102      	bne.n	8002b88 <HAL_RCC_OscConfig+0x204>
 8002b82:	f7ff fc86 	bl	8002492 <LL_RCC_HSE_Enable>
 8002b86:	e00d      	b.n	8002ba4 <HAL_RCC_OscConfig+0x220>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8002b90:	d104      	bne.n	8002b9c <HAL_RCC_OscConfig+0x218>
 8002b92:	f7ff fc51 	bl	8002438 <LL_RCC_HSE_EnableTcxo>
 8002b96:	f7ff fc7c 	bl	8002492 <LL_RCC_HSE_Enable>
 8002b9a:	e003      	b.n	8002ba4 <HAL_RCC_OscConfig+0x220>
 8002b9c:	f7ff fc87 	bl	80024ae <LL_RCC_HSE_Disable>
 8002ba0:	f7ff fc58 	bl	8002454 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d012      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bac:	f7ff f94e 	bl	8001e4c <HAL_GetTick>
 8002bb0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bb4:	f7ff f94a 	bl	8001e4c <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b64      	cmp	r3, #100	@ 0x64
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e257      	b.n	8003076 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002bc6:	f7ff fc80 	bl	80024ca <LL_RCC_HSE_IsReady>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d0f1      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x230>
 8002bd0:	e011      	b.n	8002bf6 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd2:	f7ff f93b 	bl	8001e4c <HAL_GetTick>
 8002bd6:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002bd8:	e008      	b.n	8002bec <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bda:	f7ff f937 	bl	8001e4c <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b64      	cmp	r3, #100	@ 0x64
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e244      	b.n	8003076 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002bec:	f7ff fc6d 	bl	80024ca <LL_RCC_HSE_IsReady>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1f1      	bne.n	8002bda <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d046      	beq.n	8002c90 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d005      	beq.n	8002c14 <HAL_RCC_OscConfig+0x290>
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	2b0c      	cmp	r3, #12
 8002c0c:	d10e      	bne.n	8002c2c <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d10b      	bne.n	8002c2c <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d101      	bne.n	8002c20 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e22a      	b.n	8003076 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff fc8e 	bl	8002546 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002c2a:	e031      	b.n	8002c90 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d019      	beq.n	8002c68 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c34:	f7ff fc5a 	bl	80024ec <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c38:	f7ff f908 	bl	8001e4c <HAL_GetTick>
 8002c3c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c40:	f7ff f904 	bl	8001e4c <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e211      	b.n	8003076 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002c52:	f7ff fc67 	bl	8002524 <LL_RCC_HSI_IsReady>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0f1      	beq.n	8002c40 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff fc70 	bl	8002546 <LL_RCC_HSI_SetCalibTrimming>
 8002c66:	e013      	b.n	8002c90 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c68:	f7ff fc4e 	bl	8002508 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c6c:	f7ff f8ee 	bl	8001e4c <HAL_GetTick>
 8002c70:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002c72:	e008      	b.n	8002c86 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c74:	f7ff f8ea 	bl	8001e4c <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e1f7      	b.n	8003076 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002c86:	f7ff fc4d 	bl	8002524 <LL_RCC_HSI_IsReady>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d1f1      	bne.n	8002c74 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0308 	and.w	r3, r3, #8
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d06e      	beq.n	8002d7a <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d056      	beq.n	8002d52 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8002ca4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ca8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cac:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	69da      	ldr	r2, [r3, #28]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f003 0310 	and.w	r3, r3, #16
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d031      	beq.n	8002d20 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d006      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d101      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e1d0      	b.n	8003076 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d013      	beq.n	8002d06 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8002cde:	f7ff fc67 	bl	80025b0 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ce2:	f7ff f8b3 	bl	8001e4c <HAL_GetTick>
 8002ce6:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002ce8:	e008      	b.n	8002cfc <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cea:	f7ff f8af 	bl	8001e4c <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b11      	cmp	r3, #17
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e1bc      	b.n	8003076 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8002cfc:	f7ff fc68 	bl	80025d0 <LL_RCC_LSI_IsReady>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1f1      	bne.n	8002cea <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002d06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d0e:	f023 0210 	bic.w	r2, r3, #16
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d20:	f7ff fc36 	bl	8002590 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d24:	f7ff f892 	bl	8001e4c <HAL_GetTick>
 8002d28:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8002d2a:	e00c      	b.n	8002d46 <HAL_RCC_OscConfig+0x3c2>
 8002d2c:	20000000 	.word	0x20000000
 8002d30:	20000010 	.word	0x20000010
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d34:	f7ff f88a 	bl	8001e4c <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b11      	cmp	r3, #17
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e197      	b.n	8003076 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8002d46:	f7ff fc43 	bl	80025d0 <LL_RCC_LSI_IsReady>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d0f1      	beq.n	8002d34 <HAL_RCC_OscConfig+0x3b0>
 8002d50:	e013      	b.n	8002d7a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d52:	f7ff fc2d 	bl	80025b0 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d56:	f7ff f879 	bl	8001e4c <HAL_GetTick>
 8002d5a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002d5c:	e008      	b.n	8002d70 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d5e:	f7ff f875 	bl	8001e4c <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b11      	cmp	r3, #17
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e182      	b.n	8003076 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002d70:	f7ff fc2e 	bl	80025d0 <LL_RCC_LSI_IsReady>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1f1      	bne.n	8002d5e <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0304 	and.w	r3, r3, #4
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f000 80d8 	beq.w	8002f38 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002d88:	f7ff fb44 	bl	8002414 <LL_PWR_IsEnabledBkUpAccess>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d113      	bne.n	8002dba <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002d92:	f7ff fb25 	bl	80023e0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d96:	f7ff f859 	bl	8001e4c <HAL_GetTick>
 8002d9a:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002d9c:	e008      	b.n	8002db0 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d9e:	f7ff f855 	bl	8001e4c <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e162      	b.n	8003076 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002db0:	f7ff fb30 	bl	8002414 <LL_PWR_IsEnabledBkUpAccess>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d0f1      	beq.n	8002d9e <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d07b      	beq.n	8002eba <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	2b85      	cmp	r3, #133	@ 0x85
 8002dc8:	d003      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	2b05      	cmp	r3, #5
 8002dd0:	d109      	bne.n	8002de6 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002dd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dda:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002dde:	f043 0304 	orr.w	r3, r3, #4
 8002de2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de6:	f7ff f831 	bl	8001e4c <HAL_GetTick>
 8002dea:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002dec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002df4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002df8:	f043 0301 	orr.w	r3, r3, #1
 8002dfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002e00:	e00a      	b.n	8002e18 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e02:	f7ff f823 	bl	8001e4c <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e12e      	b.n	8003076 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002e18:	f7ff fba9 	bl	800256e <LL_RCC_LSE_IsReady>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0ef      	beq.n	8002e02 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	2b81      	cmp	r3, #129	@ 0x81
 8002e28:	d003      	beq.n	8002e32 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	2b85      	cmp	r3, #133	@ 0x85
 8002e30:	d121      	bne.n	8002e76 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e32:	f7ff f80b 	bl	8001e4c <HAL_GetTick>
 8002e36:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002e38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e40:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002e4c:	e00a      	b.n	8002e64 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e4e:	f7fe fffd 	bl	8001e4c <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e108      	b.n	8003076 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002e64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d0ec      	beq.n	8002e4e <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002e74:	e060      	b.n	8002f38 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e76:	f7fe ffe9 	bl	8001e4c <HAL_GetTick>
 8002e7a:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002e7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e84:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002e90:	e00a      	b.n	8002ea8 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e92:	f7fe ffdb 	bl	8001e4c <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e0e6      	b.n	8003076 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002ea8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1ec      	bne.n	8002e92 <HAL_RCC_OscConfig+0x50e>
 8002eb8:	e03e      	b.n	8002f38 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eba:	f7fe ffc7 	bl	8001e4c <HAL_GetTick>
 8002ebe:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002ec0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ec8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ecc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ed0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002ed4:	e00a      	b.n	8002eec <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ed6:	f7fe ffb9 	bl	8001e4c <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e0c4      	b.n	8003076 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002eec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ef4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1ec      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002efc:	f7fe ffa6 	bl	8001e4c <HAL_GetTick>
 8002f00:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f0a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f0e:	f023 0301 	bic.w	r3, r3, #1
 8002f12:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002f16:	e00a      	b.n	8002f2e <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f18:	f7fe ff98 	bl	8001e4c <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e0a3      	b.n	8003076 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002f2e:	f7ff fb1e 	bl	800256e <LL_RCC_LSE_IsReady>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1ef      	bne.n	8002f18 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f000 8099 	beq.w	8003074 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	2b0c      	cmp	r3, #12
 8002f46:	d06c      	beq.n	8003022 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d14b      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f50:	f7ff fc74 	bl	800283c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f54:	f7fe ff7a 	bl	8001e4c <HAL_GetTick>
 8002f58:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f5c:	f7fe ff76 	bl	8001e4c <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b0a      	cmp	r3, #10
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e083      	b.n	8003076 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002f6e:	f7ff fc73 	bl	8002858 <LL_RCC_PLL_IsReady>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1f1      	bne.n	8002f5c <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f7c:	68da      	ldr	r2, [r3, #12]
 8002f7e:	4b40      	ldr	r3, [pc, #256]	@ (8003080 <HAL_RCC_OscConfig+0x6fc>)
 8002f80:	4013      	ands	r3, r2
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002f8a:	4311      	orrs	r1, r2
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002f90:	0212      	lsls	r2, r2, #8
 8002f92:	4311      	orrs	r1, r2
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002f98:	4311      	orrs	r1, r2
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002f9e:	4311      	orrs	r1, r2
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002faa:	4313      	orrs	r3, r2
 8002fac:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fae:	f7ff fc37 	bl	8002820 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002fbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fc0:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc2:	f7fe ff43 	bl	8001e4c <HAL_GetTick>
 8002fc6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8002fc8:	e008      	b.n	8002fdc <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fca:	f7fe ff3f 	bl	8001e4c <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b0a      	cmp	r3, #10
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e04c      	b.n	8003076 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002fdc:	f7ff fc3c 	bl	8002858 <LL_RCC_PLL_IsReady>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d0f1      	beq.n	8002fca <HAL_RCC_OscConfig+0x646>
 8002fe6:	e045      	b.n	8003074 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe8:	f7ff fc28 	bl	800283c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fec:	f7fe ff2e 	bl	8001e4c <HAL_GetTick>
 8002ff0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff4:	f7fe ff2a 	bl	8001e4c <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b0a      	cmp	r3, #10
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e037      	b.n	8003076 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003006:	f7ff fc27 	bl	8002858 <LL_RCC_PLL_IsReady>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1f1      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8003010:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003014:	68da      	ldr	r2, [r3, #12]
 8003016:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800301a:	4b1a      	ldr	r3, [pc, #104]	@ (8003084 <HAL_RCC_OscConfig+0x700>)
 800301c:	4013      	ands	r3, r2
 800301e:	60cb      	str	r3, [r1, #12]
 8003020:	e028      	b.n	8003074 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003026:	2b01      	cmp	r3, #1
 8003028:	d101      	bne.n	800302e <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e023      	b.n	8003076 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800302e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	f003 0203 	and.w	r2, r3, #3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003040:	429a      	cmp	r2, r3
 8003042:	d115      	bne.n	8003070 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800304e:	429a      	cmp	r2, r3
 8003050:	d10e      	bne.n	8003070 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800305c:	021b      	lsls	r3, r3, #8
 800305e:	429a      	cmp	r2, r3
 8003060:	d106      	bne.n	8003070 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800306c:	429a      	cmp	r2, r3
 800306e:	d001      	beq.n	8003074 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e000      	b.n	8003076 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3720      	adds	r7, #32
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	11c1808c 	.word	0x11c1808c
 8003084:	eefefffc 	.word	0xeefefffc

08003088 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e12c      	b.n	80032f6 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800309c:	4b98      	ldr	r3, [pc, #608]	@ (8003300 <HAL_RCC_ClockConfig+0x278>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0307 	and.w	r3, r3, #7
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d91b      	bls.n	80030e2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030aa:	4b95      	ldr	r3, [pc, #596]	@ (8003300 <HAL_RCC_ClockConfig+0x278>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f023 0207 	bic.w	r2, r3, #7
 80030b2:	4993      	ldr	r1, [pc, #588]	@ (8003300 <HAL_RCC_ClockConfig+0x278>)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030ba:	f7fe fec7 	bl	8001e4c <HAL_GetTick>
 80030be:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030c0:	e008      	b.n	80030d4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80030c2:	f7fe fec3 	bl	8001e4c <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e110      	b.n	80032f6 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d4:	4b8a      	ldr	r3, [pc, #552]	@ (8003300 <HAL_RCC_ClockConfig+0x278>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0307 	and.w	r3, r3, #7
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d1ef      	bne.n	80030c2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d016      	beq.n	800311c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7ff fb02 	bl	80026fc <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80030f8:	f7fe fea8 	bl	8001e4c <HAL_GetTick>
 80030fc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003100:	f7fe fea4 	bl	8001e4c <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e0f1      	b.n	80032f6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003112:	f7ff fbdf 	bl	80028d4 <LL_RCC_IsActiveFlag_HPRE>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d0f1      	beq.n	8003100 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0320 	and.w	r3, r3, #32
 8003124:	2b00      	cmp	r3, #0
 8003126:	d016      	beq.n	8003156 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	4618      	mov	r0, r3
 800312e:	f7ff faf8 	bl	8002722 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003132:	f7fe fe8b 	bl	8001e4c <HAL_GetTick>
 8003136:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003138:	e008      	b.n	800314c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800313a:	f7fe fe87 	bl	8001e4c <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d901      	bls.n	800314c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e0d4      	b.n	80032f6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800314c:	f7ff fbd3 	bl	80028f6 <LL_RCC_IsActiveFlag_C2HPRE>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0f1      	beq.n	800313a <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800315e:	2b00      	cmp	r3, #0
 8003160:	d016      	beq.n	8003190 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	4618      	mov	r0, r3
 8003168:	f7ff faf0 	bl	800274c <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800316c:	f7fe fe6e 	bl	8001e4c <HAL_GetTick>
 8003170:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003172:	e008      	b.n	8003186 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003174:	f7fe fe6a 	bl	8001e4c <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e0b7      	b.n	80032f6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003186:	f7ff fbc8 	bl	800291a <LL_RCC_IsActiveFlag_SHDHPRE>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d0f1      	beq.n	8003174 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0304 	and.w	r3, r3, #4
 8003198:	2b00      	cmp	r3, #0
 800319a:	d016      	beq.n	80031ca <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7ff fae9 	bl	8002778 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80031a6:	f7fe fe51 	bl	8001e4c <HAL_GetTick>
 80031aa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80031ac:	e008      	b.n	80031c0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80031ae:	f7fe fe4d 	bl	8001e4c <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e09a      	b.n	80032f6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80031c0:	f7ff fbbd 	bl	800293e <LL_RCC_IsActiveFlag_PPRE1>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d0f1      	beq.n	80031ae <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0308 	and.w	r3, r3, #8
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d017      	beq.n	8003206 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff fade 	bl	800279e <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80031e2:	f7fe fe33 	bl	8001e4c <HAL_GetTick>
 80031e6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80031e8:	e008      	b.n	80031fc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80031ea:	f7fe fe2f 	bl	8001e4c <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d901      	bls.n	80031fc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e07c      	b.n	80032f6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80031fc:	f7ff fbb0 	bl	8002960 <LL_RCC_IsActiveFlag_PPRE2>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d0f1      	beq.n	80031ea <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	d043      	beq.n	800329a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	2b02      	cmp	r3, #2
 8003218:	d106      	bne.n	8003228 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800321a:	f7ff f956 	bl	80024ca <LL_RCC_HSE_IsReady>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d11e      	bne.n	8003262 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e066      	b.n	80032f6 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	2b03      	cmp	r3, #3
 800322e:	d106      	bne.n	800323e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003230:	f7ff fb12 	bl	8002858 <LL_RCC_PLL_IsReady>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d113      	bne.n	8003262 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e05b      	b.n	80032f6 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d106      	bne.n	8003254 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003246:	f7ff f9f0 	bl	800262a <LL_RCC_MSI_IsReady>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d108      	bne.n	8003262 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e050      	b.n	80032f6 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003254:	f7ff f966 	bl	8002524 <LL_RCC_HSI_IsReady>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e049      	b.n	80032f6 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	4618      	mov	r0, r3
 8003268:	f7ff fa2a 	bl	80026c0 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800326c:	f7fe fdee 	bl	8001e4c <HAL_GetTick>
 8003270:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003272:	e00a      	b.n	800328a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003274:	f7fe fdea 	bl	8001e4c <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003282:	4293      	cmp	r3, r2
 8003284:	d901      	bls.n	800328a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e035      	b.n	80032f6 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800328a:	f7ff fa2c 	bl	80026e6 <LL_RCC_GetSysClkSource>
 800328e:	4602      	mov	r2, r0
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	429a      	cmp	r2, r3
 8003298:	d1ec      	bne.n	8003274 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800329a:	4b19      	ldr	r3, [pc, #100]	@ (8003300 <HAL_RCC_ClockConfig+0x278>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	683a      	ldr	r2, [r7, #0]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d21b      	bcs.n	80032e0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032a8:	4b15      	ldr	r3, [pc, #84]	@ (8003300 <HAL_RCC_ClockConfig+0x278>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f023 0207 	bic.w	r2, r3, #7
 80032b0:	4913      	ldr	r1, [pc, #76]	@ (8003300 <HAL_RCC_ClockConfig+0x278>)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032b8:	f7fe fdc8 	bl	8001e4c <HAL_GetTick>
 80032bc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80032c0:	f7fe fdc4 	bl	8001e4c <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e011      	b.n	80032f6 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003300 <HAL_RCC_ClockConfig+0x278>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0307 	and.w	r3, r3, #7
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d1ef      	bne.n	80032c0 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80032e0:	f000 f8b4 	bl	800344c <HAL_RCC_GetHCLKFreq>
 80032e4:	4603      	mov	r3, r0
 80032e6:	4a07      	ldr	r2, [pc, #28]	@ (8003304 <HAL_RCC_ClockConfig+0x27c>)
 80032e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80032ea:	4b07      	ldr	r3, [pc, #28]	@ (8003308 <HAL_RCC_ClockConfig+0x280>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7fe fd60 	bl	8001db4 <HAL_InitTick>
 80032f4:	4603      	mov	r3, r0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	58004000 	.word	0x58004000
 8003304:	20000000 	.word	0x20000000
 8003308:	20000010 	.word	0x20000010

0800330c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800330c:	b590      	push	{r4, r7, lr}
 800330e:	b087      	sub	sp, #28
 8003310:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8003312:	2300      	movs	r3, #0
 8003314:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8003316:	2300      	movs	r3, #0
 8003318:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800331a:	f7ff f9e4 	bl	80026e6 <LL_RCC_GetSysClkSource>
 800331e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003320:	f7ff facd 	bl	80028be <LL_RCC_PLL_GetMainSource>
 8003324:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d005      	beq.n	8003338 <HAL_RCC_GetSysClockFreq+0x2c>
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	2b0c      	cmp	r3, #12
 8003330:	d139      	bne.n	80033a6 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d136      	bne.n	80033a6 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003338:	f7ff f987 	bl	800264a <LL_RCC_MSI_IsEnabledRangeSelect>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d115      	bne.n	800336e <HAL_RCC_GetSysClockFreq+0x62>
 8003342:	f7ff f982 	bl	800264a <LL_RCC_MSI_IsEnabledRangeSelect>
 8003346:	4603      	mov	r3, r0
 8003348:	2b01      	cmp	r3, #1
 800334a:	d106      	bne.n	800335a <HAL_RCC_GetSysClockFreq+0x4e>
 800334c:	f7ff f98d 	bl	800266a <LL_RCC_MSI_GetRange>
 8003350:	4603      	mov	r3, r0
 8003352:	0a1b      	lsrs	r3, r3, #8
 8003354:	f003 030f 	and.w	r3, r3, #15
 8003358:	e005      	b.n	8003366 <HAL_RCC_GetSysClockFreq+0x5a>
 800335a:	f7ff f991 	bl	8002680 <LL_RCC_MSI_GetRangeAfterStandby>
 800335e:	4603      	mov	r3, r0
 8003360:	0a1b      	lsrs	r3, r3, #8
 8003362:	f003 030f 	and.w	r3, r3, #15
 8003366:	4a36      	ldr	r2, [pc, #216]	@ (8003440 <HAL_RCC_GetSysClockFreq+0x134>)
 8003368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800336c:	e014      	b.n	8003398 <HAL_RCC_GetSysClockFreq+0x8c>
 800336e:	f7ff f96c 	bl	800264a <LL_RCC_MSI_IsEnabledRangeSelect>
 8003372:	4603      	mov	r3, r0
 8003374:	2b01      	cmp	r3, #1
 8003376:	d106      	bne.n	8003386 <HAL_RCC_GetSysClockFreq+0x7a>
 8003378:	f7ff f977 	bl	800266a <LL_RCC_MSI_GetRange>
 800337c:	4603      	mov	r3, r0
 800337e:	091b      	lsrs	r3, r3, #4
 8003380:	f003 030f 	and.w	r3, r3, #15
 8003384:	e005      	b.n	8003392 <HAL_RCC_GetSysClockFreq+0x86>
 8003386:	f7ff f97b 	bl	8002680 <LL_RCC_MSI_GetRangeAfterStandby>
 800338a:	4603      	mov	r3, r0
 800338c:	091b      	lsrs	r3, r3, #4
 800338e:	f003 030f 	and.w	r3, r3, #15
 8003392:	4a2b      	ldr	r2, [pc, #172]	@ (8003440 <HAL_RCC_GetSysClockFreq+0x134>)
 8003394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003398:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d115      	bne.n	80033cc <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80033a4:	e012      	b.n	80033cc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	2b04      	cmp	r3, #4
 80033aa:	d102      	bne.n	80033b2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80033ac:	4b25      	ldr	r3, [pc, #148]	@ (8003444 <HAL_RCC_GetSysClockFreq+0x138>)
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	e00c      	b.n	80033cc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	2b08      	cmp	r3, #8
 80033b6:	d109      	bne.n	80033cc <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80033b8:	f7ff f85a 	bl	8002470 <LL_RCC_HSE_IsEnabledDiv2>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d102      	bne.n	80033c8 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80033c2:	4b20      	ldr	r3, [pc, #128]	@ (8003444 <HAL_RCC_GetSysClockFreq+0x138>)
 80033c4:	617b      	str	r3, [r7, #20]
 80033c6:	e001      	b.n	80033cc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80033c8:	4b1f      	ldr	r3, [pc, #124]	@ (8003448 <HAL_RCC_GetSysClockFreq+0x13c>)
 80033ca:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033cc:	f7ff f98b 	bl	80026e6 <LL_RCC_GetSysClkSource>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b0c      	cmp	r3, #12
 80033d4:	d12f      	bne.n	8003436 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80033d6:	f7ff fa72 	bl	80028be <LL_RCC_PLL_GetMainSource>
 80033da:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d003      	beq.n	80033ea <HAL_RCC_GetSysClockFreq+0xde>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2b03      	cmp	r3, #3
 80033e6:	d003      	beq.n	80033f0 <HAL_RCC_GetSysClockFreq+0xe4>
 80033e8:	e00d      	b.n	8003406 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80033ea:	4b16      	ldr	r3, [pc, #88]	@ (8003444 <HAL_RCC_GetSysClockFreq+0x138>)
 80033ec:	60fb      	str	r3, [r7, #12]
        break;
 80033ee:	e00d      	b.n	800340c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80033f0:	f7ff f83e 	bl	8002470 <LL_RCC_HSE_IsEnabledDiv2>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d102      	bne.n	8003400 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80033fa:	4b12      	ldr	r3, [pc, #72]	@ (8003444 <HAL_RCC_GetSysClockFreq+0x138>)
 80033fc:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80033fe:	e005      	b.n	800340c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003400:	4b11      	ldr	r3, [pc, #68]	@ (8003448 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003402:	60fb      	str	r3, [r7, #12]
        break;
 8003404:	e002      	b.n	800340c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	60fb      	str	r3, [r7, #12]
        break;
 800340a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800340c:	f7ff fa35 	bl	800287a <LL_RCC_PLL_GetN>
 8003410:	4602      	mov	r2, r0
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	fb03 f402 	mul.w	r4, r3, r2
 8003418:	f7ff fa46 	bl	80028a8 <LL_RCC_PLL_GetDivider>
 800341c:	4603      	mov	r3, r0
 800341e:	091b      	lsrs	r3, r3, #4
 8003420:	3301      	adds	r3, #1
 8003422:	fbb4 f4f3 	udiv	r4, r4, r3
 8003426:	f7ff fa34 	bl	8002892 <LL_RCC_PLL_GetR>
 800342a:	4603      	mov	r3, r0
 800342c:	0f5b      	lsrs	r3, r3, #29
 800342e:	3301      	adds	r3, #1
 8003430:	fbb4 f3f3 	udiv	r3, r4, r3
 8003434:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003436:	697b      	ldr	r3, [r7, #20]
}
 8003438:	4618      	mov	r0, r3
 800343a:	371c      	adds	r7, #28
 800343c:	46bd      	mov	sp, r7
 800343e:	bd90      	pop	{r4, r7, pc}
 8003440:	080059e4 	.word	0x080059e4
 8003444:	00f42400 	.word	0x00f42400
 8003448:	01e84800 	.word	0x01e84800

0800344c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800344c:	b598      	push	{r3, r4, r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003450:	f7ff ff5c 	bl	800330c <HAL_RCC_GetSysClockFreq>
 8003454:	4604      	mov	r4, r0
 8003456:	f7ff f9b5 	bl	80027c4 <LL_RCC_GetAHBPrescaler>
 800345a:	4603      	mov	r3, r0
 800345c:	091b      	lsrs	r3, r3, #4
 800345e:	f003 030f 	and.w	r3, r3, #15
 8003462:	4a03      	ldr	r2, [pc, #12]	@ (8003470 <HAL_RCC_GetHCLKFreq+0x24>)
 8003464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003468:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800346c:	4618      	mov	r0, r3
 800346e:	bd98      	pop	{r3, r4, r7, pc}
 8003470:	08005984 	.word	0x08005984

08003474 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003474:	b598      	push	{r3, r4, r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003478:	f7ff ffe8 	bl	800344c <HAL_RCC_GetHCLKFreq>
 800347c:	4604      	mov	r4, r0
 800347e:	f7ff f9b9 	bl	80027f4 <LL_RCC_GetAPB1Prescaler>
 8003482:	4603      	mov	r3, r0
 8003484:	0a1b      	lsrs	r3, r3, #8
 8003486:	4a03      	ldr	r2, [pc, #12]	@ (8003494 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800348c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003490:	4618      	mov	r0, r3
 8003492:	bd98      	pop	{r3, r4, r7, pc}
 8003494:	080059c4 	.word	0x080059c4

08003498 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003498:	b598      	push	{r3, r4, r7, lr}
 800349a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800349c:	f7ff ffd6 	bl	800344c <HAL_RCC_GetHCLKFreq>
 80034a0:	4604      	mov	r4, r0
 80034a2:	f7ff f9b2 	bl	800280a <LL_RCC_GetAPB2Prescaler>
 80034a6:	4603      	mov	r3, r0
 80034a8:	0adb      	lsrs	r3, r3, #11
 80034aa:	4a03      	ldr	r2, [pc, #12]	@ (80034b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034b0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	bd98      	pop	{r3, r4, r7, pc}
 80034b8:	080059c4 	.word	0x080059c4

080034bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80034bc:	b590      	push	{r4, r7, lr}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	091b      	lsrs	r3, r3, #4
 80034c8:	f003 030f 	and.w	r3, r3, #15
 80034cc:	4a10      	ldr	r2, [pc, #64]	@ (8003510 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80034ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034d2:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80034d4:	f7ff f981 	bl	80027da <LL_RCC_GetAHB3Prescaler>
 80034d8:	4603      	mov	r3, r0
 80034da:	091b      	lsrs	r3, r3, #4
 80034dc:	f003 030f 	and.w	r3, r3, #15
 80034e0:	4a0c      	ldr	r2, [pc, #48]	@ (8003514 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80034e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ec:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	4a09      	ldr	r2, [pc, #36]	@ (8003518 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80034f2:	fba2 2303 	umull	r2, r3, r2, r3
 80034f6:	0c9c      	lsrs	r4, r3, #18
 80034f8:	f7fe ff80 	bl	80023fc <HAL_PWREx_GetVoltageRange>
 80034fc:	4603      	mov	r3, r0
 80034fe:	4619      	mov	r1, r3
 8003500:	4620      	mov	r0, r4
 8003502:	f000 f80b 	bl	800351c <RCC_SetFlashLatency>
 8003506:	4603      	mov	r3, r0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3714      	adds	r7, #20
 800350c:	46bd      	mov	sp, r7
 800350e:	bd90      	pop	{r4, r7, pc}
 8003510:	080059e4 	.word	0x080059e4
 8003514:	08005984 	.word	0x08005984
 8003518:	431bde83 	.word	0x431bde83

0800351c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b08e      	sub	sp, #56	@ 0x38
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8003526:	4a3a      	ldr	r2, [pc, #232]	@ (8003610 <RCC_SetFlashLatency+0xf4>)
 8003528:	f107 0320 	add.w	r3, r7, #32
 800352c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003530:	6018      	str	r0, [r3, #0]
 8003532:	3304      	adds	r3, #4
 8003534:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8003536:	4a37      	ldr	r2, [pc, #220]	@ (8003614 <RCC_SetFlashLatency+0xf8>)
 8003538:	f107 0318 	add.w	r3, r7, #24
 800353c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003540:	6018      	str	r0, [r3, #0]
 8003542:	3304      	adds	r3, #4
 8003544:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8003546:	4a34      	ldr	r2, [pc, #208]	@ (8003618 <RCC_SetFlashLatency+0xfc>)
 8003548:	f107 030c 	add.w	r3, r7, #12
 800354c:	ca07      	ldmia	r2, {r0, r1, r2}
 800354e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003552:	2300      	movs	r3, #0
 8003554:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800355c:	d11b      	bne.n	8003596 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800355e:	2300      	movs	r3, #0
 8003560:	633b      	str	r3, [r7, #48]	@ 0x30
 8003562:	e014      	b.n	800358e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	3338      	adds	r3, #56	@ 0x38
 800356a:	443b      	add	r3, r7
 800356c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003570:	461a      	mov	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4293      	cmp	r3, r2
 8003576:	d807      	bhi.n	8003588 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	3338      	adds	r3, #56	@ 0x38
 800357e:	443b      	add	r3, r7
 8003580:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003584:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003586:	e021      	b.n	80035cc <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800358a:	3301      	adds	r3, #1
 800358c:	633b      	str	r3, [r7, #48]	@ 0x30
 800358e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003590:	2b02      	cmp	r3, #2
 8003592:	d9e7      	bls.n	8003564 <RCC_SetFlashLatency+0x48>
 8003594:	e01a      	b.n	80035cc <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003596:	2300      	movs	r3, #0
 8003598:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800359a:	e014      	b.n	80035c6 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800359c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	3338      	adds	r3, #56	@ 0x38
 80035a2:	443b      	add	r3, r7
 80035a4:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80035a8:	461a      	mov	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d807      	bhi.n	80035c0 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80035b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	3338      	adds	r3, #56	@ 0x38
 80035b6:	443b      	add	r3, r7
 80035b8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80035bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80035be:	e005      	b.n	80035cc <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80035c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035c2:	3301      	adds	r3, #1
 80035c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d9e7      	bls.n	800359c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80035cc:	4b13      	ldr	r3, [pc, #76]	@ (800361c <RCC_SetFlashLatency+0x100>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f023 0207 	bic.w	r2, r3, #7
 80035d4:	4911      	ldr	r1, [pc, #68]	@ (800361c <RCC_SetFlashLatency+0x100>)
 80035d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035d8:	4313      	orrs	r3, r2
 80035da:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80035dc:	f7fe fc36 	bl	8001e4c <HAL_GetTick>
 80035e0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80035e2:	e008      	b.n	80035f6 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80035e4:	f7fe fc32 	bl	8001e4c <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d901      	bls.n	80035f6 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e007      	b.n	8003606 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80035f6:	4b09      	ldr	r3, [pc, #36]	@ (800361c <RCC_SetFlashLatency+0x100>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0307 	and.w	r3, r3, #7
 80035fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003600:	429a      	cmp	r2, r3
 8003602:	d1ef      	bne.n	80035e4 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3738      	adds	r7, #56	@ 0x38
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	08005968 	.word	0x08005968
 8003614:	08005970 	.word	0x08005970
 8003618:	08005978 	.word	0x08005978
 800361c:	58004000 	.word	0x58004000

08003620 <LL_RCC_LSE_IsReady>:
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003624:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003628:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b02      	cmp	r3, #2
 8003632:	d101      	bne.n	8003638 <LL_RCC_LSE_IsReady+0x18>
 8003634:	2301      	movs	r3, #1
 8003636:	e000      	b.n	800363a <LL_RCC_LSE_IsReady+0x1a>
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	46bd      	mov	sp, r7
 800363e:	bc80      	pop	{r7}
 8003640:	4770      	bx	lr

08003642 <LL_RCC_SetUSARTClockSource>:
{
 8003642:	b480      	push	{r7}
 8003644:	b083      	sub	sp, #12
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800364a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800364e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	0c1b      	lsrs	r3, r3, #16
 8003656:	43db      	mvns	r3, r3
 8003658:	401a      	ands	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	b29b      	uxth	r3, r3
 800365e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003662:	4313      	orrs	r3, r2
 8003664:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	bc80      	pop	{r7}
 8003670:	4770      	bx	lr

08003672 <LL_RCC_SetI2SClockSource>:
{
 8003672:	b480      	push	{r7}
 8003674:	b083      	sub	sp, #12
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800367a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800367e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003682:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003686:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4313      	orrs	r3, r2
 800368e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003692:	bf00      	nop
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	bc80      	pop	{r7}
 800369a:	4770      	bx	lr

0800369c <LL_RCC_SetLPUARTClockSource>:
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80036a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ac:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80036b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bc80      	pop	{r7}
 80036c4:	4770      	bx	lr

080036c6 <LL_RCC_SetI2CClockSource>:
{
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80036ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036d2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	091b      	lsrs	r3, r3, #4
 80036da:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80036de:	43db      	mvns	r3, r3
 80036e0:	401a      	ands	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	011b      	lsls	r3, r3, #4
 80036e6:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80036ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80036ee:	4313      	orrs	r3, r2
 80036f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bc80      	pop	{r7}
 80036fc:	4770      	bx	lr

080036fe <LL_RCC_SetLPTIMClockSource>:
{
 80036fe:	b480      	push	{r7}
 8003700:	b083      	sub	sp, #12
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003706:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800370a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	0c1b      	lsrs	r3, r3, #16
 8003712:	041b      	lsls	r3, r3, #16
 8003714:	43db      	mvns	r3, r3
 8003716:	401a      	ands	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	041b      	lsls	r3, r3, #16
 800371c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003720:	4313      	orrs	r3, r2
 8003722:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	bc80      	pop	{r7}
 800372e:	4770      	bx	lr

08003730 <LL_RCC_SetRNGClockSource>:
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003738:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800373c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003740:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003744:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4313      	orrs	r3, r2
 800374c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	bc80      	pop	{r7}
 8003758:	4770      	bx	lr

0800375a <LL_RCC_SetADCClockSource>:
{
 800375a:	b480      	push	{r7}
 800375c:	b083      	sub	sp, #12
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003762:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800376a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800376e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4313      	orrs	r3, r2
 8003776:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800377a:	bf00      	nop
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	bc80      	pop	{r7}
 8003782:	4770      	bx	lr

08003784 <LL_RCC_SetRTCClockSource>:
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800378c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003790:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003794:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003798:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4313      	orrs	r3, r2
 80037a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bc80      	pop	{r7}
 80037ac:	4770      	bx	lr

080037ae <LL_RCC_GetRTCClockSource>:
{
 80037ae:	b480      	push	{r7}
 80037b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80037b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80037be:	4618      	mov	r0, r3
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bc80      	pop	{r7}
 80037c4:	4770      	bx	lr

080037c6 <LL_RCC_ForceBackupDomainReset>:
{
 80037c6:	b480      	push	{r7}
 80037c8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80037ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80037d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80037de:	bf00      	nop
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bc80      	pop	{r7}
 80037e4:	4770      	bx	lr

080037e6 <LL_RCC_ReleaseBackupDomainReset>:
{
 80037e6:	b480      	push	{r7}
 80037e8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80037ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80037f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80037fe:	bf00      	nop
 8003800:	46bd      	mov	sp, r7
 8003802:	bc80      	pop	{r7}
 8003804:	4770      	bx	lr
	...

08003808 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b086      	sub	sp, #24
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003810:	2300      	movs	r3, #0
 8003812:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003814:	2300      	movs	r3, #0
 8003816:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003818:	2300      	movs	r3, #0
 800381a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d058      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003828:	f7fe fdda 	bl	80023e0 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800382c:	f7fe fb0e 	bl	8001e4c <HAL_GetTick>
 8003830:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003832:	e009      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003834:	f7fe fb0a 	bl	8001e4c <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b02      	cmp	r3, #2
 8003840:	d902      	bls.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	74fb      	strb	r3, [r7, #19]
        break;
 8003846:	e006      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003848:	4b7b      	ldr	r3, [pc, #492]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003850:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003854:	d1ee      	bne.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003856:	7cfb      	ldrb	r3, [r7, #19]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d13c      	bne.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800385c:	f7ff ffa7 	bl	80037ae <LL_RCC_GetRTCClockSource>
 8003860:	4602      	mov	r2, r0
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003866:	429a      	cmp	r2, r3
 8003868:	d00f      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800386a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800386e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003872:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003876:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003878:	f7ff ffa5 	bl	80037c6 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 800387c:	f7ff ffb3 	bl	80037e6 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003880:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d014      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003894:	f7fe fada 	bl	8001e4c <HAL_GetTick>
 8003898:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800389a:	e00b      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800389c:	f7fe fad6 	bl	8001e4c <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d902      	bls.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	74fb      	strb	r3, [r7, #19]
            break;
 80038b2:	e004      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80038b4:	f7ff feb4 	bl	8003620 <LL_RCC_LSE_IsReady>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d1ee      	bne.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80038be:	7cfb      	ldrb	r3, [r7, #19]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d105      	bne.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff ff5b 	bl	8003784 <LL_RCC_SetRTCClockSource>
 80038ce:	e004      	b.n	80038da <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80038d0:	7cfb      	ldrb	r3, [r7, #19]
 80038d2:	74bb      	strb	r3, [r7, #18]
 80038d4:	e001      	b.n	80038da <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d6:	7cfb      	ldrb	r3, [r7, #19]
 80038d8:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d004      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7ff fea9 	bl	8003642 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d004      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	4618      	mov	r0, r3
 8003902:	f7ff fe9e 	bl	8003642 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0320 	and.w	r3, r3, #32
 800390e:	2b00      	cmp	r3, #0
 8003910:	d004      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	4618      	mov	r0, r3
 8003918:	f7ff fec0 	bl	800369c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003924:	2b00      	cmp	r3, #0
 8003926:	d004      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	4618      	mov	r0, r3
 800392e:	f7ff fee6 	bl	80036fe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800393a:	2b00      	cmp	r3, #0
 800393c:	d004      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003942:	4618      	mov	r0, r3
 8003944:	f7ff fedb 	bl	80036fe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003950:	2b00      	cmp	r3, #0
 8003952:	d004      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003958:	4618      	mov	r0, r3
 800395a:	f7ff fed0 	bl	80036fe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003966:	2b00      	cmp	r3, #0
 8003968:	d004      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	4618      	mov	r0, r3
 8003970:	f7ff fea9 	bl	80036c6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800397c:	2b00      	cmp	r3, #0
 800397e:	d004      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	4618      	mov	r0, r3
 8003986:	f7ff fe9e 	bl	80036c6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003992:	2b00      	cmp	r3, #0
 8003994:	d004      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	69db      	ldr	r3, [r3, #28]
 800399a:	4618      	mov	r0, r3
 800399c:	f7ff fe93 	bl	80036c6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0310 	and.w	r3, r3, #16
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d011      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7ff fe5e 	bl	8003672 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039be:	d107      	bne.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80039c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80039ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039ce:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d010      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7ff fea5 	bl	8003730 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d107      	bne.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80039ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80039f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039fc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d011      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7ff fea3 	bl	800375a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a1c:	d107      	bne.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003a1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a2c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003a2e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3718      	adds	r7, #24
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	58000400 	.word	0x58000400

08003a3c <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8003a44:	4b06      	ldr	r3, [pc, #24]	@ (8003a60 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003a4c:	4904      	ldr	r1, [pc, #16]	@ (8003a60 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	608b      	str	r3, [r1, #8]
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bc80      	pop	{r7}
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	58000400 	.word	0x58000400

08003a64 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8003a64:	b480      	push	{r7}
 8003a66:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003a68:	4b05      	ldr	r3, [pc, #20]	@ (8003a80 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8003a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a6e:	4a04      	ldr	r2, [pc, #16]	@ (8003a80 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8003a70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003a78:	bf00      	nop
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bc80      	pop	{r7}
 8003a7e:	4770      	bx	lr
 8003a80:	58000400 	.word	0x58000400

08003a84 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003a88:	4b05      	ldr	r3, [pc, #20]	@ (8003aa0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8003a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a8e:	4a04      	ldr	r2, [pc, #16]	@ (8003aa0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8003a90:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003a94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003a98:	bf00      	nop
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bc80      	pop	{r7}
 8003a9e:	4770      	bx	lr
 8003aa0:	58000400 	.word	0x58000400

08003aa4 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8003aa8:	4b03      	ldr	r3, [pc, #12]	@ (8003ab8 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8003aaa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003aae:	619a      	str	r2, [r3, #24]
}
 8003ab0:	bf00      	nop
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bc80      	pop	{r7}
 8003ab6:	4770      	bx	lr
 8003ab8:	58000400 	.word	0x58000400

08003abc <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8003abc:	b480      	push	{r7}
 8003abe:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8003ac0:	4b06      	ldr	r3, [pc, #24]	@ (8003adc <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d101      	bne.n	8003ad0 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8003acc:	2301      	movs	r3, #1
 8003ace:	e000      	b.n	8003ad2 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bc80      	pop	{r7}
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	58000400 	.word	0x58000400

08003ae0 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8003ae4:	4b06      	ldr	r3, [pc, #24]	@ (8003b00 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	f003 0304 	and.w	r3, r3, #4
 8003aec:	2b04      	cmp	r3, #4
 8003aee:	d101      	bne.n	8003af4 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8003af0:	2301      	movs	r3, #1
 8003af2:	e000      	b.n	8003af6 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bc80      	pop	{r7}
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	58000400 	.word	0x58000400

08003b04 <LL_RCC_RF_DisableReset>:
{
 8003b04:	b480      	push	{r7}
 8003b06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8003b08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b10:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b14:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003b18:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003b1c:	bf00      	nop
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bc80      	pop	{r7}
 8003b22:	4770      	bx	lr

08003b24 <LL_RCC_IsRFUnderReset>:
{
 8003b24:	b480      	push	{r7}
 8003b26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8003b28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b38:	d101      	bne.n	8003b3e <LL_RCC_IsRFUnderReset+0x1a>
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e000      	b.n	8003b40 <LL_RCC_IsRFUnderReset+0x1c>
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bc80      	pop	{r7}
 8003b46:	4770      	bx	lr

08003b48 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003b50:	4b06      	ldr	r3, [pc, #24]	@ (8003b6c <LL_EXTI_EnableIT_32_63+0x24>)
 8003b52:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8003b56:	4905      	ldr	r1, [pc, #20]	@ (8003b6c <LL_EXTI_EnableIT_32_63+0x24>)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bc80      	pop	{r7}
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	58000800 	.word	0x58000800

08003b70 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d103      	bne.n	8003b86 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	73fb      	strb	r3, [r7, #15]
    return status;
 8003b82:	7bfb      	ldrb	r3, [r7, #15]
 8003b84:	e052      	b.n	8003c2c <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8003b86:	2300      	movs	r3, #0
 8003b88:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	799b      	ldrb	r3, [r3, #6]
 8003b8e:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8003b90:	7bbb      	ldrb	r3, [r7, #14]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d002      	beq.n	8003b9c <HAL_SUBGHZ_Init+0x2c>
 8003b96:	7bbb      	ldrb	r3, [r7, #14]
 8003b98:	2b03      	cmp	r3, #3
 8003b9a:	d109      	bne.n	8003bb0 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7fc ff7c 	bl	8000aa0 <HAL_SUBGHZ_MspInit>
#if defined(CORE_CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8003ba8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003bac:	f7ff ffcc 	bl	8003b48 <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8003bb0:	7bbb      	ldrb	r3, [r7, #14]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d126      	bne.n	8003c04 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2202      	movs	r2, #2
 8003bba:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8003bbc:	f7ff ffa2 	bl	8003b04 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003bc0:	4b1c      	ldr	r3, [pc, #112]	@ (8003c34 <HAL_SUBGHZ_Init+0xc4>)
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	1a9b      	subs	r3, r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	0cdb      	lsrs	r3, r3, #19
 8003bce:	2264      	movs	r2, #100	@ 0x64
 8003bd0:	fb02 f303 	mul.w	r3, r2, r3
 8003bd4:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d105      	bne.n	8003be8 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	609a      	str	r2, [r3, #8]
        break;
 8003be6:	e007      	b.n	8003bf8 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	3b01      	subs	r3, #1
 8003bec:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8003bee:	f7ff ff99 	bl	8003b24 <LL_RCC_IsRFUnderReset>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1ee      	bne.n	8003bd6 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003bf8:	f7ff ff34 	bl	8003a64 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CORE_CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8003bfc:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003c00:	f7ff ff1c 	bl	8003a3c <LL_PWR_SetRadioBusyTrigger>
#endif /* CORE_CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8003c04:	f7ff ff4e 	bl	8003aa4 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8003c08:	7bfb      	ldrb	r3, [r7, #15]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10a      	bne.n	8003c24 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f000 fa5e 	bl	80040d4 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	719a      	strb	r2, [r3, #6]

  return status;
 8003c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	20000000 	.word	0x20000000

08003c38 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	607a      	str	r2, [r7, #4]
 8003c42:	461a      	mov	r2, r3
 8003c44:	460b      	mov	r3, r1
 8003c46:	817b      	strh	r3, [r7, #10]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	799b      	ldrb	r3, [r3, #6]
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d14a      	bne.n	8003cec <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	795b      	ldrb	r3, [r3, #5]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d101      	bne.n	8003c62 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8003c5e:	2302      	movs	r3, #2
 8003c60:	e045      	b.n	8003cee <HAL_SUBGHZ_WriteRegisters+0xb6>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2201      	movs	r2, #1
 8003c66:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	f000 fafe 	bl	8004270 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003c74:	f7ff ff06 	bl	8003a84 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8003c78:	210d      	movs	r1, #13
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f000 fa4a 	bl	8004114 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003c80:	897b      	ldrh	r3, [r7, #10]
 8003c82:	0a1b      	lsrs	r3, r3, #8
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	4619      	mov	r1, r3
 8003c8a:	68f8      	ldr	r0, [r7, #12]
 8003c8c:	f000 fa42 	bl	8004114 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003c90:	897b      	ldrh	r3, [r7, #10]
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	4619      	mov	r1, r3
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f000 fa3c 	bl	8004114 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	82bb      	strh	r3, [r7, #20]
 8003ca0:	e00a      	b.n	8003cb8 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003ca2:	8abb      	ldrh	r3, [r7, #20]
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	4619      	mov	r1, r3
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f000 fa31 	bl	8004114 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003cb2:	8abb      	ldrh	r3, [r7, #20]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	82bb      	strh	r3, [r7, #20]
 8003cb8:	8aba      	ldrh	r2, [r7, #20]
 8003cba:	893b      	ldrh	r3, [r7, #8]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d3f0      	bcc.n	8003ca2 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003cc0:	f7ff fed0 	bl	8003a64 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003cc4:	68f8      	ldr	r0, [r7, #12]
 8003cc6:	f000 faf7 	bl	80042b8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d002      	beq.n	8003cd8 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	75fb      	strb	r3, [r7, #23]
 8003cd6:	e001      	b.n	8003cdc <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	715a      	strb	r2, [r3, #5]

    return status;
 8003ce8:	7dfb      	ldrb	r3, [r7, #23]
 8003cea:	e000      	b.n	8003cee <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003cec:	2302      	movs	r3, #2
  }
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3718      	adds	r7, #24
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b088      	sub	sp, #32
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	60f8      	str	r0, [r7, #12]
 8003cfe:	607a      	str	r2, [r7, #4]
 8003d00:	461a      	mov	r2, r3
 8003d02:	460b      	mov	r3, r1
 8003d04:	817b      	strh	r3, [r7, #10]
 8003d06:	4613      	mov	r3, r2
 8003d08:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	799b      	ldrb	r3, [r3, #6]
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d14a      	bne.n	8003dae <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	795b      	ldrb	r3, [r3, #5]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d101      	bne.n	8003d24 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8003d20:	2302      	movs	r3, #2
 8003d22:	e045      	b.n	8003db0 <HAL_SUBGHZ_ReadRegisters+0xba>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2201      	movs	r2, #1
 8003d28:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f000 faa0 	bl	8004270 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003d30:	f7ff fea8 	bl	8003a84 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8003d34:	211d      	movs	r1, #29
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f000 f9ec 	bl	8004114 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003d3c:	897b      	ldrh	r3, [r7, #10]
 8003d3e:	0a1b      	lsrs	r3, r3, #8
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	4619      	mov	r1, r3
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f000 f9e4 	bl	8004114 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003d4c:	897b      	ldrh	r3, [r7, #10]
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	4619      	mov	r1, r3
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f000 f9de 	bl	8004114 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8003d58:	2100      	movs	r1, #0
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	f000 f9da 	bl	8004114 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003d60:	2300      	movs	r3, #0
 8003d62:	82fb      	strh	r3, [r7, #22]
 8003d64:	e009      	b.n	8003d7a <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003d66:	69b9      	ldr	r1, [r7, #24]
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f000 fa29 	bl	80041c0 <SUBGHZSPI_Receive>
      pData++;
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	3301      	adds	r3, #1
 8003d72:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003d74:	8afb      	ldrh	r3, [r7, #22]
 8003d76:	3301      	adds	r3, #1
 8003d78:	82fb      	strh	r3, [r7, #22]
 8003d7a:	8afa      	ldrh	r2, [r7, #22]
 8003d7c:	893b      	ldrh	r3, [r7, #8]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d3f1      	bcc.n	8003d66 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003d82:	f7ff fe6f 	bl	8003a64 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003d86:	68f8      	ldr	r0, [r7, #12]
 8003d88:	f000 fa96 	bl	80042b8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d002      	beq.n	8003d9a <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	77fb      	strb	r3, [r7, #31]
 8003d98:	e001      	b.n	8003d9e <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2201      	movs	r2, #1
 8003da2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	715a      	strb	r2, [r3, #5]

    return status;
 8003daa:	7ffb      	ldrb	r3, [r7, #31]
 8003dac:	e000      	b.n	8003db0 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8003dae:	2302      	movs	r3, #2
  }
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3720      	adds	r7, #32
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	607a      	str	r2, [r7, #4]
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	72fb      	strb	r3, [r7, #11]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	799b      	ldrb	r3, [r3, #6]
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d14a      	bne.n	8003e6c <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	795b      	ldrb	r3, [r3, #5]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d101      	bne.n	8003de2 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8003dde:	2302      	movs	r3, #2
 8003de0:	e045      	b.n	8003e6e <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2201      	movs	r2, #1
 8003de6:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003de8:	68f8      	ldr	r0, [r7, #12]
 8003dea:	f000 fa41 	bl	8004270 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8003dee:	7afb      	ldrb	r3, [r7, #11]
 8003df0:	2b84      	cmp	r3, #132	@ 0x84
 8003df2:	d002      	beq.n	8003dfa <HAL_SUBGHZ_ExecSetCmd+0x42>
 8003df4:	7afb      	ldrb	r3, [r7, #11]
 8003df6:	2b94      	cmp	r3, #148	@ 0x94
 8003df8:	d103      	bne.n	8003e02 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	711a      	strb	r2, [r3, #4]
 8003e00:	e002      	b.n	8003e08 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003e08:	f7ff fe3c 	bl	8003a84 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003e0c:	7afb      	ldrb	r3, [r7, #11]
 8003e0e:	4619      	mov	r1, r3
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f000 f97f 	bl	8004114 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003e16:	2300      	movs	r3, #0
 8003e18:	82bb      	strh	r3, [r7, #20]
 8003e1a:	e00a      	b.n	8003e32 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003e1c:	8abb      	ldrh	r3, [r7, #20]
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	4413      	add	r3, r2
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	4619      	mov	r1, r3
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f000 f974 	bl	8004114 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003e2c:	8abb      	ldrh	r3, [r7, #20]
 8003e2e:	3301      	adds	r3, #1
 8003e30:	82bb      	strh	r3, [r7, #20]
 8003e32:	8aba      	ldrh	r2, [r7, #20]
 8003e34:	893b      	ldrh	r3, [r7, #8]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d3f0      	bcc.n	8003e1c <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003e3a:	f7ff fe13 	bl	8003a64 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8003e3e:	7afb      	ldrb	r3, [r7, #11]
 8003e40:	2b84      	cmp	r3, #132	@ 0x84
 8003e42:	d002      	beq.n	8003e4a <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003e44:	68f8      	ldr	r0, [r7, #12]
 8003e46:	f000 fa37 	bl	80042b8 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d002      	beq.n	8003e58 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	75fb      	strb	r3, [r7, #23]
 8003e56:	e001      	b.n	8003e5c <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	715a      	strb	r2, [r3, #5]

    return status;
 8003e68:	7dfb      	ldrb	r3, [r7, #23]
 8003e6a:	e000      	b.n	8003e6e <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003e6c:	2302      	movs	r3, #2
  }
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3718      	adds	r7, #24
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b088      	sub	sp, #32
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	60f8      	str	r0, [r7, #12]
 8003e7e:	607a      	str	r2, [r7, #4]
 8003e80:	461a      	mov	r2, r3
 8003e82:	460b      	mov	r3, r1
 8003e84:	72fb      	strb	r3, [r7, #11]
 8003e86:	4613      	mov	r3, r2
 8003e88:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	799b      	ldrb	r3, [r3, #6]
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d13d      	bne.n	8003f14 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	795b      	ldrb	r3, [r3, #5]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d101      	bne.n	8003ea4 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	e038      	b.n	8003f16 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f000 f9e0 	bl	8004270 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003eb0:	f7ff fde8 	bl	8003a84 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003eb4:	7afb      	ldrb	r3, [r7, #11]
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f000 f92b 	bl	8004114 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f000 f927 	bl	8004114 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	82fb      	strh	r3, [r7, #22]
 8003eca:	e009      	b.n	8003ee0 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003ecc:	69b9      	ldr	r1, [r7, #24]
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f000 f976 	bl	80041c0 <SUBGHZSPI_Receive>
      pData++;
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003eda:	8afb      	ldrh	r3, [r7, #22]
 8003edc:	3301      	adds	r3, #1
 8003ede:	82fb      	strh	r3, [r7, #22]
 8003ee0:	8afa      	ldrh	r2, [r7, #22]
 8003ee2:	893b      	ldrh	r3, [r7, #8]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d3f1      	bcc.n	8003ecc <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003ee8:	f7ff fdbc 	bl	8003a64 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003eec:	68f8      	ldr	r0, [r7, #12]
 8003eee:	f000 f9e3 	bl	80042b8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d002      	beq.n	8003f00 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	77fb      	strb	r3, [r7, #31]
 8003efe:	e001      	b.n	8003f04 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8003f00:	2300      	movs	r3, #0
 8003f02:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2201      	movs	r2, #1
 8003f08:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	715a      	strb	r2, [r3, #5]

    return status;
 8003f10:	7ffb      	ldrb	r3, [r7, #31]
 8003f12:	e000      	b.n	8003f16 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003f14:	2302      	movs	r3, #2
  }
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3720      	adds	r7, #32
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b088      	sub	sp, #32
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	60f8      	str	r0, [r7, #12]
 8003f26:	607a      	str	r2, [r7, #4]
 8003f28:	461a      	mov	r2, r3
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	72fb      	strb	r3, [r7, #11]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	799b      	ldrb	r3, [r3, #6]
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d141      	bne.n	8003fc4 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	795b      	ldrb	r3, [r3, #5]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d101      	bne.n	8003f4c <HAL_SUBGHZ_ReadBuffer+0x2e>
 8003f48:	2302      	movs	r3, #2
 8003f4a:	e03c      	b.n	8003fc6 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f000 f98c 	bl	8004270 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003f58:	f7ff fd94 	bl	8003a84 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8003f5c:	211e      	movs	r1, #30
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f000 f8d8 	bl	8004114 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8003f64:	7afb      	ldrb	r3, [r7, #11]
 8003f66:	4619      	mov	r1, r3
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 f8d3 	bl	8004114 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8003f6e:	2100      	movs	r1, #0
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	f000 f8cf 	bl	8004114 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003f76:	2300      	movs	r3, #0
 8003f78:	82fb      	strh	r3, [r7, #22]
 8003f7a:	e009      	b.n	8003f90 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003f7c:	69b9      	ldr	r1, [r7, #24]
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f000 f91e 	bl	80041c0 <SUBGHZSPI_Receive>
      pData++;
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	3301      	adds	r3, #1
 8003f88:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003f8a:	8afb      	ldrh	r3, [r7, #22]
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	82fb      	strh	r3, [r7, #22]
 8003f90:	8afa      	ldrh	r2, [r7, #22]
 8003f92:	893b      	ldrh	r3, [r7, #8]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d3f1      	bcc.n	8003f7c <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003f98:	f7ff fd64 	bl	8003a64 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f000 f98b 	bl	80042b8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d002      	beq.n	8003fb0 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	77fb      	strb	r3, [r7, #31]
 8003fae:	e001      	b.n	8003fb4 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	715a      	strb	r2, [r3, #5]

    return status;
 8003fc0:	7ffb      	ldrb	r3, [r7, #31]
 8003fc2:	e000      	b.n	8003fc6 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8003fc4:	2302      	movs	r3, #2
  }
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3720      	adds	r7, #32
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b084      	sub	sp, #16
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8003fda:	f107 020c 	add.w	r2, r7, #12
 8003fde:	2302      	movs	r3, #2
 8003fe0:	2112      	movs	r1, #18
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f7ff ff47 	bl	8003e76 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8003fe8:	7b3b      	ldrb	r3, [r7, #12]
 8003fea:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8003fec:	89fb      	ldrh	r3, [r7, #14]
 8003fee:	021b      	lsls	r3, r3, #8
 8003ff0:	b21a      	sxth	r2, r3
 8003ff2:	7b7b      	ldrb	r3, [r7, #13]
 8003ff4:	b21b      	sxth	r3, r3
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	b21b      	sxth	r3, r3
 8003ffa:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8003ffc:	f107 020c 	add.w	r2, r7, #12
 8004000:	2302      	movs	r3, #2
 8004002:	2102      	movs	r1, #2
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f7ff fed7 	bl	8003db8 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800400a:	89fb      	ldrh	r3, [r7, #14]
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	2b00      	cmp	r3, #0
 8004012:	d002      	beq.n	800401a <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f7fd fdeb 	bl	8001bf0 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 800401a:	89fb      	ldrh	r3, [r7, #14]
 800401c:	f003 0302 	and.w	r3, r3, #2
 8004020:	2b00      	cmp	r3, #0
 8004022:	d007      	beq.n	8004034 <HAL_SUBGHZ_IRQHandler+0x66>
      (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) == RESET))
 8004024:	89fb      	ldrh	r3, [r7, #14]
 8004026:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 800402a:	2b00      	cmp	r3, #0
 800402c:	d102      	bne.n	8004034 <HAL_SUBGHZ_IRQHandler+0x66>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f7fd fdec 	bl	8001c0c <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8004034:	89fb      	ldrh	r3, [r7, #14]
 8004036:	f003 0304 	and.w	r3, r3, #4
 800403a:	2b00      	cmp	r3, #0
 800403c:	d002      	beq.n	8004044 <HAL_SUBGHZ_IRQHandler+0x76>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f7fd fe3c 	bl	8001cbc <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8004044:	89fb      	ldrh	r3, [r7, #14]
 8004046:	f003 0308 	and.w	r3, r3, #8
 800404a:	2b00      	cmp	r3, #0
 800404c:	d002      	beq.n	8004054 <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7fd fe42 	bl	8001cd8 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8004054:	89fb      	ldrh	r3, [r7, #14]
 8004056:	f003 0310 	and.w	r3, r3, #16
 800405a:	2b00      	cmp	r3, #0
 800405c:	d002      	beq.n	8004064 <HAL_SUBGHZ_IRQHandler+0x96>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f7fd fe48 	bl	8001cf4 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8004064:	89fb      	ldrh	r3, [r7, #14]
 8004066:	f003 0320 	and.w	r3, r3, #32
 800406a:	2b00      	cmp	r3, #0
 800406c:	d002      	beq.n	8004074 <HAL_SUBGHZ_IRQHandler+0xa6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7fd fe16 	bl	8001ca0 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8004074:	89fb      	ldrh	r3, [r7, #14]
 8004076:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800407a:	2b00      	cmp	r3, #0
 800407c:	d002      	beq.n	8004084 <HAL_SUBGHZ_IRQHandler+0xb6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f7fd fdd2 	bl	8001c28 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8004084:	89fb      	ldrh	r3, [r7, #14]
 8004086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00d      	beq.n	80040aa <HAL_SUBGHZ_IRQHandler+0xdc>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800408e:	89fb      	ldrh	r3, [r7, #14]
 8004090:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004094:	2b00      	cmp	r3, #0
 8004096:	d004      	beq.n	80040a2 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8004098:	2101      	movs	r1, #1
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7fd fdd2 	bl	8001c44 <HAL_SUBGHZ_CADStatusCallback>
 80040a0:	e003      	b.n	80040aa <HAL_SUBGHZ_IRQHandler+0xdc>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 80040a2:	2100      	movs	r1, #0
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f7fd fdcd 	bl	8001c44 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80040aa:	89fb      	ldrh	r3, [r7, #14]
 80040ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d002      	beq.n	80040ba <HAL_SUBGHZ_IRQHandler+0xec>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f7fd fde3 	bl	8001c80 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 80040ba:	89fb      	ldrh	r3, [r7, #14]
 80040bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d002      	beq.n	80040ca <HAL_SUBGHZ_IRQHandler+0xfc>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f7fd fe23 	bl	8001d10 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 80040ca:	bf00      	nop
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
	...

080040d4 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80040dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004110 <SUBGHZSPI_Init+0x3c>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a0b      	ldr	r2, [pc, #44]	@ (8004110 <SUBGHZSPI_Init+0x3c>)
 80040e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040e6:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 80040e8:	4a09      	ldr	r2, [pc, #36]	@ (8004110 <SUBGHZSPI_Init+0x3c>)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 80040f0:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80040f2:	4b07      	ldr	r3, [pc, #28]	@ (8004110 <SUBGHZSPI_Init+0x3c>)
 80040f4:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 80040f8:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80040fa:	4b05      	ldr	r3, [pc, #20]	@ (8004110 <SUBGHZSPI_Init+0x3c>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a04      	ldr	r2, [pc, #16]	@ (8004110 <SUBGHZSPI_Init+0x3c>)
 8004100:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004104:	6013      	str	r3, [r2, #0]
}
 8004106:	bf00      	nop
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	bc80      	pop	{r7}
 800410e:	4770      	bx	lr
 8004110:	58010000 	.word	0x58010000

08004114 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8004114:	b480      	push	{r7}
 8004116:	b087      	sub	sp, #28
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	460b      	mov	r3, r1
 800411e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004120:	2300      	movs	r3, #0
 8004122:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004124:	4b23      	ldr	r3, [pc, #140]	@ (80041b4 <SUBGHZSPI_Transmit+0xa0>)
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	4613      	mov	r3, r2
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	1a9b      	subs	r3, r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	0cdb      	lsrs	r3, r3, #19
 8004132:	2264      	movs	r2, #100	@ 0x64
 8004134:	fb02 f303 	mul.w	r3, r2, r3
 8004138:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d105      	bne.n	800414c <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	609a      	str	r2, [r3, #8]
      break;
 800414a:	e008      	b.n	800415e <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	3b01      	subs	r3, #1
 8004150:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004152:	4b19      	ldr	r3, [pc, #100]	@ (80041b8 <SUBGHZSPI_Transmit+0xa4>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b02      	cmp	r3, #2
 800415c:	d1ed      	bne.n	800413a <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800415e:	4b17      	ldr	r3, [pc, #92]	@ (80041bc <SUBGHZSPI_Transmit+0xa8>)
 8004160:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	78fa      	ldrb	r2, [r7, #3]
 8004166:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004168:	4b12      	ldr	r3, [pc, #72]	@ (80041b4 <SUBGHZSPI_Transmit+0xa0>)
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	4613      	mov	r3, r2
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	1a9b      	subs	r3, r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	0cdb      	lsrs	r3, r3, #19
 8004176:	2264      	movs	r2, #100	@ 0x64
 8004178:	fb02 f303 	mul.w	r3, r2, r3
 800417c:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d105      	bne.n	8004190 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	609a      	str	r2, [r3, #8]
      break;
 800418e:	e008      	b.n	80041a2 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	3b01      	subs	r3, #1
 8004194:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004196:	4b08      	ldr	r3, [pc, #32]	@ (80041b8 <SUBGHZSPI_Transmit+0xa4>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d1ed      	bne.n	800417e <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 80041a2:	4b05      	ldr	r3, [pc, #20]	@ (80041b8 <SUBGHZSPI_Transmit+0xa4>)
 80041a4:	68db      	ldr	r3, [r3, #12]

  return status;
 80041a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	371c      	adds	r7, #28
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bc80      	pop	{r7}
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	20000000 	.word	0x20000000
 80041b8:	58010000 	.word	0x58010000
 80041bc:	5801000c 	.word	0x5801000c

080041c0 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b087      	sub	sp, #28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041ca:	2300      	movs	r3, #0
 80041cc:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80041ce:	4b25      	ldr	r3, [pc, #148]	@ (8004264 <SUBGHZSPI_Receive+0xa4>)
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	4613      	mov	r3, r2
 80041d4:	00db      	lsls	r3, r3, #3
 80041d6:	1a9b      	subs	r3, r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	0cdb      	lsrs	r3, r3, #19
 80041dc:	2264      	movs	r2, #100	@ 0x64
 80041de:	fb02 f303 	mul.w	r3, r2, r3
 80041e2:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d105      	bne.n	80041f6 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	609a      	str	r2, [r3, #8]
      break;
 80041f4:	e008      	b.n	8004208 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	3b01      	subs	r3, #1
 80041fa:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80041fc:	4b1a      	ldr	r3, [pc, #104]	@ (8004268 <SUBGHZSPI_Receive+0xa8>)
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b02      	cmp	r3, #2
 8004206:	d1ed      	bne.n	80041e4 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004208:	4b18      	ldr	r3, [pc, #96]	@ (800426c <SUBGHZSPI_Receive+0xac>)
 800420a:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	22ff      	movs	r2, #255	@ 0xff
 8004210:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004212:	4b14      	ldr	r3, [pc, #80]	@ (8004264 <SUBGHZSPI_Receive+0xa4>)
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	4613      	mov	r3, r2
 8004218:	00db      	lsls	r3, r3, #3
 800421a:	1a9b      	subs	r3, r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	0cdb      	lsrs	r3, r3, #19
 8004220:	2264      	movs	r2, #100	@ 0x64
 8004222:	fb02 f303 	mul.w	r3, r2, r3
 8004226:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d105      	bne.n	800423a <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2201      	movs	r2, #1
 8004236:	609a      	str	r2, [r3, #8]
      break;
 8004238:	e008      	b.n	800424c <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	3b01      	subs	r3, #1
 800423e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004240:	4b09      	ldr	r3, [pc, #36]	@ (8004268 <SUBGHZSPI_Receive+0xa8>)
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	2b01      	cmp	r3, #1
 800424a:	d1ed      	bne.n	8004228 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 800424c:	4b06      	ldr	r3, [pc, #24]	@ (8004268 <SUBGHZSPI_Receive+0xa8>)
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	b2da      	uxtb	r2, r3
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	701a      	strb	r2, [r3, #0]

  return status;
 8004256:	7dfb      	ldrb	r3, [r7, #23]
}
 8004258:	4618      	mov	r0, r3
 800425a:	371c      	adds	r7, #28
 800425c:	46bd      	mov	sp, r7
 800425e:	bc80      	pop	{r7}
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	20000000 	.word	0x20000000
 8004268:	58010000 	.word	0x58010000
 800426c:	5801000c 	.word	0x5801000c

08004270 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	791b      	ldrb	r3, [r3, #4]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d111      	bne.n	80042a4 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8004280:	4b0c      	ldr	r3, [pc, #48]	@ (80042b4 <SUBGHZ_CheckDeviceReady+0x44>)
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	4613      	mov	r3, r2
 8004286:	005b      	lsls	r3, r3, #1
 8004288:	4413      	add	r3, r2
 800428a:	00db      	lsls	r3, r3, #3
 800428c:	0c1b      	lsrs	r3, r3, #16
 800428e:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004290:	f7ff fbf8 	bl	8003a84 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	3b01      	subs	r3, #1
 8004298:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1f9      	bne.n	8004294 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80042a0:	f7ff fbe0 	bl	8003a64 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 f807 	bl	80042b8 <SUBGHZ_WaitOnBusy>
 80042aa:	4603      	mov	r3, r0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	20000000 	.word	0x20000000

080042b8 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b086      	sub	sp, #24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 80042c0:	2300      	movs	r3, #0
 80042c2:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80042c4:	4b12      	ldr	r3, [pc, #72]	@ (8004310 <SUBGHZ_WaitOnBusy+0x58>)
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	4613      	mov	r3, r2
 80042ca:	005b      	lsls	r3, r3, #1
 80042cc:	4413      	add	r3, r2
 80042ce:	00db      	lsls	r3, r3, #3
 80042d0:	0d1b      	lsrs	r3, r3, #20
 80042d2:	2264      	movs	r2, #100	@ 0x64
 80042d4:	fb02 f303 	mul.w	r3, r2, r3
 80042d8:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 80042da:	f7ff fc01 	bl	8003ae0 <LL_PWR_IsActiveFlag_RFBUSYMS>
 80042de:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d105      	bne.n	80042f2 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2202      	movs	r2, #2
 80042ee:	609a      	str	r2, [r3, #8]
      break;
 80042f0:	e009      	b.n	8004306 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	3b01      	subs	r3, #1
 80042f6:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 80042f8:	f7ff fbe0 	bl	8003abc <LL_PWR_IsActiveFlag_RFBUSYS>
 80042fc:	4602      	mov	r2, r0
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	4013      	ands	r3, r2
 8004302:	2b01      	cmp	r3, #1
 8004304:	d0e9      	beq.n	80042da <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8004306:	7dfb      	ldrb	r3, [r7, #23]
}
 8004308:	4618      	mov	r0, r3
 800430a:	3718      	adds	r7, #24
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	20000000 	.word	0x20000000

08004314 <LL_RCC_GetUSARTClockSource>:
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800431c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004320:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	401a      	ands	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	041b      	lsls	r3, r3, #16
 800432c:	4313      	orrs	r3, r2
}
 800432e:	4618      	mov	r0, r3
 8004330:	370c      	adds	r7, #12
 8004332:	46bd      	mov	sp, r7
 8004334:	bc80      	pop	{r7}
 8004336:	4770      	bx	lr

08004338 <LL_RCC_GetLPUARTClockSource>:
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004340:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004344:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4013      	ands	r3, r2
}
 800434c:	4618      	mov	r0, r3
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	bc80      	pop	{r7}
 8004354:	4770      	bx	lr

08004356 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004356:	b580      	push	{r7, lr}
 8004358:	b082      	sub	sp, #8
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d101      	bne.n	8004368 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e042      	b.n	80043ee <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800436e:	2b00      	cmp	r3, #0
 8004370:	d106      	bne.n	8004380 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f7fc fc5c 	bl	8000c38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2224      	movs	r2, #36	@ 0x24
 8004384:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 0201 	bic.w	r2, r2, #1
 8004396:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800439c:	2b00      	cmp	r3, #0
 800439e:	d002      	beq.n	80043a6 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 fb23 	bl	80049ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 f8ac 	bl	8004504 <UART_SetConfig>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d101      	bne.n	80043b6 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e01b      	b.n	80043ee <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80043c4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80043d4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f042 0201 	orr.w	r2, r2, #1
 80043e4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 fba1 	bl	8004b2e <UART_CheckIdleState>
 80043ec:	4603      	mov	r3, r0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b08a      	sub	sp, #40	@ 0x28
 80043fa:	af02      	add	r7, sp, #8
 80043fc:	60f8      	str	r0, [r7, #12]
 80043fe:	60b9      	str	r1, [r7, #8]
 8004400:	603b      	str	r3, [r7, #0]
 8004402:	4613      	mov	r3, r2
 8004404:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800440c:	2b20      	cmp	r3, #32
 800440e:	d173      	bne.n	80044f8 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d002      	beq.n	800441c <HAL_UART_Transmit+0x26>
 8004416:	88fb      	ldrh	r3, [r7, #6]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d101      	bne.n	8004420 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e06c      	b.n	80044fa <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2221      	movs	r2, #33	@ 0x21
 800442c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004430:	f7fd fd0c 	bl	8001e4c <HAL_GetTick>
 8004434:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	88fa      	ldrh	r2, [r7, #6]
 800443a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	88fa      	ldrh	r2, [r7, #6]
 8004442:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800444e:	d108      	bne.n	8004462 <HAL_UART_Transmit+0x6c>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d104      	bne.n	8004462 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004458:	2300      	movs	r3, #0
 800445a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	61bb      	str	r3, [r7, #24]
 8004460:	e003      	b.n	800446a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004466:	2300      	movs	r3, #0
 8004468:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800446a:	e02c      	b.n	80044c6 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	9300      	str	r3, [sp, #0]
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	2200      	movs	r2, #0
 8004474:	2180      	movs	r1, #128	@ 0x80
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f000 fba7 	bl	8004bca <UART_WaitOnFlagUntilTimeout>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d001      	beq.n	8004486 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e039      	b.n	80044fa <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10b      	bne.n	80044a4 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	881b      	ldrh	r3, [r3, #0]
 8004490:	461a      	mov	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800449a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	3302      	adds	r3, #2
 80044a0:	61bb      	str	r3, [r7, #24]
 80044a2:	e007      	b.n	80044b4 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	781a      	ldrb	r2, [r3, #0]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	3301      	adds	r3, #1
 80044b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	3b01      	subs	r3, #1
 80044be:	b29a      	uxth	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1cc      	bne.n	800446c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	9300      	str	r3, [sp, #0]
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	2200      	movs	r2, #0
 80044da:	2140      	movs	r1, #64	@ 0x40
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f000 fb74 	bl	8004bca <UART_WaitOnFlagUntilTimeout>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d001      	beq.n	80044ec <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e006      	b.n	80044fa <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2220      	movs	r2, #32
 80044f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80044f4:	2300      	movs	r3, #0
 80044f6:	e000      	b.n	80044fa <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 80044f8:	2302      	movs	r3, #2
  }
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3720      	adds	r7, #32
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
	...

08004504 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004504:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004508:	b08c      	sub	sp, #48	@ 0x30
 800450a:	af00      	add	r7, sp, #0
 800450c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800450e:	2300      	movs	r3, #0
 8004510:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	689a      	ldr	r2, [r3, #8]
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	431a      	orrs	r2, r3
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	431a      	orrs	r2, r3
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	69db      	ldr	r3, [r3, #28]
 8004528:	4313      	orrs	r3, r2
 800452a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	4b94      	ldr	r3, [pc, #592]	@ (8004784 <UART_SetConfig+0x280>)
 8004534:	4013      	ands	r3, r2
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	6812      	ldr	r2, [r2, #0]
 800453a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800453c:	430b      	orrs	r3, r1
 800453e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	68da      	ldr	r2, [r3, #12]
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	430a      	orrs	r2, r1
 8004554:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a89      	ldr	r2, [pc, #548]	@ (8004788 <UART_SetConfig+0x284>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d004      	beq.n	8004570 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800456c:	4313      	orrs	r3, r2
 800456e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800457a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	6812      	ldr	r2, [r2, #0]
 8004582:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004584:	430b      	orrs	r3, r1
 8004586:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800458e:	f023 010f 	bic.w	r1, r3, #15
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a7a      	ldr	r2, [pc, #488]	@ (800478c <UART_SetConfig+0x288>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d127      	bne.n	80045f8 <UART_SetConfig+0xf4>
 80045a8:	2003      	movs	r0, #3
 80045aa:	f7ff feb3 	bl	8004314 <LL_RCC_GetUSARTClockSource>
 80045ae:	4603      	mov	r3, r0
 80045b0:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 80045b4:	2b03      	cmp	r3, #3
 80045b6:	d81b      	bhi.n	80045f0 <UART_SetConfig+0xec>
 80045b8:	a201      	add	r2, pc, #4	@ (adr r2, 80045c0 <UART_SetConfig+0xbc>)
 80045ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045be:	bf00      	nop
 80045c0:	080045d1 	.word	0x080045d1
 80045c4:	080045e1 	.word	0x080045e1
 80045c8:	080045d9 	.word	0x080045d9
 80045cc:	080045e9 	.word	0x080045e9
 80045d0:	2301      	movs	r3, #1
 80045d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045d6:	e080      	b.n	80046da <UART_SetConfig+0x1d6>
 80045d8:	2302      	movs	r3, #2
 80045da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045de:	e07c      	b.n	80046da <UART_SetConfig+0x1d6>
 80045e0:	2304      	movs	r3, #4
 80045e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045e6:	e078      	b.n	80046da <UART_SetConfig+0x1d6>
 80045e8:	2308      	movs	r3, #8
 80045ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045ee:	e074      	b.n	80046da <UART_SetConfig+0x1d6>
 80045f0:	2310      	movs	r3, #16
 80045f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045f6:	e070      	b.n	80046da <UART_SetConfig+0x1d6>
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a64      	ldr	r2, [pc, #400]	@ (8004790 <UART_SetConfig+0x28c>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d138      	bne.n	8004674 <UART_SetConfig+0x170>
 8004602:	200c      	movs	r0, #12
 8004604:	f7ff fe86 	bl	8004314 <LL_RCC_GetUSARTClockSource>
 8004608:	4603      	mov	r3, r0
 800460a:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 800460e:	2b0c      	cmp	r3, #12
 8004610:	d82c      	bhi.n	800466c <UART_SetConfig+0x168>
 8004612:	a201      	add	r2, pc, #4	@ (adr r2, 8004618 <UART_SetConfig+0x114>)
 8004614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004618:	0800464d 	.word	0x0800464d
 800461c:	0800466d 	.word	0x0800466d
 8004620:	0800466d 	.word	0x0800466d
 8004624:	0800466d 	.word	0x0800466d
 8004628:	0800465d 	.word	0x0800465d
 800462c:	0800466d 	.word	0x0800466d
 8004630:	0800466d 	.word	0x0800466d
 8004634:	0800466d 	.word	0x0800466d
 8004638:	08004655 	.word	0x08004655
 800463c:	0800466d 	.word	0x0800466d
 8004640:	0800466d 	.word	0x0800466d
 8004644:	0800466d 	.word	0x0800466d
 8004648:	08004665 	.word	0x08004665
 800464c:	2300      	movs	r3, #0
 800464e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004652:	e042      	b.n	80046da <UART_SetConfig+0x1d6>
 8004654:	2302      	movs	r3, #2
 8004656:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800465a:	e03e      	b.n	80046da <UART_SetConfig+0x1d6>
 800465c:	2304      	movs	r3, #4
 800465e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004662:	e03a      	b.n	80046da <UART_SetConfig+0x1d6>
 8004664:	2308      	movs	r3, #8
 8004666:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800466a:	e036      	b.n	80046da <UART_SetConfig+0x1d6>
 800466c:	2310      	movs	r3, #16
 800466e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004672:	e032      	b.n	80046da <UART_SetConfig+0x1d6>
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a43      	ldr	r2, [pc, #268]	@ (8004788 <UART_SetConfig+0x284>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d12a      	bne.n	80046d4 <UART_SetConfig+0x1d0>
 800467e:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8004682:	f7ff fe59 	bl	8004338 <LL_RCC_GetLPUARTClockSource>
 8004686:	4603      	mov	r3, r0
 8004688:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800468c:	d01a      	beq.n	80046c4 <UART_SetConfig+0x1c0>
 800468e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004692:	d81b      	bhi.n	80046cc <UART_SetConfig+0x1c8>
 8004694:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004698:	d00c      	beq.n	80046b4 <UART_SetConfig+0x1b0>
 800469a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800469e:	d815      	bhi.n	80046cc <UART_SetConfig+0x1c8>
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d003      	beq.n	80046ac <UART_SetConfig+0x1a8>
 80046a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046a8:	d008      	beq.n	80046bc <UART_SetConfig+0x1b8>
 80046aa:	e00f      	b.n	80046cc <UART_SetConfig+0x1c8>
 80046ac:	2300      	movs	r3, #0
 80046ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046b2:	e012      	b.n	80046da <UART_SetConfig+0x1d6>
 80046b4:	2302      	movs	r3, #2
 80046b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046ba:	e00e      	b.n	80046da <UART_SetConfig+0x1d6>
 80046bc:	2304      	movs	r3, #4
 80046be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046c2:	e00a      	b.n	80046da <UART_SetConfig+0x1d6>
 80046c4:	2308      	movs	r3, #8
 80046c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046ca:	e006      	b.n	80046da <UART_SetConfig+0x1d6>
 80046cc:	2310      	movs	r3, #16
 80046ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046d2:	e002      	b.n	80046da <UART_SetConfig+0x1d6>
 80046d4:	2310      	movs	r3, #16
 80046d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a2a      	ldr	r2, [pc, #168]	@ (8004788 <UART_SetConfig+0x284>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	f040 80a4 	bne.w	800482e <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80046e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80046ea:	2b08      	cmp	r3, #8
 80046ec:	d823      	bhi.n	8004736 <UART_SetConfig+0x232>
 80046ee:	a201      	add	r2, pc, #4	@ (adr r2, 80046f4 <UART_SetConfig+0x1f0>)
 80046f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f4:	08004719 	.word	0x08004719
 80046f8:	08004737 	.word	0x08004737
 80046fc:	08004721 	.word	0x08004721
 8004700:	08004737 	.word	0x08004737
 8004704:	08004727 	.word	0x08004727
 8004708:	08004737 	.word	0x08004737
 800470c:	08004737 	.word	0x08004737
 8004710:	08004737 	.word	0x08004737
 8004714:	0800472f 	.word	0x0800472f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004718:	f7fe feac 	bl	8003474 <HAL_RCC_GetPCLK1Freq>
 800471c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800471e:	e010      	b.n	8004742 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004720:	4b1c      	ldr	r3, [pc, #112]	@ (8004794 <UART_SetConfig+0x290>)
 8004722:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004724:	e00d      	b.n	8004742 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004726:	f7fe fdf1 	bl	800330c <HAL_RCC_GetSysClockFreq>
 800472a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800472c:	e009      	b.n	8004742 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800472e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004732:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004734:	e005      	b.n	8004742 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8004736:	2300      	movs	r3, #0
 8004738:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004740:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004744:	2b00      	cmp	r3, #0
 8004746:	f000 8137 	beq.w	80049b8 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800474e:	4a12      	ldr	r2, [pc, #72]	@ (8004798 <UART_SetConfig+0x294>)
 8004750:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004754:	461a      	mov	r2, r3
 8004756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004758:	fbb3 f3f2 	udiv	r3, r3, r2
 800475c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	685a      	ldr	r2, [r3, #4]
 8004762:	4613      	mov	r3, r2
 8004764:	005b      	lsls	r3, r3, #1
 8004766:	4413      	add	r3, r2
 8004768:	69ba      	ldr	r2, [r7, #24]
 800476a:	429a      	cmp	r2, r3
 800476c:	d305      	bcc.n	800477a <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	429a      	cmp	r2, r3
 8004778:	d910      	bls.n	800479c <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004780:	e11a      	b.n	80049b8 <UART_SetConfig+0x4b4>
 8004782:	bf00      	nop
 8004784:	cfff69f3 	.word	0xcfff69f3
 8004788:	40008000 	.word	0x40008000
 800478c:	40013800 	.word	0x40013800
 8004790:	40004400 	.word	0x40004400
 8004794:	00f42400 	.word	0x00f42400
 8004798:	08005a2c 	.word	0x08005a2c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800479c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800479e:	2200      	movs	r2, #0
 80047a0:	60bb      	str	r3, [r7, #8]
 80047a2:	60fa      	str	r2, [r7, #12]
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a8:	4a8e      	ldr	r2, [pc, #568]	@ (80049e4 <UART_SetConfig+0x4e0>)
 80047aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	2200      	movs	r2, #0
 80047b2:	603b      	str	r3, [r7, #0]
 80047b4:	607a      	str	r2, [r7, #4]
 80047b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80047be:	f7fb fd37 	bl	8000230 <__aeabi_uldivmod>
 80047c2:	4602      	mov	r2, r0
 80047c4:	460b      	mov	r3, r1
 80047c6:	4610      	mov	r0, r2
 80047c8:	4619      	mov	r1, r3
 80047ca:	f04f 0200 	mov.w	r2, #0
 80047ce:	f04f 0300 	mov.w	r3, #0
 80047d2:	020b      	lsls	r3, r1, #8
 80047d4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80047d8:	0202      	lsls	r2, r0, #8
 80047da:	6979      	ldr	r1, [r7, #20]
 80047dc:	6849      	ldr	r1, [r1, #4]
 80047de:	0849      	lsrs	r1, r1, #1
 80047e0:	2000      	movs	r0, #0
 80047e2:	460c      	mov	r4, r1
 80047e4:	4605      	mov	r5, r0
 80047e6:	eb12 0804 	adds.w	r8, r2, r4
 80047ea:	eb43 0905 	adc.w	r9, r3, r5
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	469a      	mov	sl, r3
 80047f6:	4693      	mov	fp, r2
 80047f8:	4652      	mov	r2, sl
 80047fa:	465b      	mov	r3, fp
 80047fc:	4640      	mov	r0, r8
 80047fe:	4649      	mov	r1, r9
 8004800:	f7fb fd16 	bl	8000230 <__aeabi_uldivmod>
 8004804:	4602      	mov	r2, r0
 8004806:	460b      	mov	r3, r1
 8004808:	4613      	mov	r3, r2
 800480a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800480c:	6a3b      	ldr	r3, [r7, #32]
 800480e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004812:	d308      	bcc.n	8004826 <UART_SetConfig+0x322>
 8004814:	6a3b      	ldr	r3, [r7, #32]
 8004816:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800481a:	d204      	bcs.n	8004826 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6a3a      	ldr	r2, [r7, #32]
 8004822:	60da      	str	r2, [r3, #12]
 8004824:	e0c8      	b.n	80049b8 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800482c:	e0c4      	b.n	80049b8 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004836:	d167      	bne.n	8004908 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8004838:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800483c:	2b08      	cmp	r3, #8
 800483e:	d828      	bhi.n	8004892 <UART_SetConfig+0x38e>
 8004840:	a201      	add	r2, pc, #4	@ (adr r2, 8004848 <UART_SetConfig+0x344>)
 8004842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004846:	bf00      	nop
 8004848:	0800486d 	.word	0x0800486d
 800484c:	08004875 	.word	0x08004875
 8004850:	0800487d 	.word	0x0800487d
 8004854:	08004893 	.word	0x08004893
 8004858:	08004883 	.word	0x08004883
 800485c:	08004893 	.word	0x08004893
 8004860:	08004893 	.word	0x08004893
 8004864:	08004893 	.word	0x08004893
 8004868:	0800488b 	.word	0x0800488b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800486c:	f7fe fe02 	bl	8003474 <HAL_RCC_GetPCLK1Freq>
 8004870:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004872:	e014      	b.n	800489e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004874:	f7fe fe10 	bl	8003498 <HAL_RCC_GetPCLK2Freq>
 8004878:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800487a:	e010      	b.n	800489e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800487c:	4b5a      	ldr	r3, [pc, #360]	@ (80049e8 <UART_SetConfig+0x4e4>)
 800487e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004880:	e00d      	b.n	800489e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004882:	f7fe fd43 	bl	800330c <HAL_RCC_GetSysClockFreq>
 8004886:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004888:	e009      	b.n	800489e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800488a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800488e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004890:	e005      	b.n	800489e <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8004892:	2300      	movs	r3, #0
 8004894:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800489c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800489e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f000 8089 	beq.w	80049b8 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048aa:	4a4e      	ldr	r2, [pc, #312]	@ (80049e4 <UART_SetConfig+0x4e0>)
 80048ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048b0:	461a      	mov	r2, r3
 80048b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80048b8:	005a      	lsls	r2, r3, #1
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	085b      	lsrs	r3, r3, #1
 80048c0:	441a      	add	r2, r3
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048cc:	6a3b      	ldr	r3, [r7, #32]
 80048ce:	2b0f      	cmp	r3, #15
 80048d0:	d916      	bls.n	8004900 <UART_SetConfig+0x3fc>
 80048d2:	6a3b      	ldr	r3, [r7, #32]
 80048d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048d8:	d212      	bcs.n	8004900 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048da:	6a3b      	ldr	r3, [r7, #32]
 80048dc:	b29b      	uxth	r3, r3
 80048de:	f023 030f 	bic.w	r3, r3, #15
 80048e2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048e4:	6a3b      	ldr	r3, [r7, #32]
 80048e6:	085b      	lsrs	r3, r3, #1
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	f003 0307 	and.w	r3, r3, #7
 80048ee:	b29a      	uxth	r2, r3
 80048f0:	8bfb      	ldrh	r3, [r7, #30]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	8bfa      	ldrh	r2, [r7, #30]
 80048fc:	60da      	str	r2, [r3, #12]
 80048fe:	e05b      	b.n	80049b8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004906:	e057      	b.n	80049b8 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004908:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800490c:	2b08      	cmp	r3, #8
 800490e:	d828      	bhi.n	8004962 <UART_SetConfig+0x45e>
 8004910:	a201      	add	r2, pc, #4	@ (adr r2, 8004918 <UART_SetConfig+0x414>)
 8004912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004916:	bf00      	nop
 8004918:	0800493d 	.word	0x0800493d
 800491c:	08004945 	.word	0x08004945
 8004920:	0800494d 	.word	0x0800494d
 8004924:	08004963 	.word	0x08004963
 8004928:	08004953 	.word	0x08004953
 800492c:	08004963 	.word	0x08004963
 8004930:	08004963 	.word	0x08004963
 8004934:	08004963 	.word	0x08004963
 8004938:	0800495b 	.word	0x0800495b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800493c:	f7fe fd9a 	bl	8003474 <HAL_RCC_GetPCLK1Freq>
 8004940:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004942:	e014      	b.n	800496e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004944:	f7fe fda8 	bl	8003498 <HAL_RCC_GetPCLK2Freq>
 8004948:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800494a:	e010      	b.n	800496e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800494c:	4b26      	ldr	r3, [pc, #152]	@ (80049e8 <UART_SetConfig+0x4e4>)
 800494e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004950:	e00d      	b.n	800496e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004952:	f7fe fcdb 	bl	800330c <HAL_RCC_GetSysClockFreq>
 8004956:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004958:	e009      	b.n	800496e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800495a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800495e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004960:	e005      	b.n	800496e <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8004962:	2300      	movs	r3, #0
 8004964:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800496c:	bf00      	nop
    }

    if (pclk != 0U)
 800496e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004970:	2b00      	cmp	r3, #0
 8004972:	d021      	beq.n	80049b8 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004978:	4a1a      	ldr	r2, [pc, #104]	@ (80049e4 <UART_SetConfig+0x4e0>)
 800497a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800497e:	461a      	mov	r2, r3
 8004980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004982:	fbb3 f2f2 	udiv	r2, r3, r2
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	085b      	lsrs	r3, r3, #1
 800498c:	441a      	add	r2, r3
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	fbb2 f3f3 	udiv	r3, r2, r3
 8004996:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004998:	6a3b      	ldr	r3, [r7, #32]
 800499a:	2b0f      	cmp	r3, #15
 800499c:	d909      	bls.n	80049b2 <UART_SetConfig+0x4ae>
 800499e:	6a3b      	ldr	r3, [r7, #32]
 80049a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049a4:	d205      	bcs.n	80049b2 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049a6:	6a3b      	ldr	r3, [r7, #32]
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	60da      	str	r2, [r3, #12]
 80049b0:	e002      	b.n	80049b8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	2200      	movs	r2, #0
 80049cc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	2200      	movs	r2, #0
 80049d2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80049d4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3730      	adds	r7, #48	@ 0x30
 80049dc:	46bd      	mov	sp, r7
 80049de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049e2:	bf00      	nop
 80049e4:	08005a2c 	.word	0x08005a2c
 80049e8:	00f42400 	.word	0x00f42400

080049ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049f8:	f003 0308 	and.w	r3, r3, #8
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00a      	beq.n	8004a16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	430a      	orrs	r2, r1
 8004a14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00a      	beq.n	8004a38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	430a      	orrs	r2, r1
 8004a36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a3c:	f003 0302 	and.w	r3, r3, #2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00a      	beq.n	8004a5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a5e:	f003 0304 	and.w	r3, r3, #4
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00a      	beq.n	8004a7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a80:	f003 0310 	and.w	r3, r3, #16
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00a      	beq.n	8004a9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aa2:	f003 0320 	and.w	r3, r3, #32
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00a      	beq.n	8004ac0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	430a      	orrs	r2, r1
 8004abe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ac4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d01a      	beq.n	8004b02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ae6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004aea:	d10a      	bne.n	8004b02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00a      	beq.n	8004b24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	430a      	orrs	r2, r1
 8004b22:	605a      	str	r2, [r3, #4]
  }
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bc80      	pop	{r7}
 8004b2c:	4770      	bx	lr

08004b2e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b086      	sub	sp, #24
 8004b32:	af02      	add	r7, sp, #8
 8004b34:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b3e:	f7fd f985 	bl	8001e4c <HAL_GetTick>
 8004b42:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0308 	and.w	r3, r3, #8
 8004b4e:	2b08      	cmp	r3, #8
 8004b50:	d10e      	bne.n	8004b70 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b52:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b56:	9300      	str	r3, [sp, #0]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 f832 	bl	8004bca <UART_WaitOnFlagUntilTimeout>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d001      	beq.n	8004b70 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e028      	b.n	8004bc2 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0304 	and.w	r3, r3, #4
 8004b7a:	2b04      	cmp	r3, #4
 8004b7c:	d10e      	bne.n	8004b9c <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b7e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b82:	9300      	str	r3, [sp, #0]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 f81c 	bl	8004bca <UART_WaitOnFlagUntilTimeout>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d001      	beq.n	8004b9c <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e012      	b.n	8004bc2 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2220      	movs	r2, #32
 8004ba0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b09c      	sub	sp, #112	@ 0x70
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	60f8      	str	r0, [r7, #12]
 8004bd2:	60b9      	str	r1, [r7, #8]
 8004bd4:	603b      	str	r3, [r7, #0]
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bda:	e0af      	b.n	8004d3c <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bdc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004bde:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004be2:	f000 80ab 	beq.w	8004d3c <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004be6:	f7fd f931 	bl	8001e4c <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d302      	bcc.n	8004bfc <UART_WaitOnFlagUntilTimeout+0x32>
 8004bf6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d140      	bne.n	8004c7e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c04:	e853 3f00 	ldrex	r3, [r3]
 8004c08:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004c0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c0c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004c10:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	461a      	mov	r2, r3
 8004c18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c1c:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004c20:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004c22:	e841 2300 	strex	r3, r2, [r1]
 8004c26:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8004c28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1e6      	bne.n	8004bfc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	3308      	adds	r3, #8
 8004c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c38:	e853 3f00 	ldrex	r3, [r3]
 8004c3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c40:	f023 0301 	bic.w	r3, r3, #1
 8004c44:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	3308      	adds	r3, #8
 8004c4c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004c4e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004c50:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c52:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004c54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c56:	e841 2300 	strex	r3, r2, [r1]
 8004c5a:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004c5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1e5      	bne.n	8004c2e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2220      	movs	r2, #32
 8004c66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2220      	movs	r2, #32
 8004c6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e06f      	b.n	8004d5e <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0304 	and.w	r3, r3, #4
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d057      	beq.n	8004d3c <UART_WaitOnFlagUntilTimeout+0x172>
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	2b80      	cmp	r3, #128	@ 0x80
 8004c90:	d054      	beq.n	8004d3c <UART_WaitOnFlagUntilTimeout+0x172>
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	2b40      	cmp	r3, #64	@ 0x40
 8004c96:	d051      	beq.n	8004d3c <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	69db      	ldr	r3, [r3, #28]
 8004c9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ca2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ca6:	d149      	bne.n	8004d3c <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004cb0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cba:	e853 3f00 	ldrex	r3, [r3]
 8004cbe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc2:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004cc6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	461a      	mov	r2, r3
 8004cce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cd2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004cd6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004cd8:	e841 2300 	strex	r3, r2, [r1]
 8004cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1e6      	bne.n	8004cb2 <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	3308      	adds	r3, #8
 8004cea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	e853 3f00 	ldrex	r3, [r3]
 8004cf2:	613b      	str	r3, [r7, #16]
   return(result);
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	f023 0301 	bic.w	r3, r3, #1
 8004cfa:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	3308      	adds	r3, #8
 8004d02:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004d04:	623a      	str	r2, [r7, #32]
 8004d06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d08:	69f9      	ldr	r1, [r7, #28]
 8004d0a:	6a3a      	ldr	r2, [r7, #32]
 8004d0c:	e841 2300 	strex	r3, r2, [r1]
 8004d10:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d1e5      	bne.n	8004ce4 <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2220      	movs	r2, #32
 8004d1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2220      	movs	r2, #32
 8004d24:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2220      	movs	r2, #32
 8004d2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e010      	b.n	8004d5e <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	69da      	ldr	r2, [r3, #28]
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	4013      	ands	r3, r2
 8004d46:	68ba      	ldr	r2, [r7, #8]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	bf0c      	ite	eq
 8004d4c:	2301      	moveq	r3, #1
 8004d4e:	2300      	movne	r3, #0
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	461a      	mov	r2, r3
 8004d54:	79fb      	ldrb	r3, [r7, #7]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	f43f af40 	beq.w	8004bdc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3770      	adds	r7, #112	@ 0x70
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004d66:	b480      	push	{r7}
 8004d68:	b085      	sub	sp, #20
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d101      	bne.n	8004d7c <HAL_UARTEx_DisableFifoMode+0x16>
 8004d78:	2302      	movs	r3, #2
 8004d7a:	e027      	b.n	8004dcc <HAL_UARTEx_DisableFifoMode+0x66>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2224      	movs	r2, #36	@ 0x24
 8004d88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f022 0201 	bic.w	r2, r2, #1
 8004da2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004daa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2220      	movs	r2, #32
 8004dbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3714      	adds	r7, #20
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bc80      	pop	{r7}
 8004dd4:	4770      	bx	lr

08004dd6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	b084      	sub	sp, #16
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
 8004dde:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d101      	bne.n	8004dee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004dea:	2302      	movs	r3, #2
 8004dec:	e02d      	b.n	8004e4a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2201      	movs	r2, #1
 8004df2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2224      	movs	r2, #36	@ 0x24
 8004dfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f022 0201 	bic.w	r2, r2, #1
 8004e14:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	683a      	ldr	r2, [r7, #0]
 8004e26:	430a      	orrs	r2, r1
 8004e28:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 f850 	bl	8004ed0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b084      	sub	sp, #16
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
 8004e5a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d101      	bne.n	8004e6a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004e66:	2302      	movs	r3, #2
 8004e68:	e02d      	b.n	8004ec6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2224      	movs	r2, #36	@ 0x24
 8004e76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f022 0201 	bic.w	r2, r2, #1
 8004e90:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	683a      	ldr	r2, [r7, #0]
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 f812 	bl	8004ed0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2220      	movs	r2, #32
 8004eb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3710      	adds	r7, #16
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
	...

08004ed0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d108      	bne.n	8004ef2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004ef0:	e031      	b.n	8004f56 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004ef2:	2308      	movs	r3, #8
 8004ef4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004ef6:	2308      	movs	r3, #8
 8004ef8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	0e5b      	lsrs	r3, r3, #25
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	f003 0307 	and.w	r3, r3, #7
 8004f08:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	0f5b      	lsrs	r3, r3, #29
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	f003 0307 	and.w	r3, r3, #7
 8004f18:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004f1a:	7bbb      	ldrb	r3, [r7, #14]
 8004f1c:	7b3a      	ldrb	r2, [r7, #12]
 8004f1e:	4910      	ldr	r1, [pc, #64]	@ (8004f60 <UARTEx_SetNbDataToProcess+0x90>)
 8004f20:	5c8a      	ldrb	r2, [r1, r2]
 8004f22:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004f26:	7b3a      	ldrb	r2, [r7, #12]
 8004f28:	490e      	ldr	r1, [pc, #56]	@ (8004f64 <UARTEx_SetNbDataToProcess+0x94>)
 8004f2a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004f2c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004f38:	7bfb      	ldrb	r3, [r7, #15]
 8004f3a:	7b7a      	ldrb	r2, [r7, #13]
 8004f3c:	4908      	ldr	r1, [pc, #32]	@ (8004f60 <UARTEx_SetNbDataToProcess+0x90>)
 8004f3e:	5c8a      	ldrb	r2, [r1, r2]
 8004f40:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004f44:	7b7a      	ldrb	r2, [r7, #13]
 8004f46:	4907      	ldr	r1, [pc, #28]	@ (8004f64 <UARTEx_SetNbDataToProcess+0x94>)
 8004f48:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004f4a:	fb93 f3f2 	sdiv	r3, r3, r2
 8004f4e:	b29a      	uxth	r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004f56:	bf00      	nop
 8004f58:	3714      	adds	r7, #20
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bc80      	pop	{r7}
 8004f5e:	4770      	bx	lr
 8004f60:	08005a44 	.word	0x08005a44
 8004f64:	08005a4c 	.word	0x08005a4c

08004f68 <siprintf>:
 8004f68:	b40e      	push	{r1, r2, r3}
 8004f6a:	b500      	push	{lr}
 8004f6c:	b09c      	sub	sp, #112	@ 0x70
 8004f6e:	ab1d      	add	r3, sp, #116	@ 0x74
 8004f70:	9002      	str	r0, [sp, #8]
 8004f72:	9006      	str	r0, [sp, #24]
 8004f74:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004f78:	4809      	ldr	r0, [pc, #36]	@ (8004fa0 <siprintf+0x38>)
 8004f7a:	9107      	str	r1, [sp, #28]
 8004f7c:	9104      	str	r1, [sp, #16]
 8004f7e:	4909      	ldr	r1, [pc, #36]	@ (8004fa4 <siprintf+0x3c>)
 8004f80:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f84:	9105      	str	r1, [sp, #20]
 8004f86:	6800      	ldr	r0, [r0, #0]
 8004f88:	9301      	str	r3, [sp, #4]
 8004f8a:	a902      	add	r1, sp, #8
 8004f8c:	f000 f9a2 	bl	80052d4 <_svfiprintf_r>
 8004f90:	9b02      	ldr	r3, [sp, #8]
 8004f92:	2200      	movs	r2, #0
 8004f94:	701a      	strb	r2, [r3, #0]
 8004f96:	b01c      	add	sp, #112	@ 0x70
 8004f98:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f9c:	b003      	add	sp, #12
 8004f9e:	4770      	bx	lr
 8004fa0:	20000018 	.word	0x20000018
 8004fa4:	ffff0208 	.word	0xffff0208

08004fa8 <memset>:
 8004fa8:	4402      	add	r2, r0
 8004faa:	4603      	mov	r3, r0
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d100      	bne.n	8004fb2 <memset+0xa>
 8004fb0:	4770      	bx	lr
 8004fb2:	f803 1b01 	strb.w	r1, [r3], #1
 8004fb6:	e7f9      	b.n	8004fac <memset+0x4>

08004fb8 <__errno>:
 8004fb8:	4b01      	ldr	r3, [pc, #4]	@ (8004fc0 <__errno+0x8>)
 8004fba:	6818      	ldr	r0, [r3, #0]
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	20000018 	.word	0x20000018

08004fc4 <__libc_init_array>:
 8004fc4:	b570      	push	{r4, r5, r6, lr}
 8004fc6:	4d0d      	ldr	r5, [pc, #52]	@ (8004ffc <__libc_init_array+0x38>)
 8004fc8:	4c0d      	ldr	r4, [pc, #52]	@ (8005000 <__libc_init_array+0x3c>)
 8004fca:	1b64      	subs	r4, r4, r5
 8004fcc:	10a4      	asrs	r4, r4, #2
 8004fce:	2600      	movs	r6, #0
 8004fd0:	42a6      	cmp	r6, r4
 8004fd2:	d109      	bne.n	8004fe8 <__libc_init_array+0x24>
 8004fd4:	4d0b      	ldr	r5, [pc, #44]	@ (8005004 <__libc_init_array+0x40>)
 8004fd6:	4c0c      	ldr	r4, [pc, #48]	@ (8005008 <__libc_init_array+0x44>)
 8004fd8:	f000 fc66 	bl	80058a8 <_init>
 8004fdc:	1b64      	subs	r4, r4, r5
 8004fde:	10a4      	asrs	r4, r4, #2
 8004fe0:	2600      	movs	r6, #0
 8004fe2:	42a6      	cmp	r6, r4
 8004fe4:	d105      	bne.n	8004ff2 <__libc_init_array+0x2e>
 8004fe6:	bd70      	pop	{r4, r5, r6, pc}
 8004fe8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fec:	4798      	blx	r3
 8004fee:	3601      	adds	r6, #1
 8004ff0:	e7ee      	b.n	8004fd0 <__libc_init_array+0xc>
 8004ff2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ff6:	4798      	blx	r3
 8004ff8:	3601      	adds	r6, #1
 8004ffa:	e7f2      	b.n	8004fe2 <__libc_init_array+0x1e>
 8004ffc:	08005a90 	.word	0x08005a90
 8005000:	08005a90 	.word	0x08005a90
 8005004:	08005a90 	.word	0x08005a90
 8005008:	08005a94 	.word	0x08005a94

0800500c <__retarget_lock_acquire_recursive>:
 800500c:	4770      	bx	lr

0800500e <__retarget_lock_release_recursive>:
 800500e:	4770      	bx	lr

08005010 <memcpy>:
 8005010:	440a      	add	r2, r1
 8005012:	4291      	cmp	r1, r2
 8005014:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005018:	d100      	bne.n	800501c <memcpy+0xc>
 800501a:	4770      	bx	lr
 800501c:	b510      	push	{r4, lr}
 800501e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005022:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005026:	4291      	cmp	r1, r2
 8005028:	d1f9      	bne.n	800501e <memcpy+0xe>
 800502a:	bd10      	pop	{r4, pc}

0800502c <_free_r>:
 800502c:	b538      	push	{r3, r4, r5, lr}
 800502e:	4605      	mov	r5, r0
 8005030:	2900      	cmp	r1, #0
 8005032:	d041      	beq.n	80050b8 <_free_r+0x8c>
 8005034:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005038:	1f0c      	subs	r4, r1, #4
 800503a:	2b00      	cmp	r3, #0
 800503c:	bfb8      	it	lt
 800503e:	18e4      	addlt	r4, r4, r3
 8005040:	f000 f8e0 	bl	8005204 <__malloc_lock>
 8005044:	4a1d      	ldr	r2, [pc, #116]	@ (80050bc <_free_r+0x90>)
 8005046:	6813      	ldr	r3, [r2, #0]
 8005048:	b933      	cbnz	r3, 8005058 <_free_r+0x2c>
 800504a:	6063      	str	r3, [r4, #4]
 800504c:	6014      	str	r4, [r2, #0]
 800504e:	4628      	mov	r0, r5
 8005050:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005054:	f000 b8dc 	b.w	8005210 <__malloc_unlock>
 8005058:	42a3      	cmp	r3, r4
 800505a:	d908      	bls.n	800506e <_free_r+0x42>
 800505c:	6820      	ldr	r0, [r4, #0]
 800505e:	1821      	adds	r1, r4, r0
 8005060:	428b      	cmp	r3, r1
 8005062:	bf01      	itttt	eq
 8005064:	6819      	ldreq	r1, [r3, #0]
 8005066:	685b      	ldreq	r3, [r3, #4]
 8005068:	1809      	addeq	r1, r1, r0
 800506a:	6021      	streq	r1, [r4, #0]
 800506c:	e7ed      	b.n	800504a <_free_r+0x1e>
 800506e:	461a      	mov	r2, r3
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	b10b      	cbz	r3, 8005078 <_free_r+0x4c>
 8005074:	42a3      	cmp	r3, r4
 8005076:	d9fa      	bls.n	800506e <_free_r+0x42>
 8005078:	6811      	ldr	r1, [r2, #0]
 800507a:	1850      	adds	r0, r2, r1
 800507c:	42a0      	cmp	r0, r4
 800507e:	d10b      	bne.n	8005098 <_free_r+0x6c>
 8005080:	6820      	ldr	r0, [r4, #0]
 8005082:	4401      	add	r1, r0
 8005084:	1850      	adds	r0, r2, r1
 8005086:	4283      	cmp	r3, r0
 8005088:	6011      	str	r1, [r2, #0]
 800508a:	d1e0      	bne.n	800504e <_free_r+0x22>
 800508c:	6818      	ldr	r0, [r3, #0]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	6053      	str	r3, [r2, #4]
 8005092:	4408      	add	r0, r1
 8005094:	6010      	str	r0, [r2, #0]
 8005096:	e7da      	b.n	800504e <_free_r+0x22>
 8005098:	d902      	bls.n	80050a0 <_free_r+0x74>
 800509a:	230c      	movs	r3, #12
 800509c:	602b      	str	r3, [r5, #0]
 800509e:	e7d6      	b.n	800504e <_free_r+0x22>
 80050a0:	6820      	ldr	r0, [r4, #0]
 80050a2:	1821      	adds	r1, r4, r0
 80050a4:	428b      	cmp	r3, r1
 80050a6:	bf04      	itt	eq
 80050a8:	6819      	ldreq	r1, [r3, #0]
 80050aa:	685b      	ldreq	r3, [r3, #4]
 80050ac:	6063      	str	r3, [r4, #4]
 80050ae:	bf04      	itt	eq
 80050b0:	1809      	addeq	r1, r1, r0
 80050b2:	6021      	streq	r1, [r4, #0]
 80050b4:	6054      	str	r4, [r2, #4]
 80050b6:	e7ca      	b.n	800504e <_free_r+0x22>
 80050b8:	bd38      	pop	{r3, r4, r5, pc}
 80050ba:	bf00      	nop
 80050bc:	20000384 	.word	0x20000384

080050c0 <sbrk_aligned>:
 80050c0:	b570      	push	{r4, r5, r6, lr}
 80050c2:	4e0f      	ldr	r6, [pc, #60]	@ (8005100 <sbrk_aligned+0x40>)
 80050c4:	460c      	mov	r4, r1
 80050c6:	6831      	ldr	r1, [r6, #0]
 80050c8:	4605      	mov	r5, r0
 80050ca:	b911      	cbnz	r1, 80050d2 <sbrk_aligned+0x12>
 80050cc:	f000 fba6 	bl	800581c <_sbrk_r>
 80050d0:	6030      	str	r0, [r6, #0]
 80050d2:	4621      	mov	r1, r4
 80050d4:	4628      	mov	r0, r5
 80050d6:	f000 fba1 	bl	800581c <_sbrk_r>
 80050da:	1c43      	adds	r3, r0, #1
 80050dc:	d103      	bne.n	80050e6 <sbrk_aligned+0x26>
 80050de:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80050e2:	4620      	mov	r0, r4
 80050e4:	bd70      	pop	{r4, r5, r6, pc}
 80050e6:	1cc4      	adds	r4, r0, #3
 80050e8:	f024 0403 	bic.w	r4, r4, #3
 80050ec:	42a0      	cmp	r0, r4
 80050ee:	d0f8      	beq.n	80050e2 <sbrk_aligned+0x22>
 80050f0:	1a21      	subs	r1, r4, r0
 80050f2:	4628      	mov	r0, r5
 80050f4:	f000 fb92 	bl	800581c <_sbrk_r>
 80050f8:	3001      	adds	r0, #1
 80050fa:	d1f2      	bne.n	80050e2 <sbrk_aligned+0x22>
 80050fc:	e7ef      	b.n	80050de <sbrk_aligned+0x1e>
 80050fe:	bf00      	nop
 8005100:	20000380 	.word	0x20000380

08005104 <_malloc_r>:
 8005104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005108:	1ccd      	adds	r5, r1, #3
 800510a:	f025 0503 	bic.w	r5, r5, #3
 800510e:	3508      	adds	r5, #8
 8005110:	2d0c      	cmp	r5, #12
 8005112:	bf38      	it	cc
 8005114:	250c      	movcc	r5, #12
 8005116:	2d00      	cmp	r5, #0
 8005118:	4606      	mov	r6, r0
 800511a:	db01      	blt.n	8005120 <_malloc_r+0x1c>
 800511c:	42a9      	cmp	r1, r5
 800511e:	d904      	bls.n	800512a <_malloc_r+0x26>
 8005120:	230c      	movs	r3, #12
 8005122:	6033      	str	r3, [r6, #0]
 8005124:	2000      	movs	r0, #0
 8005126:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800512a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005200 <_malloc_r+0xfc>
 800512e:	f000 f869 	bl	8005204 <__malloc_lock>
 8005132:	f8d8 3000 	ldr.w	r3, [r8]
 8005136:	461c      	mov	r4, r3
 8005138:	bb44      	cbnz	r4, 800518c <_malloc_r+0x88>
 800513a:	4629      	mov	r1, r5
 800513c:	4630      	mov	r0, r6
 800513e:	f7ff ffbf 	bl	80050c0 <sbrk_aligned>
 8005142:	1c43      	adds	r3, r0, #1
 8005144:	4604      	mov	r4, r0
 8005146:	d158      	bne.n	80051fa <_malloc_r+0xf6>
 8005148:	f8d8 4000 	ldr.w	r4, [r8]
 800514c:	4627      	mov	r7, r4
 800514e:	2f00      	cmp	r7, #0
 8005150:	d143      	bne.n	80051da <_malloc_r+0xd6>
 8005152:	2c00      	cmp	r4, #0
 8005154:	d04b      	beq.n	80051ee <_malloc_r+0xea>
 8005156:	6823      	ldr	r3, [r4, #0]
 8005158:	4639      	mov	r1, r7
 800515a:	4630      	mov	r0, r6
 800515c:	eb04 0903 	add.w	r9, r4, r3
 8005160:	f000 fb5c 	bl	800581c <_sbrk_r>
 8005164:	4581      	cmp	r9, r0
 8005166:	d142      	bne.n	80051ee <_malloc_r+0xea>
 8005168:	6821      	ldr	r1, [r4, #0]
 800516a:	1a6d      	subs	r5, r5, r1
 800516c:	4629      	mov	r1, r5
 800516e:	4630      	mov	r0, r6
 8005170:	f7ff ffa6 	bl	80050c0 <sbrk_aligned>
 8005174:	3001      	adds	r0, #1
 8005176:	d03a      	beq.n	80051ee <_malloc_r+0xea>
 8005178:	6823      	ldr	r3, [r4, #0]
 800517a:	442b      	add	r3, r5
 800517c:	6023      	str	r3, [r4, #0]
 800517e:	f8d8 3000 	ldr.w	r3, [r8]
 8005182:	685a      	ldr	r2, [r3, #4]
 8005184:	bb62      	cbnz	r2, 80051e0 <_malloc_r+0xdc>
 8005186:	f8c8 7000 	str.w	r7, [r8]
 800518a:	e00f      	b.n	80051ac <_malloc_r+0xa8>
 800518c:	6822      	ldr	r2, [r4, #0]
 800518e:	1b52      	subs	r2, r2, r5
 8005190:	d420      	bmi.n	80051d4 <_malloc_r+0xd0>
 8005192:	2a0b      	cmp	r2, #11
 8005194:	d917      	bls.n	80051c6 <_malloc_r+0xc2>
 8005196:	1961      	adds	r1, r4, r5
 8005198:	42a3      	cmp	r3, r4
 800519a:	6025      	str	r5, [r4, #0]
 800519c:	bf18      	it	ne
 800519e:	6059      	strne	r1, [r3, #4]
 80051a0:	6863      	ldr	r3, [r4, #4]
 80051a2:	bf08      	it	eq
 80051a4:	f8c8 1000 	streq.w	r1, [r8]
 80051a8:	5162      	str	r2, [r4, r5]
 80051aa:	604b      	str	r3, [r1, #4]
 80051ac:	4630      	mov	r0, r6
 80051ae:	f000 f82f 	bl	8005210 <__malloc_unlock>
 80051b2:	f104 000b 	add.w	r0, r4, #11
 80051b6:	1d23      	adds	r3, r4, #4
 80051b8:	f020 0007 	bic.w	r0, r0, #7
 80051bc:	1ac2      	subs	r2, r0, r3
 80051be:	bf1c      	itt	ne
 80051c0:	1a1b      	subne	r3, r3, r0
 80051c2:	50a3      	strne	r3, [r4, r2]
 80051c4:	e7af      	b.n	8005126 <_malloc_r+0x22>
 80051c6:	6862      	ldr	r2, [r4, #4]
 80051c8:	42a3      	cmp	r3, r4
 80051ca:	bf0c      	ite	eq
 80051cc:	f8c8 2000 	streq.w	r2, [r8]
 80051d0:	605a      	strne	r2, [r3, #4]
 80051d2:	e7eb      	b.n	80051ac <_malloc_r+0xa8>
 80051d4:	4623      	mov	r3, r4
 80051d6:	6864      	ldr	r4, [r4, #4]
 80051d8:	e7ae      	b.n	8005138 <_malloc_r+0x34>
 80051da:	463c      	mov	r4, r7
 80051dc:	687f      	ldr	r7, [r7, #4]
 80051de:	e7b6      	b.n	800514e <_malloc_r+0x4a>
 80051e0:	461a      	mov	r2, r3
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	42a3      	cmp	r3, r4
 80051e6:	d1fb      	bne.n	80051e0 <_malloc_r+0xdc>
 80051e8:	2300      	movs	r3, #0
 80051ea:	6053      	str	r3, [r2, #4]
 80051ec:	e7de      	b.n	80051ac <_malloc_r+0xa8>
 80051ee:	230c      	movs	r3, #12
 80051f0:	6033      	str	r3, [r6, #0]
 80051f2:	4630      	mov	r0, r6
 80051f4:	f000 f80c 	bl	8005210 <__malloc_unlock>
 80051f8:	e794      	b.n	8005124 <_malloc_r+0x20>
 80051fa:	6005      	str	r5, [r0, #0]
 80051fc:	e7d6      	b.n	80051ac <_malloc_r+0xa8>
 80051fe:	bf00      	nop
 8005200:	20000384 	.word	0x20000384

08005204 <__malloc_lock>:
 8005204:	4801      	ldr	r0, [pc, #4]	@ (800520c <__malloc_lock+0x8>)
 8005206:	f7ff bf01 	b.w	800500c <__retarget_lock_acquire_recursive>
 800520a:	bf00      	nop
 800520c:	2000037c 	.word	0x2000037c

08005210 <__malloc_unlock>:
 8005210:	4801      	ldr	r0, [pc, #4]	@ (8005218 <__malloc_unlock+0x8>)
 8005212:	f7ff befc 	b.w	800500e <__retarget_lock_release_recursive>
 8005216:	bf00      	nop
 8005218:	2000037c 	.word	0x2000037c

0800521c <__ssputs_r>:
 800521c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005220:	688e      	ldr	r6, [r1, #8]
 8005222:	461f      	mov	r7, r3
 8005224:	42be      	cmp	r6, r7
 8005226:	680b      	ldr	r3, [r1, #0]
 8005228:	4682      	mov	sl, r0
 800522a:	460c      	mov	r4, r1
 800522c:	4690      	mov	r8, r2
 800522e:	d82d      	bhi.n	800528c <__ssputs_r+0x70>
 8005230:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005234:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005238:	d026      	beq.n	8005288 <__ssputs_r+0x6c>
 800523a:	6965      	ldr	r5, [r4, #20]
 800523c:	6909      	ldr	r1, [r1, #16]
 800523e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005242:	eba3 0901 	sub.w	r9, r3, r1
 8005246:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800524a:	1c7b      	adds	r3, r7, #1
 800524c:	444b      	add	r3, r9
 800524e:	106d      	asrs	r5, r5, #1
 8005250:	429d      	cmp	r5, r3
 8005252:	bf38      	it	cc
 8005254:	461d      	movcc	r5, r3
 8005256:	0553      	lsls	r3, r2, #21
 8005258:	d527      	bpl.n	80052aa <__ssputs_r+0x8e>
 800525a:	4629      	mov	r1, r5
 800525c:	f7ff ff52 	bl	8005104 <_malloc_r>
 8005260:	4606      	mov	r6, r0
 8005262:	b360      	cbz	r0, 80052be <__ssputs_r+0xa2>
 8005264:	6921      	ldr	r1, [r4, #16]
 8005266:	464a      	mov	r2, r9
 8005268:	f7ff fed2 	bl	8005010 <memcpy>
 800526c:	89a3      	ldrh	r3, [r4, #12]
 800526e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005272:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005276:	81a3      	strh	r3, [r4, #12]
 8005278:	6126      	str	r6, [r4, #16]
 800527a:	6165      	str	r5, [r4, #20]
 800527c:	444e      	add	r6, r9
 800527e:	eba5 0509 	sub.w	r5, r5, r9
 8005282:	6026      	str	r6, [r4, #0]
 8005284:	60a5      	str	r5, [r4, #8]
 8005286:	463e      	mov	r6, r7
 8005288:	42be      	cmp	r6, r7
 800528a:	d900      	bls.n	800528e <__ssputs_r+0x72>
 800528c:	463e      	mov	r6, r7
 800528e:	6820      	ldr	r0, [r4, #0]
 8005290:	4632      	mov	r2, r6
 8005292:	4641      	mov	r1, r8
 8005294:	f000 faa8 	bl	80057e8 <memmove>
 8005298:	68a3      	ldr	r3, [r4, #8]
 800529a:	1b9b      	subs	r3, r3, r6
 800529c:	60a3      	str	r3, [r4, #8]
 800529e:	6823      	ldr	r3, [r4, #0]
 80052a0:	4433      	add	r3, r6
 80052a2:	6023      	str	r3, [r4, #0]
 80052a4:	2000      	movs	r0, #0
 80052a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052aa:	462a      	mov	r2, r5
 80052ac:	f000 fac6 	bl	800583c <_realloc_r>
 80052b0:	4606      	mov	r6, r0
 80052b2:	2800      	cmp	r0, #0
 80052b4:	d1e0      	bne.n	8005278 <__ssputs_r+0x5c>
 80052b6:	6921      	ldr	r1, [r4, #16]
 80052b8:	4650      	mov	r0, sl
 80052ba:	f7ff feb7 	bl	800502c <_free_r>
 80052be:	230c      	movs	r3, #12
 80052c0:	f8ca 3000 	str.w	r3, [sl]
 80052c4:	89a3      	ldrh	r3, [r4, #12]
 80052c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052ca:	81a3      	strh	r3, [r4, #12]
 80052cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80052d0:	e7e9      	b.n	80052a6 <__ssputs_r+0x8a>
	...

080052d4 <_svfiprintf_r>:
 80052d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052d8:	4698      	mov	r8, r3
 80052da:	898b      	ldrh	r3, [r1, #12]
 80052dc:	061b      	lsls	r3, r3, #24
 80052de:	b09d      	sub	sp, #116	@ 0x74
 80052e0:	4607      	mov	r7, r0
 80052e2:	460d      	mov	r5, r1
 80052e4:	4614      	mov	r4, r2
 80052e6:	d510      	bpl.n	800530a <_svfiprintf_r+0x36>
 80052e8:	690b      	ldr	r3, [r1, #16]
 80052ea:	b973      	cbnz	r3, 800530a <_svfiprintf_r+0x36>
 80052ec:	2140      	movs	r1, #64	@ 0x40
 80052ee:	f7ff ff09 	bl	8005104 <_malloc_r>
 80052f2:	6028      	str	r0, [r5, #0]
 80052f4:	6128      	str	r0, [r5, #16]
 80052f6:	b930      	cbnz	r0, 8005306 <_svfiprintf_r+0x32>
 80052f8:	230c      	movs	r3, #12
 80052fa:	603b      	str	r3, [r7, #0]
 80052fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005300:	b01d      	add	sp, #116	@ 0x74
 8005302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005306:	2340      	movs	r3, #64	@ 0x40
 8005308:	616b      	str	r3, [r5, #20]
 800530a:	2300      	movs	r3, #0
 800530c:	9309      	str	r3, [sp, #36]	@ 0x24
 800530e:	2320      	movs	r3, #32
 8005310:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005314:	f8cd 800c 	str.w	r8, [sp, #12]
 8005318:	2330      	movs	r3, #48	@ 0x30
 800531a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80054b8 <_svfiprintf_r+0x1e4>
 800531e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005322:	f04f 0901 	mov.w	r9, #1
 8005326:	4623      	mov	r3, r4
 8005328:	469a      	mov	sl, r3
 800532a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800532e:	b10a      	cbz	r2, 8005334 <_svfiprintf_r+0x60>
 8005330:	2a25      	cmp	r2, #37	@ 0x25
 8005332:	d1f9      	bne.n	8005328 <_svfiprintf_r+0x54>
 8005334:	ebba 0b04 	subs.w	fp, sl, r4
 8005338:	d00b      	beq.n	8005352 <_svfiprintf_r+0x7e>
 800533a:	465b      	mov	r3, fp
 800533c:	4622      	mov	r2, r4
 800533e:	4629      	mov	r1, r5
 8005340:	4638      	mov	r0, r7
 8005342:	f7ff ff6b 	bl	800521c <__ssputs_r>
 8005346:	3001      	adds	r0, #1
 8005348:	f000 80a7 	beq.w	800549a <_svfiprintf_r+0x1c6>
 800534c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800534e:	445a      	add	r2, fp
 8005350:	9209      	str	r2, [sp, #36]	@ 0x24
 8005352:	f89a 3000 	ldrb.w	r3, [sl]
 8005356:	2b00      	cmp	r3, #0
 8005358:	f000 809f 	beq.w	800549a <_svfiprintf_r+0x1c6>
 800535c:	2300      	movs	r3, #0
 800535e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005362:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005366:	f10a 0a01 	add.w	sl, sl, #1
 800536a:	9304      	str	r3, [sp, #16]
 800536c:	9307      	str	r3, [sp, #28]
 800536e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005372:	931a      	str	r3, [sp, #104]	@ 0x68
 8005374:	4654      	mov	r4, sl
 8005376:	2205      	movs	r2, #5
 8005378:	f814 1b01 	ldrb.w	r1, [r4], #1
 800537c:	484e      	ldr	r0, [pc, #312]	@ (80054b8 <_svfiprintf_r+0x1e4>)
 800537e:	f7fa ff07 	bl	8000190 <memchr>
 8005382:	9a04      	ldr	r2, [sp, #16]
 8005384:	b9d8      	cbnz	r0, 80053be <_svfiprintf_r+0xea>
 8005386:	06d0      	lsls	r0, r2, #27
 8005388:	bf44      	itt	mi
 800538a:	2320      	movmi	r3, #32
 800538c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005390:	0711      	lsls	r1, r2, #28
 8005392:	bf44      	itt	mi
 8005394:	232b      	movmi	r3, #43	@ 0x2b
 8005396:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800539a:	f89a 3000 	ldrb.w	r3, [sl]
 800539e:	2b2a      	cmp	r3, #42	@ 0x2a
 80053a0:	d015      	beq.n	80053ce <_svfiprintf_r+0xfa>
 80053a2:	9a07      	ldr	r2, [sp, #28]
 80053a4:	4654      	mov	r4, sl
 80053a6:	2000      	movs	r0, #0
 80053a8:	f04f 0c0a 	mov.w	ip, #10
 80053ac:	4621      	mov	r1, r4
 80053ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80053b2:	3b30      	subs	r3, #48	@ 0x30
 80053b4:	2b09      	cmp	r3, #9
 80053b6:	d94b      	bls.n	8005450 <_svfiprintf_r+0x17c>
 80053b8:	b1b0      	cbz	r0, 80053e8 <_svfiprintf_r+0x114>
 80053ba:	9207      	str	r2, [sp, #28]
 80053bc:	e014      	b.n	80053e8 <_svfiprintf_r+0x114>
 80053be:	eba0 0308 	sub.w	r3, r0, r8
 80053c2:	fa09 f303 	lsl.w	r3, r9, r3
 80053c6:	4313      	orrs	r3, r2
 80053c8:	9304      	str	r3, [sp, #16]
 80053ca:	46a2      	mov	sl, r4
 80053cc:	e7d2      	b.n	8005374 <_svfiprintf_r+0xa0>
 80053ce:	9b03      	ldr	r3, [sp, #12]
 80053d0:	1d19      	adds	r1, r3, #4
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	9103      	str	r1, [sp, #12]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	bfbb      	ittet	lt
 80053da:	425b      	neglt	r3, r3
 80053dc:	f042 0202 	orrlt.w	r2, r2, #2
 80053e0:	9307      	strge	r3, [sp, #28]
 80053e2:	9307      	strlt	r3, [sp, #28]
 80053e4:	bfb8      	it	lt
 80053e6:	9204      	strlt	r2, [sp, #16]
 80053e8:	7823      	ldrb	r3, [r4, #0]
 80053ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80053ec:	d10a      	bne.n	8005404 <_svfiprintf_r+0x130>
 80053ee:	7863      	ldrb	r3, [r4, #1]
 80053f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80053f2:	d132      	bne.n	800545a <_svfiprintf_r+0x186>
 80053f4:	9b03      	ldr	r3, [sp, #12]
 80053f6:	1d1a      	adds	r2, r3, #4
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	9203      	str	r2, [sp, #12]
 80053fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005400:	3402      	adds	r4, #2
 8005402:	9305      	str	r3, [sp, #20]
 8005404:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80054bc <_svfiprintf_r+0x1e8>
 8005408:	7821      	ldrb	r1, [r4, #0]
 800540a:	2203      	movs	r2, #3
 800540c:	4650      	mov	r0, sl
 800540e:	f7fa febf 	bl	8000190 <memchr>
 8005412:	b138      	cbz	r0, 8005424 <_svfiprintf_r+0x150>
 8005414:	9b04      	ldr	r3, [sp, #16]
 8005416:	eba0 000a 	sub.w	r0, r0, sl
 800541a:	2240      	movs	r2, #64	@ 0x40
 800541c:	4082      	lsls	r2, r0
 800541e:	4313      	orrs	r3, r2
 8005420:	3401      	adds	r4, #1
 8005422:	9304      	str	r3, [sp, #16]
 8005424:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005428:	4825      	ldr	r0, [pc, #148]	@ (80054c0 <_svfiprintf_r+0x1ec>)
 800542a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800542e:	2206      	movs	r2, #6
 8005430:	f7fa feae 	bl	8000190 <memchr>
 8005434:	2800      	cmp	r0, #0
 8005436:	d036      	beq.n	80054a6 <_svfiprintf_r+0x1d2>
 8005438:	4b22      	ldr	r3, [pc, #136]	@ (80054c4 <_svfiprintf_r+0x1f0>)
 800543a:	bb1b      	cbnz	r3, 8005484 <_svfiprintf_r+0x1b0>
 800543c:	9b03      	ldr	r3, [sp, #12]
 800543e:	3307      	adds	r3, #7
 8005440:	f023 0307 	bic.w	r3, r3, #7
 8005444:	3308      	adds	r3, #8
 8005446:	9303      	str	r3, [sp, #12]
 8005448:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800544a:	4433      	add	r3, r6
 800544c:	9309      	str	r3, [sp, #36]	@ 0x24
 800544e:	e76a      	b.n	8005326 <_svfiprintf_r+0x52>
 8005450:	fb0c 3202 	mla	r2, ip, r2, r3
 8005454:	460c      	mov	r4, r1
 8005456:	2001      	movs	r0, #1
 8005458:	e7a8      	b.n	80053ac <_svfiprintf_r+0xd8>
 800545a:	2300      	movs	r3, #0
 800545c:	3401      	adds	r4, #1
 800545e:	9305      	str	r3, [sp, #20]
 8005460:	4619      	mov	r1, r3
 8005462:	f04f 0c0a 	mov.w	ip, #10
 8005466:	4620      	mov	r0, r4
 8005468:	f810 2b01 	ldrb.w	r2, [r0], #1
 800546c:	3a30      	subs	r2, #48	@ 0x30
 800546e:	2a09      	cmp	r2, #9
 8005470:	d903      	bls.n	800547a <_svfiprintf_r+0x1a6>
 8005472:	2b00      	cmp	r3, #0
 8005474:	d0c6      	beq.n	8005404 <_svfiprintf_r+0x130>
 8005476:	9105      	str	r1, [sp, #20]
 8005478:	e7c4      	b.n	8005404 <_svfiprintf_r+0x130>
 800547a:	fb0c 2101 	mla	r1, ip, r1, r2
 800547e:	4604      	mov	r4, r0
 8005480:	2301      	movs	r3, #1
 8005482:	e7f0      	b.n	8005466 <_svfiprintf_r+0x192>
 8005484:	ab03      	add	r3, sp, #12
 8005486:	9300      	str	r3, [sp, #0]
 8005488:	462a      	mov	r2, r5
 800548a:	4b0f      	ldr	r3, [pc, #60]	@ (80054c8 <_svfiprintf_r+0x1f4>)
 800548c:	a904      	add	r1, sp, #16
 800548e:	4638      	mov	r0, r7
 8005490:	f3af 8000 	nop.w
 8005494:	1c42      	adds	r2, r0, #1
 8005496:	4606      	mov	r6, r0
 8005498:	d1d6      	bne.n	8005448 <_svfiprintf_r+0x174>
 800549a:	89ab      	ldrh	r3, [r5, #12]
 800549c:	065b      	lsls	r3, r3, #25
 800549e:	f53f af2d 	bmi.w	80052fc <_svfiprintf_r+0x28>
 80054a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80054a4:	e72c      	b.n	8005300 <_svfiprintf_r+0x2c>
 80054a6:	ab03      	add	r3, sp, #12
 80054a8:	9300      	str	r3, [sp, #0]
 80054aa:	462a      	mov	r2, r5
 80054ac:	4b06      	ldr	r3, [pc, #24]	@ (80054c8 <_svfiprintf_r+0x1f4>)
 80054ae:	a904      	add	r1, sp, #16
 80054b0:	4638      	mov	r0, r7
 80054b2:	f000 f879 	bl	80055a8 <_printf_i>
 80054b6:	e7ed      	b.n	8005494 <_svfiprintf_r+0x1c0>
 80054b8:	08005a54 	.word	0x08005a54
 80054bc:	08005a5a 	.word	0x08005a5a
 80054c0:	08005a5e 	.word	0x08005a5e
 80054c4:	00000000 	.word	0x00000000
 80054c8:	0800521d 	.word	0x0800521d

080054cc <_printf_common>:
 80054cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054d0:	4616      	mov	r6, r2
 80054d2:	4698      	mov	r8, r3
 80054d4:	688a      	ldr	r2, [r1, #8]
 80054d6:	690b      	ldr	r3, [r1, #16]
 80054d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80054dc:	4293      	cmp	r3, r2
 80054de:	bfb8      	it	lt
 80054e0:	4613      	movlt	r3, r2
 80054e2:	6033      	str	r3, [r6, #0]
 80054e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80054e8:	4607      	mov	r7, r0
 80054ea:	460c      	mov	r4, r1
 80054ec:	b10a      	cbz	r2, 80054f2 <_printf_common+0x26>
 80054ee:	3301      	adds	r3, #1
 80054f0:	6033      	str	r3, [r6, #0]
 80054f2:	6823      	ldr	r3, [r4, #0]
 80054f4:	0699      	lsls	r1, r3, #26
 80054f6:	bf42      	ittt	mi
 80054f8:	6833      	ldrmi	r3, [r6, #0]
 80054fa:	3302      	addmi	r3, #2
 80054fc:	6033      	strmi	r3, [r6, #0]
 80054fe:	6825      	ldr	r5, [r4, #0]
 8005500:	f015 0506 	ands.w	r5, r5, #6
 8005504:	d106      	bne.n	8005514 <_printf_common+0x48>
 8005506:	f104 0a19 	add.w	sl, r4, #25
 800550a:	68e3      	ldr	r3, [r4, #12]
 800550c:	6832      	ldr	r2, [r6, #0]
 800550e:	1a9b      	subs	r3, r3, r2
 8005510:	42ab      	cmp	r3, r5
 8005512:	dc26      	bgt.n	8005562 <_printf_common+0x96>
 8005514:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005518:	6822      	ldr	r2, [r4, #0]
 800551a:	3b00      	subs	r3, #0
 800551c:	bf18      	it	ne
 800551e:	2301      	movne	r3, #1
 8005520:	0692      	lsls	r2, r2, #26
 8005522:	d42b      	bmi.n	800557c <_printf_common+0xb0>
 8005524:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005528:	4641      	mov	r1, r8
 800552a:	4638      	mov	r0, r7
 800552c:	47c8      	blx	r9
 800552e:	3001      	adds	r0, #1
 8005530:	d01e      	beq.n	8005570 <_printf_common+0xa4>
 8005532:	6823      	ldr	r3, [r4, #0]
 8005534:	6922      	ldr	r2, [r4, #16]
 8005536:	f003 0306 	and.w	r3, r3, #6
 800553a:	2b04      	cmp	r3, #4
 800553c:	bf02      	ittt	eq
 800553e:	68e5      	ldreq	r5, [r4, #12]
 8005540:	6833      	ldreq	r3, [r6, #0]
 8005542:	1aed      	subeq	r5, r5, r3
 8005544:	68a3      	ldr	r3, [r4, #8]
 8005546:	bf0c      	ite	eq
 8005548:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800554c:	2500      	movne	r5, #0
 800554e:	4293      	cmp	r3, r2
 8005550:	bfc4      	itt	gt
 8005552:	1a9b      	subgt	r3, r3, r2
 8005554:	18ed      	addgt	r5, r5, r3
 8005556:	2600      	movs	r6, #0
 8005558:	341a      	adds	r4, #26
 800555a:	42b5      	cmp	r5, r6
 800555c:	d11a      	bne.n	8005594 <_printf_common+0xc8>
 800555e:	2000      	movs	r0, #0
 8005560:	e008      	b.n	8005574 <_printf_common+0xa8>
 8005562:	2301      	movs	r3, #1
 8005564:	4652      	mov	r2, sl
 8005566:	4641      	mov	r1, r8
 8005568:	4638      	mov	r0, r7
 800556a:	47c8      	blx	r9
 800556c:	3001      	adds	r0, #1
 800556e:	d103      	bne.n	8005578 <_printf_common+0xac>
 8005570:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005578:	3501      	adds	r5, #1
 800557a:	e7c6      	b.n	800550a <_printf_common+0x3e>
 800557c:	18e1      	adds	r1, r4, r3
 800557e:	1c5a      	adds	r2, r3, #1
 8005580:	2030      	movs	r0, #48	@ 0x30
 8005582:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005586:	4422      	add	r2, r4
 8005588:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800558c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005590:	3302      	adds	r3, #2
 8005592:	e7c7      	b.n	8005524 <_printf_common+0x58>
 8005594:	2301      	movs	r3, #1
 8005596:	4622      	mov	r2, r4
 8005598:	4641      	mov	r1, r8
 800559a:	4638      	mov	r0, r7
 800559c:	47c8      	blx	r9
 800559e:	3001      	adds	r0, #1
 80055a0:	d0e6      	beq.n	8005570 <_printf_common+0xa4>
 80055a2:	3601      	adds	r6, #1
 80055a4:	e7d9      	b.n	800555a <_printf_common+0x8e>
	...

080055a8 <_printf_i>:
 80055a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055ac:	7e0f      	ldrb	r7, [r1, #24]
 80055ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80055b0:	2f78      	cmp	r7, #120	@ 0x78
 80055b2:	4691      	mov	r9, r2
 80055b4:	4680      	mov	r8, r0
 80055b6:	460c      	mov	r4, r1
 80055b8:	469a      	mov	sl, r3
 80055ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80055be:	d807      	bhi.n	80055d0 <_printf_i+0x28>
 80055c0:	2f62      	cmp	r7, #98	@ 0x62
 80055c2:	d80a      	bhi.n	80055da <_printf_i+0x32>
 80055c4:	2f00      	cmp	r7, #0
 80055c6:	f000 80d2 	beq.w	800576e <_printf_i+0x1c6>
 80055ca:	2f58      	cmp	r7, #88	@ 0x58
 80055cc:	f000 80b9 	beq.w	8005742 <_printf_i+0x19a>
 80055d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80055d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80055d8:	e03a      	b.n	8005650 <_printf_i+0xa8>
 80055da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80055de:	2b15      	cmp	r3, #21
 80055e0:	d8f6      	bhi.n	80055d0 <_printf_i+0x28>
 80055e2:	a101      	add	r1, pc, #4	@ (adr r1, 80055e8 <_printf_i+0x40>)
 80055e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055e8:	08005641 	.word	0x08005641
 80055ec:	08005655 	.word	0x08005655
 80055f0:	080055d1 	.word	0x080055d1
 80055f4:	080055d1 	.word	0x080055d1
 80055f8:	080055d1 	.word	0x080055d1
 80055fc:	080055d1 	.word	0x080055d1
 8005600:	08005655 	.word	0x08005655
 8005604:	080055d1 	.word	0x080055d1
 8005608:	080055d1 	.word	0x080055d1
 800560c:	080055d1 	.word	0x080055d1
 8005610:	080055d1 	.word	0x080055d1
 8005614:	08005755 	.word	0x08005755
 8005618:	0800567f 	.word	0x0800567f
 800561c:	0800570f 	.word	0x0800570f
 8005620:	080055d1 	.word	0x080055d1
 8005624:	080055d1 	.word	0x080055d1
 8005628:	08005777 	.word	0x08005777
 800562c:	080055d1 	.word	0x080055d1
 8005630:	0800567f 	.word	0x0800567f
 8005634:	080055d1 	.word	0x080055d1
 8005638:	080055d1 	.word	0x080055d1
 800563c:	08005717 	.word	0x08005717
 8005640:	6833      	ldr	r3, [r6, #0]
 8005642:	1d1a      	adds	r2, r3, #4
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	6032      	str	r2, [r6, #0]
 8005648:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800564c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005650:	2301      	movs	r3, #1
 8005652:	e09d      	b.n	8005790 <_printf_i+0x1e8>
 8005654:	6833      	ldr	r3, [r6, #0]
 8005656:	6820      	ldr	r0, [r4, #0]
 8005658:	1d19      	adds	r1, r3, #4
 800565a:	6031      	str	r1, [r6, #0]
 800565c:	0606      	lsls	r6, r0, #24
 800565e:	d501      	bpl.n	8005664 <_printf_i+0xbc>
 8005660:	681d      	ldr	r5, [r3, #0]
 8005662:	e003      	b.n	800566c <_printf_i+0xc4>
 8005664:	0645      	lsls	r5, r0, #25
 8005666:	d5fb      	bpl.n	8005660 <_printf_i+0xb8>
 8005668:	f9b3 5000 	ldrsh.w	r5, [r3]
 800566c:	2d00      	cmp	r5, #0
 800566e:	da03      	bge.n	8005678 <_printf_i+0xd0>
 8005670:	232d      	movs	r3, #45	@ 0x2d
 8005672:	426d      	negs	r5, r5
 8005674:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005678:	4859      	ldr	r0, [pc, #356]	@ (80057e0 <_printf_i+0x238>)
 800567a:	230a      	movs	r3, #10
 800567c:	e011      	b.n	80056a2 <_printf_i+0xfa>
 800567e:	6821      	ldr	r1, [r4, #0]
 8005680:	6833      	ldr	r3, [r6, #0]
 8005682:	0608      	lsls	r0, r1, #24
 8005684:	f853 5b04 	ldr.w	r5, [r3], #4
 8005688:	d402      	bmi.n	8005690 <_printf_i+0xe8>
 800568a:	0649      	lsls	r1, r1, #25
 800568c:	bf48      	it	mi
 800568e:	b2ad      	uxthmi	r5, r5
 8005690:	2f6f      	cmp	r7, #111	@ 0x6f
 8005692:	4853      	ldr	r0, [pc, #332]	@ (80057e0 <_printf_i+0x238>)
 8005694:	6033      	str	r3, [r6, #0]
 8005696:	bf14      	ite	ne
 8005698:	230a      	movne	r3, #10
 800569a:	2308      	moveq	r3, #8
 800569c:	2100      	movs	r1, #0
 800569e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80056a2:	6866      	ldr	r6, [r4, #4]
 80056a4:	60a6      	str	r6, [r4, #8]
 80056a6:	2e00      	cmp	r6, #0
 80056a8:	bfa2      	ittt	ge
 80056aa:	6821      	ldrge	r1, [r4, #0]
 80056ac:	f021 0104 	bicge.w	r1, r1, #4
 80056b0:	6021      	strge	r1, [r4, #0]
 80056b2:	b90d      	cbnz	r5, 80056b8 <_printf_i+0x110>
 80056b4:	2e00      	cmp	r6, #0
 80056b6:	d04b      	beq.n	8005750 <_printf_i+0x1a8>
 80056b8:	4616      	mov	r6, r2
 80056ba:	fbb5 f1f3 	udiv	r1, r5, r3
 80056be:	fb03 5711 	mls	r7, r3, r1, r5
 80056c2:	5dc7      	ldrb	r7, [r0, r7]
 80056c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80056c8:	462f      	mov	r7, r5
 80056ca:	42bb      	cmp	r3, r7
 80056cc:	460d      	mov	r5, r1
 80056ce:	d9f4      	bls.n	80056ba <_printf_i+0x112>
 80056d0:	2b08      	cmp	r3, #8
 80056d2:	d10b      	bne.n	80056ec <_printf_i+0x144>
 80056d4:	6823      	ldr	r3, [r4, #0]
 80056d6:	07df      	lsls	r7, r3, #31
 80056d8:	d508      	bpl.n	80056ec <_printf_i+0x144>
 80056da:	6923      	ldr	r3, [r4, #16]
 80056dc:	6861      	ldr	r1, [r4, #4]
 80056de:	4299      	cmp	r1, r3
 80056e0:	bfde      	ittt	le
 80056e2:	2330      	movle	r3, #48	@ 0x30
 80056e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80056e8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80056ec:	1b92      	subs	r2, r2, r6
 80056ee:	6122      	str	r2, [r4, #16]
 80056f0:	f8cd a000 	str.w	sl, [sp]
 80056f4:	464b      	mov	r3, r9
 80056f6:	aa03      	add	r2, sp, #12
 80056f8:	4621      	mov	r1, r4
 80056fa:	4640      	mov	r0, r8
 80056fc:	f7ff fee6 	bl	80054cc <_printf_common>
 8005700:	3001      	adds	r0, #1
 8005702:	d14a      	bne.n	800579a <_printf_i+0x1f2>
 8005704:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005708:	b004      	add	sp, #16
 800570a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800570e:	6823      	ldr	r3, [r4, #0]
 8005710:	f043 0320 	orr.w	r3, r3, #32
 8005714:	6023      	str	r3, [r4, #0]
 8005716:	4833      	ldr	r0, [pc, #204]	@ (80057e4 <_printf_i+0x23c>)
 8005718:	2778      	movs	r7, #120	@ 0x78
 800571a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800571e:	6823      	ldr	r3, [r4, #0]
 8005720:	6831      	ldr	r1, [r6, #0]
 8005722:	061f      	lsls	r7, r3, #24
 8005724:	f851 5b04 	ldr.w	r5, [r1], #4
 8005728:	d402      	bmi.n	8005730 <_printf_i+0x188>
 800572a:	065f      	lsls	r7, r3, #25
 800572c:	bf48      	it	mi
 800572e:	b2ad      	uxthmi	r5, r5
 8005730:	6031      	str	r1, [r6, #0]
 8005732:	07d9      	lsls	r1, r3, #31
 8005734:	bf44      	itt	mi
 8005736:	f043 0320 	orrmi.w	r3, r3, #32
 800573a:	6023      	strmi	r3, [r4, #0]
 800573c:	b11d      	cbz	r5, 8005746 <_printf_i+0x19e>
 800573e:	2310      	movs	r3, #16
 8005740:	e7ac      	b.n	800569c <_printf_i+0xf4>
 8005742:	4827      	ldr	r0, [pc, #156]	@ (80057e0 <_printf_i+0x238>)
 8005744:	e7e9      	b.n	800571a <_printf_i+0x172>
 8005746:	6823      	ldr	r3, [r4, #0]
 8005748:	f023 0320 	bic.w	r3, r3, #32
 800574c:	6023      	str	r3, [r4, #0]
 800574e:	e7f6      	b.n	800573e <_printf_i+0x196>
 8005750:	4616      	mov	r6, r2
 8005752:	e7bd      	b.n	80056d0 <_printf_i+0x128>
 8005754:	6833      	ldr	r3, [r6, #0]
 8005756:	6825      	ldr	r5, [r4, #0]
 8005758:	6961      	ldr	r1, [r4, #20]
 800575a:	1d18      	adds	r0, r3, #4
 800575c:	6030      	str	r0, [r6, #0]
 800575e:	062e      	lsls	r6, r5, #24
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	d501      	bpl.n	8005768 <_printf_i+0x1c0>
 8005764:	6019      	str	r1, [r3, #0]
 8005766:	e002      	b.n	800576e <_printf_i+0x1c6>
 8005768:	0668      	lsls	r0, r5, #25
 800576a:	d5fb      	bpl.n	8005764 <_printf_i+0x1bc>
 800576c:	8019      	strh	r1, [r3, #0]
 800576e:	2300      	movs	r3, #0
 8005770:	6123      	str	r3, [r4, #16]
 8005772:	4616      	mov	r6, r2
 8005774:	e7bc      	b.n	80056f0 <_printf_i+0x148>
 8005776:	6833      	ldr	r3, [r6, #0]
 8005778:	1d1a      	adds	r2, r3, #4
 800577a:	6032      	str	r2, [r6, #0]
 800577c:	681e      	ldr	r6, [r3, #0]
 800577e:	6862      	ldr	r2, [r4, #4]
 8005780:	2100      	movs	r1, #0
 8005782:	4630      	mov	r0, r6
 8005784:	f7fa fd04 	bl	8000190 <memchr>
 8005788:	b108      	cbz	r0, 800578e <_printf_i+0x1e6>
 800578a:	1b80      	subs	r0, r0, r6
 800578c:	6060      	str	r0, [r4, #4]
 800578e:	6863      	ldr	r3, [r4, #4]
 8005790:	6123      	str	r3, [r4, #16]
 8005792:	2300      	movs	r3, #0
 8005794:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005798:	e7aa      	b.n	80056f0 <_printf_i+0x148>
 800579a:	6923      	ldr	r3, [r4, #16]
 800579c:	4632      	mov	r2, r6
 800579e:	4649      	mov	r1, r9
 80057a0:	4640      	mov	r0, r8
 80057a2:	47d0      	blx	sl
 80057a4:	3001      	adds	r0, #1
 80057a6:	d0ad      	beq.n	8005704 <_printf_i+0x15c>
 80057a8:	6823      	ldr	r3, [r4, #0]
 80057aa:	079b      	lsls	r3, r3, #30
 80057ac:	d413      	bmi.n	80057d6 <_printf_i+0x22e>
 80057ae:	68e0      	ldr	r0, [r4, #12]
 80057b0:	9b03      	ldr	r3, [sp, #12]
 80057b2:	4298      	cmp	r0, r3
 80057b4:	bfb8      	it	lt
 80057b6:	4618      	movlt	r0, r3
 80057b8:	e7a6      	b.n	8005708 <_printf_i+0x160>
 80057ba:	2301      	movs	r3, #1
 80057bc:	4632      	mov	r2, r6
 80057be:	4649      	mov	r1, r9
 80057c0:	4640      	mov	r0, r8
 80057c2:	47d0      	blx	sl
 80057c4:	3001      	adds	r0, #1
 80057c6:	d09d      	beq.n	8005704 <_printf_i+0x15c>
 80057c8:	3501      	adds	r5, #1
 80057ca:	68e3      	ldr	r3, [r4, #12]
 80057cc:	9903      	ldr	r1, [sp, #12]
 80057ce:	1a5b      	subs	r3, r3, r1
 80057d0:	42ab      	cmp	r3, r5
 80057d2:	dcf2      	bgt.n	80057ba <_printf_i+0x212>
 80057d4:	e7eb      	b.n	80057ae <_printf_i+0x206>
 80057d6:	2500      	movs	r5, #0
 80057d8:	f104 0619 	add.w	r6, r4, #25
 80057dc:	e7f5      	b.n	80057ca <_printf_i+0x222>
 80057de:	bf00      	nop
 80057e0:	08005a65 	.word	0x08005a65
 80057e4:	08005a76 	.word	0x08005a76

080057e8 <memmove>:
 80057e8:	4288      	cmp	r0, r1
 80057ea:	b510      	push	{r4, lr}
 80057ec:	eb01 0402 	add.w	r4, r1, r2
 80057f0:	d902      	bls.n	80057f8 <memmove+0x10>
 80057f2:	4284      	cmp	r4, r0
 80057f4:	4623      	mov	r3, r4
 80057f6:	d807      	bhi.n	8005808 <memmove+0x20>
 80057f8:	1e43      	subs	r3, r0, #1
 80057fa:	42a1      	cmp	r1, r4
 80057fc:	d008      	beq.n	8005810 <memmove+0x28>
 80057fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005802:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005806:	e7f8      	b.n	80057fa <memmove+0x12>
 8005808:	4402      	add	r2, r0
 800580a:	4601      	mov	r1, r0
 800580c:	428a      	cmp	r2, r1
 800580e:	d100      	bne.n	8005812 <memmove+0x2a>
 8005810:	bd10      	pop	{r4, pc}
 8005812:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005816:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800581a:	e7f7      	b.n	800580c <memmove+0x24>

0800581c <_sbrk_r>:
 800581c:	b538      	push	{r3, r4, r5, lr}
 800581e:	4d06      	ldr	r5, [pc, #24]	@ (8005838 <_sbrk_r+0x1c>)
 8005820:	2300      	movs	r3, #0
 8005822:	4604      	mov	r4, r0
 8005824:	4608      	mov	r0, r1
 8005826:	602b      	str	r3, [r5, #0]
 8005828:	f7fb f94e 	bl	8000ac8 <_sbrk>
 800582c:	1c43      	adds	r3, r0, #1
 800582e:	d102      	bne.n	8005836 <_sbrk_r+0x1a>
 8005830:	682b      	ldr	r3, [r5, #0]
 8005832:	b103      	cbz	r3, 8005836 <_sbrk_r+0x1a>
 8005834:	6023      	str	r3, [r4, #0]
 8005836:	bd38      	pop	{r3, r4, r5, pc}
 8005838:	20000378 	.word	0x20000378

0800583c <_realloc_r>:
 800583c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005840:	4680      	mov	r8, r0
 8005842:	4615      	mov	r5, r2
 8005844:	460c      	mov	r4, r1
 8005846:	b921      	cbnz	r1, 8005852 <_realloc_r+0x16>
 8005848:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800584c:	4611      	mov	r1, r2
 800584e:	f7ff bc59 	b.w	8005104 <_malloc_r>
 8005852:	b92a      	cbnz	r2, 8005860 <_realloc_r+0x24>
 8005854:	f7ff fbea 	bl	800502c <_free_r>
 8005858:	2400      	movs	r4, #0
 800585a:	4620      	mov	r0, r4
 800585c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005860:	f000 f81a 	bl	8005898 <_malloc_usable_size_r>
 8005864:	4285      	cmp	r5, r0
 8005866:	4606      	mov	r6, r0
 8005868:	d802      	bhi.n	8005870 <_realloc_r+0x34>
 800586a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800586e:	d8f4      	bhi.n	800585a <_realloc_r+0x1e>
 8005870:	4629      	mov	r1, r5
 8005872:	4640      	mov	r0, r8
 8005874:	f7ff fc46 	bl	8005104 <_malloc_r>
 8005878:	4607      	mov	r7, r0
 800587a:	2800      	cmp	r0, #0
 800587c:	d0ec      	beq.n	8005858 <_realloc_r+0x1c>
 800587e:	42b5      	cmp	r5, r6
 8005880:	462a      	mov	r2, r5
 8005882:	4621      	mov	r1, r4
 8005884:	bf28      	it	cs
 8005886:	4632      	movcs	r2, r6
 8005888:	f7ff fbc2 	bl	8005010 <memcpy>
 800588c:	4621      	mov	r1, r4
 800588e:	4640      	mov	r0, r8
 8005890:	f7ff fbcc 	bl	800502c <_free_r>
 8005894:	463c      	mov	r4, r7
 8005896:	e7e0      	b.n	800585a <_realloc_r+0x1e>

08005898 <_malloc_usable_size_r>:
 8005898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800589c:	1f18      	subs	r0, r3, #4
 800589e:	2b00      	cmp	r3, #0
 80058a0:	bfbc      	itt	lt
 80058a2:	580b      	ldrlt	r3, [r1, r0]
 80058a4:	18c0      	addlt	r0, r0, r3
 80058a6:	4770      	bx	lr

080058a8 <_init>:
 80058a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058aa:	bf00      	nop
 80058ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ae:	bc08      	pop	{r3}
 80058b0:	469e      	mov	lr, r3
 80058b2:	4770      	bx	lr

080058b4 <_fini>:
 80058b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058b6:	bf00      	nop
 80058b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ba:	bc08      	pop	{r3}
 80058bc:	469e      	mov	lr, r3
 80058be:	4770      	bx	lr
